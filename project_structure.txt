This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-27T01:35:51.043Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  ISSUE_TEMPLATE/
    custom.md
public/
  assets/
    icons/
      assign-reviewers.svg
    images/
      favicon.svg
  index.html
  manifest.json
  robots.txt
src/
  components/
    Form/
      FormCheckBox.tsx
      FormCheckBoxGroup.tsx
      FormDatePicker.tsx
      FormInput.tsx
      FormRadioGroup.tsx
      FormRange.tsx
      FormSelect.tsx
      interfaces.ts
    Table/
      ColumnFilter.tsx
      DebouncedInput.tsx
      GlobalFilter.tsx
      Pagination.tsx
      RowSelectCheckBox.tsx
      Table.tsx
    Alert.tsx
    Input.tsx
    Select.tsx
    ToolTip.tsx
  hooks/
    useAPI.ts
  layout/
    Administrator.tsx
    Header.tsx
    Root.tsx
  pages/
    Administrator/
      ManageUserTypes.tsx
    Assignments/
      Assignment.tsx
      AssignmentColumns.tsx
      AssignmentDelete.tsx
      AssignmentEditor.tsx
      AssignmentUtil.ts
      AssignReviewer.tsx
      CreateTeams.tsx
      ViewDelayedJobs.tsx
      ViewReports.tsx
      ViewScores.tsx
      ViewSubmissions.tsx
    Authentication/
      Login.tsx
      Logout.ts
    Courses/
      Course.tsx
      CourseColumns.tsx
      CourseCopy.tsx
      CourseDelete.tsx
      CourseEditor.tsx
      CourseUtil.ts
    EditQuestionnaire/
      ExportModal.js
      ImportModal.js
      Questionnaire.tsx
    Email_the_author/
      email_the_author.css
      email_the_author.tsx
    Institutions/
      institutionColumns.tsx
      InstitutionDelete.tsx
      InstitutionEditor.tsx
      Institutions.tsx
    Participants/
      Participant.tsx
      participantColumns.tsx
      ParticipantDelete.tsx
      ParticipantEditor.tsx
      participantUtil.ts
    Profile/
      Edit.css
      Edit.tsx
    ProjectTopics/
      ProjectTopics.css
      ProjectTopics.tsx
    Questionnaire/
      dummyData.json
      Questionnaire.css
      questionnaire.tsx
    Reviews/
      reviewData.ts
      Reviews.css
      reviews.tsx
    Roles/
      roleColumns.tsx
      RoleDelete.tsx
      RoleEditor.tsx
      Roles.tsx
    TA/
      TA.tsx
      TAColumns.tsx
      TADelete.tsx
      TAEditor.tsx
      TAUtil.ts
    Users/
      User.tsx
      userColumns.tsx
      UserDelete.tsx
      UserEditor.tsx
      userUtil.ts
    ViewTeamGrades/
      Data/
        authorFeedback.json
        dummyData.json
        heatMapData.json
        teammateData.json
      App.tsx
      BarGraph.tsx
      CircularProgress.tsx
      grades.scss
      ReviewTable.tsx
      ReviewTableRow.tsx
      RoundSelector.tsx
      ShowReviews.tsx
      Statistics.tsx
      teamMarks.tsx
      utils.ts
    Home.tsx
  router/
    AccessDenied.tsx
    ErrorPage.tsx
    NotFound.tsx
    ProtectedRoute.tsx
  store/
    slices/
      alertSlice.ts
      authenticationSlice.ts
    rootReducer.ts
    store.ts
  utils/
    auth.ts
    axios_client.ts
    httpMethods.ts
    interfaces.ts
    util.ts
  App.test.tsx
  App.tsx
  custom.scss
  index.css
  index.tsx
  react-app-env.d.ts
  reportWebVitals.ts
.gitignore
.prettierrc.yml
package.json
PR.md
README.md
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .github/ISSUE_TEMPLATE/custom.md
================
---
name: Custom issue template
about: Describe this issue template's purpose here.
title: ''
labels: ''
assignees: ''

---

================
File: public/assets/icons/assign-reviewers.svg
================
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns="http://www.w3.org/2000/svg"
        version="1.0"
        width="399.42856"
        height="399.42856"
        id="svg1901">
    <defs
            id="defs1903">
        <linearGradient
                id="linearGradient3714">
            <stop
                    id="stop3716"
                    style="stop-color:#ffffff;stop-opacity:0.73043478"
                    offset="0"/>
            <stop
                    id="stop3718"
                    style="stop-color:#ffffff;stop-opacity:0"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3706">
            <stop
                    id="stop3708"
                    style="stop-color:#57be00;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3710"
                    style="stop-color:#006200;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3698">
            <stop
                    id="stop3700"
                    style="stop-color:#caf899;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3702"
                    style="stop-color:#1da100;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3690">
            <stop
                    id="stop3692"
                    style="stop-color:#ffffff;stop-opacity:0"
                    offset="0"/>
            <stop
                    id="stop3694"
                    style="stop-color:#ffffff;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3592">
            <stop
                    id="stop3594"
                    style="stop-color:#fdee0d;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3596"
                    style="stop-color:#fdc622;stop-opacity:1"
                    offset="0.62582445"/>
            <stop
                    id="stop3598"
                    style="stop-color:#fd9200;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3584">
            <stop
                    id="stop3586"
                    style="stop-color:#fddd0b;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3588"
                    style="stop-color:#fdb819;stop-opacity:1"
                    offset="0.62582445"/>
            <stop
                    id="stop3590"
                    style="stop-color:#fd9200;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3578">
            <stop
                    id="stop3580"
                    style="stop-color:#c42f00;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3582"
                    style="stop-color:#fd5900;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3568">
            <stop
                    id="stop3570"
                    style="stop-color:#fdfc83;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3572"
                    style="stop-color:#fdc600;stop-opacity:1"
                    offset="0.52498668"/>
            <stop
                    id="stop3574"
                    style="stop-color:#fd9801;stop-opacity:1"
                    offset="0.76594102"/>
            <stop
                    id="stop3576"
                    style="stop-color:#f6c092;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3540">
            <stop
                    id="stop3542"
                    style="stop-color:#fd6c00;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3544"
                    style="stop-color:#c42f00;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3526">
            <stop
                    id="stop3528"
                    style="stop-color:#fdfc9a;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3530"
                    style="stop-color:#fdb700;stop-opacity:1"
                    offset="0.62582445"/>
            <stop
                    id="stop3532"
                    style="stop-color:#fd6c00;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3460">
            <stop
                    id="stop3462"
                    style="stop-color:#ffffff;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3468"
                    style="stop-color:#ffffff;stop-opacity:0"
                    offset="0.5"/>
            <stop
                    id="stop3464"
                    style="stop-color:#ffffff;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3440">
            <stop
                    id="stop3442"
                    style="stop-color:#4178c8;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3444"
                    style="stop-color:#aa9eff;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3426">
            <stop
                    id="stop3428"
                    style="stop-color:#d3f3fd;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3430"
                    style="stop-color:#66afdf;stop-opacity:1"
                    offset="0.52498668"/>
            <stop
                    id="stop3438"
                    style="stop-color:#3079cd;stop-opacity:1"
                    offset="0.76594102"/>
            <stop
                    id="stop3432"
                    style="stop-color:#88b1f6;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3410">
            <stop
                    id="stop3412"
                    style="stop-color:#ffffff;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3414"
                    style="stop-color:#ffffff;stop-opacity:0"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3400">
            <stop
                    id="stop3402"
                    style="stop-color:#1053c3;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3404"
                    style="stop-color:#95b9f7;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <linearGradient
                id="linearGradient3390">
            <stop
                    id="stop3392"
                    style="stop-color:#d3f3fd;stop-opacity:1"
                    offset="0"/>
            <stop
                    id="stop3398"
                    style="stop-color:#66afdf;stop-opacity:1"
                    offset="0.62582445"/>
            <stop
                    id="stop3394"
                    style="stop-color:#1053c3;stop-opacity:1"
                    offset="1"/>
        </linearGradient>
        <radialGradient
                cx="139.18437"
                cy="213.22121"
                r="59.336514"
                fx="139.18437"
                fy="213.22121"
                id="radialGradient3396"
                xlink:href="#linearGradient3390"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(1.3708224,6.3179392e-3,-7.4167267e-3,1.6092297,-49.215656,-128.77186)"/>
        <linearGradient
                x1="140"
                y1="106.16347"
                x2="140"
                y2="220.9505"
                id="linearGradient3406"
                xlink:href="#linearGradient3400"
                gradientUnits="userSpaceOnUse"/>
        <linearGradient
                x1="135.72974"
                y1="106.95187"
                x2="135.72974"
                y2="224.05219"
                id="linearGradient3416"
                xlink:href="#linearGradient3410"
                gradientUnits="userSpaceOnUse"/>
        <radialGradient
                cx="163.53549"
                cy="407.1412"
                r="90.587906"
                fx="163.53549"
                fy="407.1412"
                id="radialGradient3434"
                xlink:href="#linearGradient3426"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(1.7891923,-1.929906e-2,1.8423451e-2,1.7080151,-150.89269,-287.85434)"/>
        <linearGradient
                x1="-34.232658"
                y1="411.23557"
                x2="-34.232658"
                y2="240.29076"
                id="linearGradient3446"
                xlink:href="#linearGradient3440"
                gradientUnits="userSpaceOnUse"
                gradientTransform="translate(183.43736,0)"/>
        <radialGradient
                cx="206.41617"
                cy="275.02695"
                r="43.856468"
                fx="206.41617"
                fy="275.02695"
                id="radialGradient3456"
                xlink:href="#linearGradient3390"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(1.3004231,3.4077889e-7,-4.1751931e-7,1.593267,-48.288992,-131.94516)"/>
        <linearGradient
                x1="216.85551"
                y1="332.17117"
                x2="216.85551"
                y2="224.71921"
                id="linearGradient3466"
                xlink:href="#linearGradient3460"
                gradientUnits="userSpaceOnUse"
                gradientTransform="translate(13.723082,31.219343)"/>
        <radialGradient
                cx="206.41617"
                cy="275.02695"
                r="43.856468"
                fx="206.41617"
                fy="275.02695"
                id="radialGradient3490"
                xlink:href="#linearGradient3390"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(-1.3004231,3.4077889e-7,4.1751931e-7,1.593267,350.22477,-131.94516)"/>
        <linearGradient
                x1="216.85551"
                y1="332.17117"
                x2="216.85551"
                y2="224.71921"
                id="linearGradient3492"
                xlink:href="#linearGradient3460"
                gradientUnits="userSpaceOnUse"/>
        <radialGradient
                cx="206.41617"
                cy="275.02695"
                r="43.856468"
                fx="206.41617"
                fy="275.02695"
                id="radialGradient3508"
                xlink:href="#linearGradient3584"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(-1.3004231,3.4077889e-7,4.1751931e-7,1.593267,477.13868,-205.82264)"/>
        <radialGradient
                cx="206.41617"
                cy="275.02695"
                r="43.856468"
                fx="206.41617"
                fy="275.02695"
                id="radialGradient3510"
                xlink:href="#linearGradient3592"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(1.3004231,3.4077889e-7,-4.1751931e-7,1.593267,78.624913,-205.82264)"/>
        <radialGradient
                cx="163.53549"
                cy="407.1412"
                r="90.587906"
                fx="163.53549"
                fy="407.1412"
                id="radialGradient3512"
                xlink:href="#linearGradient3568"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(1.7891923,-1.929906e-2,1.8423451e-2,1.7080151,-23.978777,-361.73182)"/>
        <linearGradient
                x1="-34.232658"
                y1="411.23557"
                x2="-34.232658"
                y2="240.29076"
                id="linearGradient3514"
                xlink:href="#linearGradient3578"
                gradientUnits="userSpaceOnUse"
                gradientTransform="translate(310.35127,-73.877484)"/>
        <linearGradient
                x1="216.85551"
                y1="332.17117"
                x2="216.85551"
                y2="224.71921"
                id="linearGradient3516"
                xlink:href="#linearGradient3460"
                gradientUnits="userSpaceOnUse"/>
        <radialGradient
                cx="139.18437"
                cy="213.22121"
                r="59.336514"
                fx="139.18437"
                fy="213.22121"
                id="radialGradient3518"
                xlink:href="#linearGradient3526"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(1.3708224,6.3179392e-3,-7.4167267e-3,1.6092297,-49.215656,-128.77186)"/>
        <linearGradient
                x1="140"
                y1="106.16347"
                x2="140"
                y2="220.9505"
                id="linearGradient3520"
                xlink:href="#linearGradient3540"
                gradientUnits="userSpaceOnUse"/>
        <linearGradient
                x1="135.72974"
                y1="106.95187"
                x2="135.72974"
                y2="224.05219"
                id="linearGradient3522"
                xlink:href="#linearGradient3410"
                gradientUnits="userSpaceOnUse"/>
        <linearGradient
                x1="216.85551"
                y1="332.17117"
                x2="216.85551"
                y2="224.71921"
                id="linearGradient3524"
                xlink:href="#linearGradient3460"
                gradientUnits="userSpaceOnUse"
                gradientTransform="translate(140.63699,-42.658141)"/>
        <linearGradient
                x1="212.95311"
                y1="294.63541"
                x2="212.95311"
                y2="173.11052"
                id="linearGradient3696"
                xlink:href="#linearGradient3690"
                gradientUnits="userSpaceOnUse"/>
        <radialGradient
                cx="569.7113"
                cy="353.6167"
                r="150.77856"
                fx="569.7113"
                fy="353.6167"
                id="radialGradient3704"
                xlink:href="#linearGradient3698"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(1,0,0,0.8752858,-280,27.585916)"/>
        <radialGradient
                cx="541.45734"
                cy="425.29822"
                r="150.3736"
                fx="541.45734"
                fy="425.29822"
                id="radialGradient3712"
                xlink:href="#linearGradient3706"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(1.0018718,-0.8143431,0.5750441,0.7074664,-545.57874,525.75008)"/>
        <radialGradient
                cx="213.54848"
                cy="424.98203"
                r="147.7522"
                fx="213.54848"
                fy="424.98203"
                id="radialGradient3720"
                xlink:href="#linearGradient3714"
                gradientUnits="userSpaceOnUse"
                gradientTransform="matrix(1.1053288,-0.9757676,0.5825287,0.6598763,-270.05707,290.48879)"/>
    </defs>
    <g
            transform="translate(-30.285719,-31.219343)"
            id="layer1"
            style="opacity:1">
        <path
                d="M 243.47917,172.31346 C 182.12455,191.59493 170.86605,234.23167 167.35407,273.32561 C 167.3126,291.51034 180.73739,301.74813 194.80303,280.64533 L 250.06691,182.19509 L 243.47917,172.31346 z"
                id="path3494"
                style="opacity:1;fill:url(#radialGradient3508);fill-opacity:1;fill-rule:evenodd;stroke:#f96700;stroke-width:5;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 312.28443,172.31346 C 373.63905,191.59493 384.89755,234.23167 388.40953,273.32561 C 388.451,291.51034 375.02621,301.74813 360.96057,280.64533 L 305.69669,182.19509 L 312.28443,172.31346 z"
                id="path3496"
                style="opacity:1;fill:url(#radialGradient3510);fill-opacity:1;fill-rule:evenodd;stroke:#f96700;stroke-width:5;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 116.56526,246.19094 C 55.210647,265.47241 43.952147,308.10915 40.440167,347.20309 C 40.398697,365.38782 53.823487,375.62561 67.889127,354.52281 L 123.153,256.07257 L 116.56526,246.19094 z"
                id="path3486"
                style="opacity:1;fill:url(#radialGradient3490);fill-opacity:1;fill-rule:evenodd;stroke:#417bdb;stroke-width:5;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 276.11861,338.91328 C 341.64299,338.91328 366.03863,314.78338 364.10023,283.91328 C 362.88177,264.50867 338.46229,168.91327 276.11861,168.91327 C 213.77493,168.91327 189.35545,264.50867 188.13699,283.91328 C 186.19859,314.78338 210.59423,338.91328 276.11861,338.91328 z"
                id="path3498"
                style="opacity:1;fill:url(#radialGradient3512);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3514);stroke-width:5;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 185.37052,246.19094 C 246.72514,265.47241 257.98364,308.10915 261.49562,347.20309 C 261.53709,365.38782 248.1123,375.62561 234.04666,354.52281 L 178.78278,256.07257 L 185.37052,246.19094 z"
                id="path3448"
                style="opacity:1;fill:url(#radialGradient3456);fill-opacity:1;fill-rule:evenodd;stroke:#417bdb;stroke-width:5;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 189.21477,225.21921 C 207.25069,245.58769 233.68776,279.36936 230.20521,320.37558 C 229.22309,343.37068 245.09682,325.67882 244.47866,316.16674 C 243.07434,278.59489 224.97383,237.74685 189.21477,225.21921 z"
                transform="matrix(-1,0,0,1,415.12661,-42.658141)"
                id="path3500"
                style="opacity:1;fill:url(#linearGradient3516);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 149.2047,412.79076 C 214.72908,412.79076 239.12472,388.66086 237.18632,357.79076 C 235.96786,338.38615 211.54838,242.79075 149.2047,242.79075 C 86.861023,242.79075 62.441543,338.38615 61.223083,357.79076 C 59.284683,388.66086 83.680323,412.79076 149.2047,412.79076 z"
                id="path3222"
                style="opacity:1;fill:url(#radialGradient3434);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3446);stroke-width:5;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 189.21477,225.21921 C 207.25069,245.58769 233.68776,279.36936 230.20521,320.37558 C 229.22309,343.37068 245.09682,325.67882 244.47866,316.16674 C 243.07434,278.59489 224.97383,237.74685 189.21477,225.21921 z"
                transform="matrix(-1,0,0,1,288.2127,31.219343)"
                id="path3488"
                style="opacity:1;fill:url(#linearGradient3492);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 196.78571,165.49998 A 56.785713,56.785713 0 1 1 83.214287,165.49998 A 56.785713,56.785713 0 1 1 196.78571,165.49998 z"
                transform="matrix(1.1761006,0,0,1.1761006,112.76861,-80.731364)"
                id="path3502"
                style="opacity:1;fill:url(#radialGradient3518);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3520);stroke-width:4.25133705;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 196.78571,165.49998 A 56.785713,56.785713 0 1 1 83.214287,165.49998 A 56.785713,56.785713 0 1 1 196.78571,165.49998 z"
                transform="matrix(1.1761006,0,0,1.1761006,-14.145296,-6.85388)"
                id="path2450"
                style="opacity:1;fill:url(#radialGradient3396);fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient3406);stroke-width:4.25133705;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 196.78571,165.49998 A 56.785713,56.785713 0 1 1 83.214287,165.49998 A 56.785713,56.785713 0 1 1 196.78571,165.49998 z"
                transform="matrix(0.907889,0,0,0.6266531,150.31825,-17.56453)"
                id="path3504"
                style="opacity:1;fill:url(#linearGradient3522);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:2.88994074;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 196.78571,165.49998 A 56.785713,56.785713 0 1 1 83.214287,165.49998 A 56.785713,56.785713 0 1 1 196.78571,165.49998 z"
                transform="matrix(0.907889,0,0,0.6266531,23.404344,56.312954)"
                id="path3408"
                style="opacity:1;fill:url(#linearGradient3416);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:2.88994074;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 329.85176,182.56107 C 347.88768,202.92955 374.32475,236.71122 370.8422,277.71744 C 369.86008,300.71254 385.73381,283.02068 385.11565,273.5086 C 383.71133,235.93675 365.61082,195.08871 329.85176,182.56107 z"
                id="path3506"
                style="opacity:1;fill:url(#linearGradient3524);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 202.93785,256.43855 C 220.97377,276.80703 247.41084,310.5887 243.92829,351.59492 C 242.94617,374.59002 258.8199,356.89816 258.20174,347.38608 C 256.79742,309.81423 238.69691,268.96619 202.93785,256.43855 z"
                id="path3458"
                style="opacity:1;fill:url(#linearGradient3466);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 420.60981,235.57735 L 420.60981,255.1576 L 246.86255,412.40962 C 242.15158,417.11669 237.88989,416.58212 233.90999,412.75991 L 124.74451,315.74461 C 118.4748,307.8553 122.46161,298.40098 120.86264,289.3479 L 241.45934,333.34241 L 420.60981,235.57735 z"
                id="path3668"
                style="opacity:1;fill:url(#radialGradient3712);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 240.94175,297.62922 L 362.05604,189.4545 C 365.2775,186.66863 368.80853,184.96626 373.96043,188.93692 L 418.10653,228.48757 C 422.09282,233.32061 421.7692,236.83719 417.95493,240.69516 L 241.03056,402.69845 L 123.45055,296.59406 C 118.92872,291.26004 120.18854,287.57791 122.41539,284.17208 L 167.96264,243.80065 C 170.57098,240.58392 173.76141,239.11345 178.31428,241.73032 L 240.94175,297.62922 z"
                id="path3654"
                style="opacity:1;fill:url(#radialGradient3704);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 143.21873,212.65934 L 210.41564,270.50299 L 337.16053,159.71434 L 386.896,202.65844 L 320.09108,262.6092 C 257.73464,308.07882 141.93676,288.07485 101.82737,248.5349 L 143.21873,212.65934 z"
                transform="translate(30.285719,31.219343)"
                id="path3650"
                style="opacity:1;fill:url(#linearGradient3696);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
        <path
                d="M 92.647249,261.23406 L 210.65603,367.85603 L 387.15163,207.92307"
                transform="translate(30.285719,31.219343)"
                id="path3652"
                style="opacity:1;fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#radialGradient3720);stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"/>
    </g>
</svg>

================
File: public/assets/images/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg"
     version="1.1" width="1000" height="1000">
    <rect width="1000" height="1000" rx="200" ry="200" fill="red"/>
    <g transform="matrix(1.5625,0,0,1.5625,100,100)">
        <svg xmlns="http://www.w3.org/2000/svg"
             version="1.1" width="512" height="512">
            <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                <defs>
                    <style>.cls-1{fill:#fff;}</style>
                </defs>
                <title>icons-collection</title>
                <path class="cls-1"
                      d="M0,512H468l24.57-78.85L463.87,289.79,512,146.43l-13.31-31.74-24.58,23.55,9.22-60.42L449.54,0,342,107.52l-57.35-6.14-80.89,98.3L102.4,278.53l-1,1h0a24.14,24.14,0,0,0-7.17,16.39,21.3,21.3,0,0,0,19.45,21.5l31.75,3.07L93.18,408.58Z"/>
            </svg>
        </svg>
    </g>
</svg>

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: src/components/Form/FormCheckBox.tsx
================
import { Field } from "formik";
import React from "react";
import { Form, InputGroup } from "react-bootstrap";
import ToolTip from "../ToolTip";
import { IFormikFieldProps, IFormProps } from "./interfaces";

/**
 * @author Ankur Mundra on May, 2023
 */

const FormCheckbox: React.FC<IFormProps> = (props) => {
  const { controlId, label, name, disabled, tooltip, tooltipPlacement } = props;

  const displayLabel = tooltip ? (
    <>
      {label}&nbsp;
      <ToolTip id={`${controlId}-tooltip`} info={tooltip} placement={tooltipPlacement} />
    </>
  ) : (
    label
  );

  return (
    <Field name={name}>
      {({ field, form }: IFormikFieldProps) => {
        return (
          <Form.Group controlId={controlId}>
            <InputGroup>
              <Form.Check
                {...field}
                className="mx-md-2"
                type="checkbox"
                disabled={disabled}
                label={displayLabel}
                isInvalid={form.touched[field.name] && form.errors[field.name]}
                feedback={form.errors[field.name]}
              />
              <Form.Control.Feedback type="invalid">
                {form.errors[field.name]}
              </Form.Control.Feedback>
            </InputGroup>
          </Form.Group>
        );
      }}
    </Field>
  );
};

export default FormCheckbox;

================
File: src/components/Form/FormCheckBoxGroup.tsx
================
import { Field } from "formik";
import React from "react";
import { Form, InputGroup } from "react-bootstrap";
import ToolTip from "../ToolTip";
import { IFormikFieldProps, IFormPropsWithOption } from "./interfaces";

/**
 * @author Ankur Mundra on May, 2023
 */

const FormCheckboxGroup: React.FC<IFormPropsWithOption> = (props) => {
  const { as, md, controlId, label, name, options, disabled, tooltip, tooltipPlacement } = props;

  const displayLabel = tooltip ? (
    <>
      {label}&nbsp;
      <ToolTip id={`${controlId}-tooltip`} info={tooltip} placement={tooltipPlacement} />
    </>
  ) : (
    label
  );

  return (
    <Field name={name}>
      {({ field, form }: IFormikFieldProps) => (
        <Form.Group as={as} md={md} controlId={controlId}>
          {label && <Form.Label>{displayLabel}</Form.Label>}
          <InputGroup>
            {options.map((option) => (
              <Form.Check
                {...field}
                key={option.value}
                type="checkbox"
                className="mx-md-2"
                label={option.label}
                value={option.value}
                disabled={disabled}
                checked={field.value.includes(option.value)}
                onChange={(e) => {
                  if (e.target.checked) {
                    form.setFieldValue(name, [...field.value, option.value]);
                  } else {
                    form.setFieldValue(
                      name,
                      field.value.filter((value: string) => value !== option.value)
                    );
                  }
                }}
              />
            ))}
          </InputGroup>
        </Form.Group>
      )}
    </Field>
  );
};

export default FormCheckboxGroup;

================
File: src/components/Form/FormDatePicker.tsx
================
import { Field } from "formik";
import React from "react";
import { Form } from "react-bootstrap";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { IFormikFieldProps } from "./interfaces";

/**
 * @author Ankur Mundra on May, 2023
 */

interface IFormDatePickerProps {
  controlId: string;
  name: string;
}

const FormDatePicker: React.FC<IFormDatePickerProps> = (props) => {
  const { controlId, name } = props;

  return (
    <Field name={name}>
      {({ field, form }: IFormikFieldProps) => {
        const isValid = !form.errors[field.name];
        const isInvalid = form.touched[field.name] && !isValid;
        return (
          <Form.Group controlId={controlId}>
            <DatePicker
              required
              showTimeSelect
              timeIntervals={60}
              minDate={new Date()}
              selected={field.value || null}
              dateFormat="MMMM d, yyyy h:mm aa"
              placeholderText="Select a Due Date"
              onChange={(val) => form.setFieldValue(field.name, val)}
              className={`form-control ${isInvalid ? "is-invalid" : ""}`}
            />
            <Form.Control.Feedback type="invalid">{form.errors[field.name]}</Form.Control.Feedback>
          </Form.Group>
        );
      }}
    </Field>
  );
};

export default FormDatePicker;

================
File: src/components/Form/FormInput.tsx
================
import { Field } from "formik";
import React from "react";
import { Form, InputGroup } from "react-bootstrap";
import ToolTip from "../ToolTip";
import { IFormikFieldProps, IFormProps } from "./interfaces";

/**
 * @author Ankur Mundra on May, 2023
 */

const FormInput: React.FC<IFormProps> = (props) => {
  const {
    name,
    label,
    type,
    controlId,
    tooltip,
    as,
    md,
    disabled,
    inputGroupPrepend,
    inputGroupAppend,
    tooltipPlacement,
  } = props;

  const displayLabel = tooltip ? (
    <>
      {label}&nbsp;
      <ToolTip id={`${controlId}-tooltip`} info={tooltip} placement={tooltipPlacement} />
    </>
  ) : (
    label
  );

  return (
    <Field name={name}>
      {({ field, form }: IFormikFieldProps) => {
        const isValid = !form.errors[field.name];
        const isInvalid = form.touched[field.name] && !isValid;
        return (
          <Form.Group as={as} md={md} controlId={controlId} className="mb-md-2">
            {label && <Form.Label>{displayLabel}</Form.Label>}
            <InputGroup>
              {inputGroupPrepend}
              <Form.Control
                {...field}
                type={type}
                disabled={disabled}
                isInvalid={isInvalid}
                feedback={form.errors[field.name]}
              />
              {inputGroupAppend}
              <Form.Control.Feedback type="invalid">
                {form.errors[field.name]}
              </Form.Control.Feedback>
            </InputGroup>
          </Form.Group>
        );
      }}
    </Field>
  );
};

export default FormInput;

================
File: src/components/Form/FormRadioGroup.tsx
================
import { Field } from "formik";
import React from "react";
import { Form, InputGroup } from "react-bootstrap";
import ToolTip from "../ToolTip";
import { IFormikFieldProps, IFormPropsWithOption } from "./interfaces";

/**
 * @author Ankur Mundra on May, 2023
 */

const FormRadioGroup: React.FC<IFormPropsWithOption> = (props) => {
  const { as, md, controlId, label, name, options, disabled, tooltip, tooltipPlacement } = props;

  const displayLabel = tooltip ? (
    <>
      {label}&nbsp;
      <ToolTip id={`${controlId}-tooltip`} info={tooltip} placement={tooltipPlacement} />
    </>
  ) : (
    label
  );

  return (
    <Field name={name}>
      {({ field, form }: IFormikFieldProps) => (
        <Form.Group as={as} md={md} controlId={controlId} className="mb-md-2">
          {label && <Form.Label>{displayLabel}</Form.Label>}
          <InputGroup>
            {options.map((option) => (
              <Form.Check
                {...field}
                key={option.value}
                type="radio"
                disabled={disabled}
                label={option.label}
                value={option.value}
                checked={field.value === option.value}
                onChange={() => form.setFieldValue(name, option.value)}
              />
            ))}
          </InputGroup>
        </Form.Group>
      )}
    </Field>
  );
};

export default FormRadioGroup;

================
File: src/components/Form/FormRange.tsx
================
import { Field } from "formik";
import React from "react";
import { Form, InputGroup } from "react-bootstrap";
import ToolTip from "../ToolTip";
import { IFormikFieldProps, IFormProps } from "./interfaces";

/**
 * @author Ankur Mundra on May, 2023
 */

interface IFormRangeProps extends IFormProps {
  min?: number;
  max?: number;
  step?: number;
}

const FormRange: React.FC<IFormRangeProps> = (props) => {
  const { controlId, label, name, min, max, step, as, md, disabled, tooltip, tooltipPlacement } =
    props;

  const displayLabel = tooltip ? (
    <>
      {label}&nbsp;
      <ToolTip id={`${controlId}-tooltip`} info={tooltip} placement={tooltipPlacement} />
    </>
  ) : (
    label
  );

  return (
    <Field name={name}>
      {({ field, form }: IFormikFieldProps) => (
        <Form.Group as={as} md={md} controlId={controlId} className="mb-md-2">
          {label && (
            <Form.Label>
              {displayLabel}: {field.value}{" "}
            </Form.Label>
          )}
          <InputGroup>
            <Form.Control
              {...field}
              type="range"
              min={min}
              max={max}
              step={step}
              disabled={disabled}
              isInvalid={form.touched[field.name] && form.errors[field.name]}
            />
            <Form.Control.Feedback type="invalid">{form.errors[field.name]}</Form.Control.Feedback>
          </InputGroup>
        </Form.Group>
      )}
    </Field>
  );
};

FormRange.defaultProps = {
  min: 0,
  max: 100,
  step: 1,
};

export default FormRange;

================
File: src/components/Form/FormSelect.tsx
================
import { Field } from "formik";
import React from "react";
import { Form, InputGroup } from "react-bootstrap";
import ToolTip from "../ToolTip";
import { IFormikFieldProps, IFormPropsWithOption } from "./interfaces";

/**
 * @author Ankur Mundra on May, 2023
 */

const FormSelect: React.FC<IFormPropsWithOption> = (props) => {
  const {
    as,
    md,
    name,
    label,
    type,
    controlId,
    options,
    tooltip,
    tooltipPlacement,
    disabled,
    inputGroupPrepend,
  } = props;

  const displayLabel = tooltip ? (
    <>
      {label}&nbsp;
      <ToolTip id={`${controlId}-tooltip`} info={tooltip} placement={tooltipPlacement} />
    </>
  ) : (
    label
  );

  return (
    <Field name={name}>
      {({ field, form }: IFormikFieldProps) => {
        const isValid = !form.errors[field.name];
        const isInvalid = form.touched[field.name] && !isValid;
        return (
          <Form.Group as={as} md={md} controlId={controlId} className="mb-md-2">
            {label && <Form.Label>{displayLabel}</Form.Label>}
            <InputGroup>
              {inputGroupPrepend}
              <Form.Select
                {...field}
                type={type}
                disabled={disabled}
                isInvalid={isInvalid}
                feedback={form.errors[field.name]}
              >
                {options.map((option) => {
                  return (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  );
                })}
              </Form.Select>
              <Form.Control.Feedback type="invalid">
                {form.errors[field.name]}
              </Form.Control.Feedback>
            </InputGroup>
          </Form.Group>
        );
      }}
    </Field>
  );
};

FormSelect.defaultProps = {
  type: "select",
  inputGroupPrepend: null,
};

export default FormSelect;

================
File: src/components/Form/interfaces.ts
================
import { ElementType, ReactNode } from "react";

/**
 * @author Ankur Mundra on May, 2023
 */
export interface IFormProps {
  name: string;
  label?: string;
  type?: string;
  controlId: string;
  placeholder?: string;
  as?: ElementType;
  md?: number | string;
  disabled?: boolean;
  tooltip?: string;
  tooltipPlacement?: "top" | "right" | "bottom" | "left";
  inputGroupPrepend?: ReactNode;
  inputGroupAppend?: ReactNode;
}

export interface IFormOption {
  label: string;
  value: string | number;
}

export interface IFormPropsWithOption extends IFormProps {
  options: IFormOption[];
}

export interface IFormikFieldProps {
  field: any;
  form: any;
}

================
File: src/components/Table/ColumnFilter.tsx
================
import { Column } from "@tanstack/react-table";
import React, { useCallback } from "react";
import DebouncedInput from "./DebouncedInput";

/**
 * @author Ankur Mundra on May, 2023
 */

interface FilterProps {
  column: Column<any>;
}

const ColumnFilter: React.FC<FilterProps> = ({ column }) => {
  const [filterValue, setFilterValue] = [column.getFilterValue, column.setFilterValue];
  const searchHandler = useCallback(
    (value: string | number) => setFilterValue(value),
    [setFilterValue]
  );

  return (
    <DebouncedInput
      className="w-75"
      onChange={searchHandler}
      value={filterValue() ?? ""}
      placeholder="Search"
    />
  );
};

export default ColumnFilter;

================
File: src/components/Table/DebouncedInput.tsx
================
import React, { useEffect, useState } from "react";
import Input from "../Input";

/**
 * @author Ankur Mundra on May, 2023
 */

interface InputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, "onChange"> {
  debounce?: number;
  value: any;
  className?: string;
  label?: string;
  onChange: (value: any) => void;
}

const DebouncedInput: React.FC<InputProps> = ({
  onChange,
  debounce = 500,
  value: initialValue,
  className = "",
  label = "",
  ...otherProps
}) => {
  const [value, setValue] = useState<string | number>(initialValue);
  useEffect(() => setValue(initialValue), [initialValue]);
  useEffect(() => {
    const timeout = setTimeout(() => onChange(value), debounce);
    return () => clearTimeout(timeout);
  }, [debounce, onChange, value]);

  return (
    <Input
      id={`table_filter_${Math.round(Math.random())}`}
      className={className}
      label={label}
      input={{
        ...otherProps,
        value: value,
        onChange: (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value),
      }}
    />
  );
};

export default DebouncedInput;

================
File: src/components/Table/GlobalFilter.tsx
================
import React, { useCallback } from "react";
import DebouncedInput from "./DebouncedInput";

/**
 * @author Ankur Mundra on May, 2023
 */

interface FilterProps {
  filterValue: string | number;
  setFilterValue: (value: string | number) => void;
}

const GlobalFilter: React.FC<FilterProps> = ({ filterValue, setFilterValue }) => {
  const searchHandler = useCallback(
    (value: string | number) => setFilterValue(value),
    [setFilterValue]
  );

  return (
    <DebouncedInput
      onChange={searchHandler}
      value={filterValue ?? ""}
      className="w-75"
      label="Search"
      placeholder="Search all columns"
    />
  );
};

export default GlobalFilter;

================
File: src/components/Table/Pagination.tsx
================
import { TableState } from "@tanstack/react-table";
import React from "react";
import { Col, Pagination as BPagination, Row } from "react-bootstrap";
import Input from "../Input";
import Select from "../Select";

/**
 * @author Ankur Mundra on May, 2023
 */

interface PaginationProps {
  nextPage: () => void;
  previousPage: () => void;
  canNextPage: () => boolean;
  canPreviousPage: () => boolean;
  setPageIndex: (pageIndex: number) => void;
  setPageSize: (pageSize: number) => void;
  getPageCount: () => number;
  getState: () => TableState;
}

const Pagination: React.FC<PaginationProps> = (props) => {
  const {
    nextPage,
    previousPage,
    canNextPage,
    canPreviousPage,
    setPageIndex,
    setPageSize,
    getPageCount,
    getState,
  } = props;
  return (
    <Row className="justify-content-center">
      <Col xs="auto">
        <BPagination>
          <BPagination.First onClick={() => setPageIndex(0)} disabled={!canPreviousPage()} />
          <BPagination.Prev onClick={() => previousPage()} disabled={!canPreviousPage()} />
          <BPagination.Next onClick={() => nextPage()} disabled={!canNextPage()} />
          <BPagination.Last
            onClick={() => setPageIndex(getPageCount() - 1)}
            disabled={!canNextPage()}
          />
        </BPagination>
      </Col>
      {/*<Col xs="auto">*/}
      {/*  {`Page ${getState().pagination.pageIndex + 1} of ${getPageCount()}`}*/}
      {/*</Col>*/}
      <Col xs="auto">
        <Input
          id="columnFilter"
          label="Go to page"
          input={{
            type: "number",
            min: "1",
            max: getPageCount(),
            defaultValue: getState().pagination.pageIndex + 1,
            onChange: (e: React.ChangeEvent<HTMLInputElement>) => {
              const page = e.target.value ? Number(e.target.value) - 1 : 0;
              setPageIndex(page);
            },
          }}
        />
      </Col>
      <Col xs="auto">
        <Select
          id="pageSize"
          options={[
            { label: "Show 10", value: "10" },
            { label: "Show 25", value: "25" },
            { label: "Show 50", value: "50" },
          ]}
          input={{
            value: getState().pagination.pageSize,
            onChange: (e: React.ChangeEvent<HTMLSelectElement>) =>
              setPageSize(Number(e.target.value)),
          }}
        />
      </Col>
    </Row>
  );
};

export default Pagination;

================
File: src/components/Table/RowSelectCheckBox.tsx
================
import React, { HTMLProps, useEffect, useRef } from "react";

/**
 * @author Ankur Mundra on May, 2023
 */

interface CheckboxProps extends HTMLProps<HTMLInputElement> {
  indeterminate?: boolean;
}

const RowSelectCheckBox: React.FC<CheckboxProps> = ({ indeterminate, ...otherProps }) => {
  // null! is a hack to avoid having to make a conditional check within useEffect().
  const ref = useRef<HTMLInputElement>(null!);

  useEffect(() => {
    if (typeof indeterminate === "boolean") {
      ref.current.indeterminate = !otherProps.checked && indeterminate;
    }
  }, [ref, indeterminate, otherProps.checked]);

  return <input ref={ref} type="checkbox" {...otherProps} />;
};

export default RowSelectCheckBox;

================
File: src/components/Table/Table.tsx
================
import {
  ColumnDef,
  ColumnFiltersState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  SortingState,
  useReactTable,
} from "@tanstack/react-table";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { Col, Container, Row, Table as BTable } from "react-bootstrap";
import ColumnFilter from "./ColumnFilter";
import GlobalFilter from "./GlobalFilter";
import Pagination from "./Pagination";
import RowSelectCheckBox from "./RowSelectCheckBox";
import { FaSearch } from "react-icons/fa";

/**
 * @author Ankur Mundra on May, 2023
 */

interface TableProps {
  data: Record<string, any>[];
  columns: ColumnDef<any, any>[];
  showGlobalFilter?: boolean;
  showColumnFilter?: boolean;
  showPagination?: boolean;
  tableSize?: { span: number; offset: number };
  columnVisibility?: Record<string, boolean>;
  onSelectionChange?: (selectedData: Record<any, any>[]) => void;
}

const Table: React.FC<TableProps> = ({
  data: initialData,
  columns,
  showGlobalFilter = false,
  showColumnFilter = true,
  showPagination = true,
  onSelectionChange,
  columnVisibility = {},
  tableSize = { span: 12, offset: 0 },
}) => {
  const colsPlusSelectable = useMemo(() => {
    const selectableColumn: any = {
      id: "select",
      header: ({ table }: any) => {
        return (
          <RowSelectCheckBox
            {...{
              checked: table.getIsAllRowsSelected(),
              indeterminate: table.getIsSomeRowsSelected(),
              onChange: table.getToggleAllRowsSelectedHandler(),
            }}
          />
        );
      },
      cell: ({ row }: any) => {
        return (
          <RowSelectCheckBox
            {...{
              checked: row.getIsSelected(),
              disabled: !row.getCanSelect(),
              indeterminate: row.getIsSomeSelected(),
              onChange: row.getToggleSelectedHandler(),
            }}
          />
        );
      },
      enableSorting: false,
      enableFilter: false,
    };
    return [selectableColumn, ...columns];
  }, [columns]);

  const [rowSelection, setRowSelection] = useState({});
  const [sorting, setSorting] = useState<SortingState>([]);
  const [globalFilter, setGlobalFilter] = useState<string | number>("");
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);
  const [columnVisibilityState, setColumnVisibilityState] = useState(columnVisibility);
  const [isGlobalFilterVisible, setIsGlobalFilterVisible] = useState(showGlobalFilter); // State for global filter visibility

  const selectable = typeof onSelectionChange === "function";
  const onSelectionChangeRef = useRef<any>(onSelectionChange);

  const table = useReactTable({
    data: initialData,
    columns: selectable ? colsPlusSelectable : columns,
    state: {
      sorting,
      globalFilter,
      columnFilters,
      rowSelection,
      columnVisibility: columnVisibilityState,
    },
    onSortingChange: setSorting,
    onRowSelectionChange: setRowSelection,
    onGlobalFilterChange: setGlobalFilter,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: setColumnVisibilityState,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  });

  const {
    getState,
    getHeaderGroups,
    getRowModel,
    getCanNextPage,
    getCanPreviousPage,
    previousPage,
    nextPage,
    setPageIndex,
    setPageSize,
    getPageCount,
  } = table;

  // Used to return early from useEffect() on mount.
  const firstRenderRef = useRef(true);
  // This useEffect() watches flatRows such that on change it
  // calls the onSelectionChange() prop. Technically, it calls
  // the onSelectionChangeRef.current function if it exists.

  const flatRows = table.getSelectedRowModel().flatRows;

  useEffect(() => {
    if (firstRenderRef.current) {
      firstRenderRef.current = false;
      return;
    }

    if (typeof onSelectionChangeRef.current !== "function") {
      return;
    }
    const selectedData = flatRows.map((flatRow) => flatRow.original);
    const handleSelectionChange = onSelectionChangeRef.current;
    handleSelectionChange?.(selectedData);
  }, [flatRows]);

  const toggleGlobalFilter = () => {
    setIsGlobalFilterVisible(!isGlobalFilterVisible);
  };

  return (
    <>
      <Container>
        <Row className="mb-md-2">
          <Col md={{ span: 12 }}>
            {isGlobalFilterVisible && (
              <GlobalFilter filterValue={globalFilter} setFilterValue={setGlobalFilter} />
            )}
          </Col>
          <span style={{ marginLeft: "5px" }} onClick={toggleGlobalFilter}>
            <FaSearch style={{ cursor: "pointer" }} />
            {isGlobalFilterVisible ? " Hide" : " Show"}
          </span>{" "}
        </Row>
      </Container>
      <Container>
        <Row>
          <Col md={tableSize}>
            <BTable striped hover responsive size="sm">
              <thead className="table-secondary">
                {getHeaderGroups().map((headerGroup) => (
                  <tr key={headerGroup.id}>
                    {headerGroup.headers.map((header) => {
                      return (
                        <th key={header.id} colSpan={header.colSpan}>
                          {header.isPlaceholder ? null : (
                            <>
                              <div
                                {...{
                                  className: header.column.getCanSort()
                                    ? "cursor-pointer select-none"
                                    : "",
                                  onClick: header.column.getToggleSortingHandler(),
                                }}
                              >
                                {flexRender(header.column.columnDef.header, header.getContext())}
                                {{
                                  asc: " 🔼",
                                  desc: " 🔽",
                                }[header.column.getIsSorted() as string] ?? null}
                              </div>
                              {showColumnFilter && header.column.getCanFilter() ? (
                                <ColumnFilter column={header.column} />
                              ) : null}
                            </>
                          )}
                        </th>
                      );
                    })}
                  </tr>
                ))}
              </thead>
              <tbody>
                {getRowModel().rows.map((row) => {
                  return (
                    <tr key={row.id}>
                      {row.getVisibleCells().map((cell) => {
                        return (
                          <td key={cell.id}>
                            {flexRender(cell.column.columnDef.cell, cell.getContext())}
                          </td>
                        );
                      })}
                    </tr>
                  );
                })}
              </tbody>
            </BTable>
            {showPagination && (
              <Pagination
                nextPage={nextPage}
                previousPage={previousPage}
                canNextPage={getCanNextPage}
                canPreviousPage={getCanPreviousPage}
                setPageIndex={setPageIndex}
                setPageSize={setPageSize}
                getPageCount={getPageCount}
                getState={getState}
              />
            )}
          </Col>
        </Row>
      </Container>
    </>
  );
};

export default Table;

================
File: src/components/Alert.tsx
================
import React from "react";
import Alert from "react-bootstrap/Alert";
import { useDispatch } from "react-redux";
import { alertActions } from "store/slices/alertSlice";

/**
 * @author Ankur Mundra on May, 2023
 */

interface IAlertProps {
  variant: string;
  title?: string;
  message: string;
}

const AlertMessage: React.FC<IAlertProps> = (props) => {
  const dispatch = useDispatch();
  const hideAlertHandler = () => dispatch(alertActions.hideAlert());

  return (
    <Alert variant={props.variant} onClose={hideAlertHandler} dismissible>
      {props.title && <Alert.Heading>{props.title}</Alert.Heading>}
      <p>{props.message}</p>
    </Alert>
  );
};

export default AlertMessage;

================
File: src/components/Input.tsx
================
import React from "react";
import { FormControl, InputGroup } from "react-bootstrap";
import ToolTip from "./ToolTip";

/**
 * @author Ankur Mundra on May, 2023
 */

interface InputProps {
  id: string;
  label?: string;
  tooltip?: string;
  input?: any;
  className?: string;
}

const Input: React.ForwardRefExoticComponent<InputProps> = React.forwardRef((props, ref) => {
  const displayLabel = props.tooltip ? (
    <>
      {props.label + " "}
      <ToolTip id={`${props.id}-tooltip`} info={props.tooltip} />
    </>
  ) : (
    props.label
  );

  return (
    <InputGroup className={props.className}>
      <InputGroup.Text id={props.id}>{displayLabel}</InputGroup.Text>
      <FormControl aria-label={props.label} ref={ref} {...props.input} />
    </InputGroup>
  );
});

export default Input;

================
File: src/components/Select.tsx
================
import React from "react";
import { Form, InputGroup } from "react-bootstrap";
import ToolTip from "./ToolTip";

/**
 * @author Ankur Mundra on May, 2023
 */

interface SelectProps {
  id: string;
  label?: string;
  tooltip?: string;
  input: any;
  options: { value: string; label: string }[];
  className?: string;
}

const Select: React.ForwardRefExoticComponent<SelectProps> = React.forwardRef((props, ref) => {
  const { className, id, label, input, options, tooltip } = props;

  const displayLabel = tooltip ? (
    <>
      {label + " "}
      <ToolTip id={`${id}-tooltip`} info={tooltip} />
    </>
  ) : (
    label
  );

  return (
    <InputGroup className={className}>
      <InputGroup.Text id={id}>{displayLabel}</InputGroup.Text>
      <Form.Select aria-label={label} ref={ref} {...input}>
        {options.map((option, index) => (
          <option key={index} value={option.value}>
            {option.label}
          </option>
        ))}
      </Form.Select>
    </InputGroup>
  );
});

export default Select;

================
File: src/components/ToolTip.tsx
================
import React from "react";
import {OverlayTrigger, Tooltip} from "react-bootstrap";
import {FcInfo} from "react-icons/fc";

/**
 * @author Ankur Mundra on May, 2023
 */

interface ToolTipProps {
  id: string;
  info: string;
  placement?: "top" | "right" | "bottom" | "left";
}

const ToolTip: React.FC<ToolTipProps> = (props) => {
  const tooltip = <Tooltip id={`tooltip-${props.id}`}>{props.info}</Tooltip>;

  return (
    <OverlayTrigger
      placement={props.placement || "right"}
      delay={{ show: 150, hide: 300 }}
      overlay={tooltip}
    >
      <span>
        <FcInfo />
      </span>
    </OverlayTrigger>
  );
};

export default ToolTip;

================
File: src/hooks/useAPI.ts
================
import axios, { AxiosRequestConfig, AxiosResponse } from "axios";
import { useCallback, useState } from "react";
import { getAuthToken } from "../utils/auth";

/**
 * @author Ankur Mundra on April, 2023
 */

axios.defaults.baseURL = "http://localhost:3002/api/v1";
axios.defaults.headers.common["Accept"] = "application/json";
axios.defaults.headers.post["Content-Type"] = "application/json";
axios.defaults.headers.put["Content-Type"] = "application/json";
axios.defaults.headers.patch["Content-Type"] = "application/json";

const useAPI = () => {
  const [data, setData] = useState<AxiosResponse>();
  const [error, setError] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(true);

  // Learn about Axios Request Config at https://github.com/axios/axios#request-config
  const sendRequest = useCallback((requestConfig: AxiosRequestConfig) => {
    const token = getAuthToken();
    if (token) {
      requestConfig.headers = {
        ...requestConfig.headers,
        Authorization: `Bearer ${token}`,
      };
    }

    setIsLoading(true);
    setError("");
    let errorMessage = "";

    axios(requestConfig)
      .then((response) => setData(response))
      .catch((err) => {
        if (err.response) {
          const errors = err.response.data;
          const messages = Object.entries(errors).flatMap(([field, messages]) => {
            if (Array.isArray(messages)) return messages.map((m) => `${field} ${m}`);
            return `${field} ${messages}`;
          });
          errorMessage = messages.join(", ");
        } else if (err.request) {
          console.log("The request was made but no response was received", err);
          errorMessage = err.request.message || err.message || "Something went wrong!";
        } else {
          // Something happened in setting up the request that triggered an Error
          console.log("Error", err.message);
          errorMessage = err.message || "Something went wrong!";
        }

        if (errorMessage) setError(errorMessage);
      });
    setIsLoading(false);
  }, []);

  return { data, setData, isLoading, error, sendRequest };
};

export default useAPI;

================
File: src/layout/Administrator.tsx
================
import { Outlet } from "react-router-dom";
import React from "react";

/**
 * @author Ankur Mundra on June, 2023
 */

const AdministratorLayout: React.FC = () => {
  return <Outlet />;
};

export default AdministratorLayout;

================
File: src/layout/Header.tsx
================
import React, { Fragment, useState, useEffect } from "react";
import { Button, Container, Nav, Navbar, NavDropdown } from "react-bootstrap";
import { useSelector } from "react-redux";
import { Link, useNavigate } from "react-router-dom";
import { RootState } from "../store/store";
import { ROLE } from "../utils/interfaces";
import { hasAllPrivilegesOf } from "../utils/util";
import detective from "../assets/detective.png";

/**
 * @author Ankur Mundra on May, 2023
 */

const Header: React.FC = () => {
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const navigate = useNavigate();

  const [visible, setVisible] = useState(true);

  const CustomBtn = () => {
    return (
      <div
        style={{
          backgroundColor: "#fff",
          color: "#333",
          padding: "10px 4px",
          borderRadius: 4,
          marginRight: 8,
        }}
      >
        <div
          style={{
            display: "flex",
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <img src={detective} width={25} style={{ marginRight: 4 }} />
          <div>Anonymized View</div>
          <button
            style={{
              background: "none",
              border: "none",
              padding: 1,
              marginLeft: 6,
              backgroundColor: "red",
              borderRadius: 50,
              color: "white",
              width: 18,
              fontSize: 10,
              fontWeight: 800,
            }}
            onClick={() => setVisible(!visible)}
          >
            x
          </button>
        </div>
      </div>
    );
  };

  // useEffect(() => {
  //   console.log(visible, 'Changed');
  // }, [visible]);

  return (
    <Fragment>
      <Navbar
        collapseOnSelect
        bg="wolf-red navbar-dark"
        variant="dark"
        expand="lg"
        sticky="top"
        className="px-4 fw-semibold"
      >
        <Navbar.Brand>
          <img
            src={`${process.env.PUBLIC_URL}/assets/images/wolf.png`}
            className="d-inline-block align-top"
            alt="wolf"
            height="40"
          />
        </Navbar.Brand>

        {auth.isAuthenticated && (
          <Container>
            <Navbar.Toggle aria-controls="navbarScroll" />
            <Navbar.Collapse id="basic-navbar-nav">
              <Nav className="me-auto">
                <Nav.Link as={Link} to="/">
                  Home
                </Nav.Link>
                {hasAllPrivilegesOf(auth.user.role, ROLE.ADMIN) && (
                  <NavDropdown title="Administration" id="basic-nav-dropdown">
                    <NavDropdown.Item as={Link} to="administrator/roles">
                      Roles
                    </NavDropdown.Item>
                    <NavDropdown.Divider />
                    <NavDropdown.Item as={Link} to="administrator/institutions">
                      Institutions
                    </NavDropdown.Item>
                    <NavDropdown.Item as={Link} to="administrator/instructors">
                      Instructors
                    </NavDropdown.Item>
                    <NavDropdown.Item as={Link} to="administrator/administrators">
                      Administrators
                    </NavDropdown.Item>
                    <NavDropdown.Item as={Link} to="administrator/super_administrators">
                      Super Administrators
                    </NavDropdown.Item>
                    <NavDropdown.Item as={Link} to="administrator/account_request">
                      Pending Requests
                    </NavDropdown.Item>
                  </NavDropdown>
                )}
                {hasAllPrivilegesOf(auth.user.role, ROLE.TA) && (
                  <NavDropdown title="Manage" id="basic-nav-dropdown">
                    <NavDropdown.Item as={Link} to="/users">
                      Users
                    </NavDropdown.Item>
                    <NavDropdown.Item as={Link} to="/courses">
                      Courses
                    </NavDropdown.Item>
                    <NavDropdown.Item as={Link} to="/assignments">
                      Assignments
                    </NavDropdown.Item>
                    <NavDropdown.Item as={Link} to="/questionnaire">
                      Questionnaire
                    </NavDropdown.Item>
                    <NavDropdown.Item as={Link} to="/edit-questionnaire">
                      Edit Questionnaire
                    </NavDropdown.Item>
                    <NavDropdown.Divider />
                    <NavDropdown.Item as={Link} to="/impersonate">
                      Impersonate User
                    </NavDropdown.Item>
                    <NavDropdown.Item as={Link} to="#">
                      Anonymized View
                    </NavDropdown.Item>
                  </NavDropdown>
                )}
                <Nav.Link as={Link} to="/student_tasks">
                  Assignments
                </Nav.Link>
                <Nav.Link as={Link} to="/profile">
                  Profile
                </Nav.Link>
                <Nav.Link as={Link} to="/student_view">
                  Student View
                </Nav.Link>
                <Nav.Link as={Link} to="/view-team-grades">
                  Grades View
                </Nav.Link>
                <Nav.Link as={Link} to="#" onClick={() => setVisible(!visible)}>
                  Anonymized View
                </Nav.Link>
              </Nav>
              {visible ? (
                <Nav.Item className="text-light ps-md-3 pe-md-3">
                  User: {auth.user.full_name}
                </Nav.Item>
              ) : (
                <Nav.Item className="text-light ps-md-3 pe-md-3">
                  <div
                    style={{
                      display: "flex",
                      flexDirection: "row",
                      justifyContent: "center",
                      alignItems: "center",
                    }}
                  >
                    <CustomBtn /> User: Student 10592
                  </div>
                </Nav.Item>
              )}
              <Button variant="outline-light" onClick={() => navigate("/logout")}>
                Logout
              </Button>
            </Navbar.Collapse>
          </Container>
        )}
      </Navbar>
    </Fragment>
  );
};

export default Header;

================
File: src/layout/Root.tsx
================
import AlertMessage from "components/Alert";
import { FC, Fragment, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Outlet, useNavigate } from "react-router-dom";
import { alertActions } from "store/slices/alertSlice";
import { RootState } from "store/store";
import Header from "./Header";
import { getTokenDuration } from "../utils/auth";

/**
 * @author Ankur Mundra on May, 2023
 */
const RootLayout: FC = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const alert = useSelector(
    (state: RootState) => state.alert,
    (prev, next) => prev.show === next.show
  );
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );

  useEffect(() => {
    if (auth.isAuthenticated) {
      const tokenDuration = getTokenDuration();
      const timer = setTimeout(() => navigate("/logout"), tokenDuration);
      return () => clearTimeout(timer);
    }
  }, [auth.isAuthenticated, navigate]);

  useEffect(() => {
    if (alert.show) {
      const timer = setTimeout(() => dispatch(alertActions.hideAlert()), 5000);
      return () => clearTimeout(timer);
    }
  }, [alert.show, dispatch]);

  return (
    <Fragment>
      <Header />
      {alert.show && (
        <AlertMessage variant={alert.variant} message={alert.message} title={alert.title} />
      )}
      <main>
        <Outlet />
      </main>
    </Fragment>
  );
};

export default RootLayout;

================
File: src/pages/Administrator/ManageUserTypes.tsx
================
/**
 * @author Ankur Mundra on June, 2023
 */
import { useLoaderData, useNavigate, useParams } from "react-router-dom";
import React, { useCallback, useMemo, useState } from "react";
import { IUserResponse } from "../../utils/interfaces";
import { Row as TRow } from "@tanstack/table-core/build/lib/types";
import { userColumns as USER_COLUMNS } from "../Users/userColumns";
import { Col, Container, Row } from "react-bootstrap";
import DeleteUser from "../Users/UserDelete";
import Table from "../../components/Table/Table";
import axiosClient from "../../utils/axios_client";

const ManageUserTypes: React.FC = () => {
  const navigate = useNavigate();
  const { user_type } = useParams();
  const data: any = useLoaderData();

  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState<{
    visible: boolean;
    data?: IUserResponse;
  }>({ visible: false });

  const onDeleteUserHandler = useCallback(() => setShowDeleteConfirmation({ visible: false }), []);

  const onEditHandle = useCallback(
    (row: TRow<IUserResponse>) => navigate(`/users/edit/${row.original.id}`),
    [navigate]
  );

  const onDeleteHandle = useCallback(
    (row: TRow<IUserResponse>) => setShowDeleteConfirmation({ visible: true, data: row.original }),
    []
  );

  const tableColumns = useMemo(
    () => USER_COLUMNS(onEditHandle, onDeleteHandle),
    [onDeleteHandle, onEditHandle]
  );

  return (
    <Container fluid className="px-md-4">
      <Row className="mt-md-2 mb-md-2">
        <Col className="text-center">
          <h1>Manage {user_type!.valueOf()}</h1>
        </Col>
        <hr />
      </Row>
      <Row>
        {showDeleteConfirmation.visible && (
          <DeleteUser userData={showDeleteConfirmation.data!} onClose={onDeleteUserHandler} />
        )}
      </Row>
      <Row>
        <Table
          data={data}
          columns={tableColumns}
          columnVisibility={{
            id: false,
            role: false,
            parent: false,
            email_preferences: false,
            email_on_review: false,
            email_on_submission: false,
            email_on_review_of_review: false,
          }}
        />
      </Row>
    </Container>
  );
};

// add loader function to load role specific users

export async function loader({ request }: { request: Request }) {
  let role_name = request.url.split("/").pop()!;
  let role = ["administrators", "instructors", "super_administrators"].find(
    (role) => role === role_name
  );
  if (role) {
    role = role.substring(0, role.length - 1);
    const response = await axiosClient.get(`/users/role/${role}`);
    return response.data;
  }
  throw new Error("404 not found! No such route exists");
}

export default ManageUserTypes;

================
File: src/pages/Assignments/Assignment.tsx
================
import { Button, Col, Container, Row } from "react-bootstrap";
import { Outlet, useLocation, useNavigate } from "react-router-dom";
import { useCallback, useEffect, useMemo, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { assignmentColumns as ASSIGNMENT_COLUMNS } from "./AssignmentColumns";
import { BsFileText } from "react-icons/bs";
import DeleteAssignment from "./AssignmentDelete";
import { IAssignmentResponse } from "../../utils/interfaces";
import { RootState } from "../../store/store";
import { Row as TRow } from "@tanstack/react-table";
import Table from "components/Table/Table";
import { alertActions } from "store/slices/alertSlice";
import useAPI from "hooks/useAPI";


const Assignments = () => {
  const { error, isLoading, data: assignmentResponse, sendRequest: fetchAssignments } = useAPI();
  const { data: coursesResponse, sendRequest: fetchCourses } = useAPI();


  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();

  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState<{
    visible: boolean;
    data?: IAssignmentResponse;
  }>({ visible: false });


  const fetchData = useCallback(async () => {
    try {
      const [assignments, courses] = await Promise.all([
        fetchAssignments({ url: `/assignments` }),
        fetchCourses({ url: '/courses' }),
      ]);
      // Handle the responses as needed
    } catch (err) {
      // Handle any errors that occur during the fetch
      console.error("Error fetching data:", err);
    }
  }, [fetchAssignments, fetchCourses]);

  useEffect(() => {
    if (!showDeleteConfirmation.visible) {
      fetchData();
    }
  }, [fetchData, showDeleteConfirmation.visible, auth.user.id]);

  let mergedData: Array<any & { courseName?: string }> = [];

  if (assignmentResponse && coursesResponse) {
    mergedData = assignmentResponse.data.map((assignment: any) => {
      const course = coursesResponse.data.find((c: any) => c.id === assignment.course_id);
      return { ...assignment, courseName: course ? course.name : 'Unknown' };
    });
  }



  // Error alert
  useEffect(() => {
    if (error) {
      dispatch(alertActions.showAlert({ variant: "danger", message: error }));
    }
  }, [error, dispatch]);

  const onDeleteAssignmentHandler = useCallback(() => setShowDeleteConfirmation({ visible: false }), []);

  const onEditHandle = useCallback(
    (row: TRow<IAssignmentResponse>) => navigate(`edit/${row.original.id}`),
    [navigate]
  );

  const onDeleteHandle = useCallback(
    (row: TRow<IAssignmentResponse>) => setShowDeleteConfirmation({ visible: true, data: row.original }),
    []
  );

  const tableColumns = useMemo(
    () => ASSIGNMENT_COLUMNS(onEditHandle, onDeleteHandle),
    [onDeleteHandle, onEditHandle]
  );

  const tableData = useMemo(
    () => (isLoading || !mergedData?.length ? [] : mergedData),
    [mergedData, isLoading]
  );

  return (
    <>
      <Outlet />
      <main>
        <Container fluid className="px-md-4">
          <Row className="mt-md-2 mb-md-2">
            <Col className="text-center">
              <h1>Manage Assignments</h1>
            </Col>
            <hr />
          </Row>
          <Row>
            <Col md={{ span: 1, offset: 11 }}>
              <Button variant="outline-info" onClick={() => navigate("new")} className="d-flex align-items-center">
                <span className="me-1">Create</span><BsFileText />
              </Button>
            </Col>
            {showDeleteConfirmation.visible && (
              <DeleteAssignment assignmentData={showDeleteConfirmation.data!} onClose={onDeleteAssignmentHandler} />
            )}
          </Row>
          <Row>
            <Table
              data={tableData}
              columns={tableColumns}
              columnVisibility={{
                id: false,

              }}
            />
          </Row>
        </Container>
      </main>
    </>
  );
};

export default Assignments;

================
File: src/pages/Assignments/AssignmentColumns.tsx
================
import { BsPencilFill, BsPersonXFill } from "react-icons/bs";
import { Row, createColumnHelper } from "@tanstack/react-table";

import { Button } from "react-bootstrap";
import { IAssignmentResponse as IAssignment } from "../../utils/interfaces";

type Fn = (row: Row<IAssignment>) => void;
const columnHelper = createColumnHelper<IAssignment>();
export const assignmentColumns = (handleEdit: Fn, handleDelete: Fn) => [
  columnHelper.accessor("name", {
    header: "Name",
  }),
  columnHelper.accessor("courseName", {
    header: "Course Name",
  }),
  columnHelper.accessor("created_at", {
    header: "Creation Date",
  }),

  columnHelper.accessor("updated_at", {
    header: "Updated Date",
  }),

  columnHelper.display({
    id: "actions",
    header: "Actions",
    cell: ({ row }) => (
      <>
        <Button variant="outline-warning" size="sm" onClick={() => handleEdit(row)} title="Edit">
          <BsPencilFill />
        </Button>
        <Button
          variant="outline-danger"
          size="sm"
          className="ms-sm-2"
          onClick={() => handleDelete(row)}
          title="Delete"
        >
          <BsPersonXFill />
        </Button>
      </>
    ),
  }),
];

================
File: src/pages/Assignments/AssignmentDelete.tsx
================
import { Button, Modal } from "react-bootstrap";
import React, { useEffect, useState } from "react";

import { HttpMethod } from "utils/httpMethods";
import { IAssignmentResponse as IAssignment } from "../../utils/interfaces";
import { alertActions } from "store/slices/alertSlice";
import useAPI from "../../hooks/useAPI";
import { useDispatch } from "react-redux";

interface IDeleteAssignment {
  assignmentData: IAssignment;
  onClose: () => void;
}

const DeleteAssignment: React.FC<IDeleteAssignment> = ({ assignmentData, onClose }) => {
  const { data: deletedAssignment, error: assignmentError, sendRequest: deleteAssignment } = useAPI();
  const [show, setShow] = useState<boolean>(true);
  const dispatch = useDispatch();

  // Delete assignment
  const deleteHandler = () =>
    deleteAssignment({ url: `/assignments/${assignmentData.id}`, method: HttpMethod.DELETE });

  // Show error if any
  useEffect(() => {
    if (assignmentError) {
      dispatch(alertActions.showAlert({ variant: "danger", message: assignmentError }));
    }
  }, [assignmentError, dispatch]);

  // Close modal if assignment is deleted
  useEffect(() => {
    if (
      deletedAssignment?.status &&
      deletedAssignment?.status >= 200 &&
      deletedAssignment?.status < 300
    ) {
      setShow(false);
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Assignment ${assignmentData.name} deleted successfully!`, 
        })
      );
      onClose();
    }
  }, [deletedAssignment?.status, dispatch, onClose, assignmentData.name]); 

  const closeHandler = () => {
    setShow(false);
    onClose();
  };

  return (
    <Modal show={show} onHide={closeHandler}>
      <Modal.Header closeButton>
        <Modal.Title>Delete Assignment</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>
          Are you sure you want to delete assignment <b>{assignmentData.name}?</b> 
        </p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="outline-secondary" onClick={closeHandler}>
          Cancel
        </Button>
        <Button variant="outline-danger" onClick={deleteHandler}>
          Delete
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default DeleteAssignment;

================
File: src/pages/Assignments/AssignmentEditor.tsx
================
import * as Yup from "yup";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faUser } from '@fortawesome/free-solid-svg-icons';
import { faUserCheck } from '@fortawesome/free-solid-svg-icons';
import { faClock } from '@fortawesome/free-solid-svg-icons';
import { faFileAlt } from '@fortawesome/free-solid-svg-icons';
import { faChartBar } from '@fortawesome/free-solid-svg-icons';
import { Button, FormSelect, Modal } from "react-bootstrap";
import { Form, Formik, FormikHelpers } from "formik";
import { IAssignmentFormValues, transformAssignmentRequest } from "./AssignmentUtil";
import { IEditor } from "../../utils/interfaces";
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useLoaderData, useLocation, useNavigate } from "react-router-dom";
import FormInput from "components/Form/FormInput";
import { HttpMethod } from "utils/httpMethods";
import { RootState } from "../../store/store";
import { alertActions } from "store/slices/alertSlice";
import useAPI from "hooks/useAPI";
import FormCheckbox from "components/Form/FormCheckBox";
import { Tabs, Tab } from 'react-bootstrap';
import '../../custom.scss';
import { faUsers } from '@fortawesome/free-solid-svg-icons';
import { faClipboardList } from '@fortawesome/free-solid-svg-icons';

const initialValues: IAssignmentFormValues = {
  name: "",
  directory_path: "",
  // dir: "",
  spec_location: "",
  private: false,
  show_template_review: false,
  require_quiz: false,
  has_badge: false,
  staggered_deadline: false,
  is_calibrated: false,
  // Add other assignment-specific initial values
};

const validationSchema = Yup.object({
  name: Yup.string().required("Required")
  // Add other assignment-specific validation rules
});

const AssignmentEditor: React.FC<IEditor> = ({ mode }) => {
  const { data: assignmentResponse, error: assignmentError, sendRequest } = useAPI();
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const assignmentData: any = useLoaderData();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();

  // Close the modal if the assignment is updated successfully and navigate to the assignments page
  useEffect(() => {
    if (
      assignmentResponse &&
      assignmentResponse.status >= 200 &&
      assignmentResponse.status < 300
    ) {
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Assignment ${assignmentData.name} ${mode}d successfully!`,
        })
      );
      navigate(location.state?.from ? location.state.from : "/assignments");
    }
  }, [dispatch, mode, navigate, assignmentData, assignmentResponse, location.state?.from]);

  // Show the error message if the assignment is not updated successfully
  useEffect(() => {
    assignmentError && dispatch(alertActions.showAlert({ variant: "danger", message: assignmentError }));
  }, [assignmentError, dispatch]);

  const onSubmit = (
    values: IAssignmentFormValues,
    submitProps: FormikHelpers<IAssignmentFormValues>
  ) => {
    let method: HttpMethod = HttpMethod.POST;
    let url: string = "/assignments";
    if (mode === "update") {
      url = `/assignments/${values.id}`;
      method = HttpMethod.PATCH;
    }
    // to be used to display message when assignment is created
    assignmentData.name = values.name;
    console.log(values);
    sendRequest({
      url: url,
      method: method,
      data: values,
      transformRequest: transformAssignmentRequest,
    });
    submitProps.setSubmitting(false);
  };

  const handleClose = () => navigate(location.state?.from ? location.state.from : "/assignments");

  return (
    <Modal size="lg" centered show={true} onHide={handleClose} backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>{mode === "update" ? `Update Assignment - ${assignmentData.name}` : "Create Assignment"}</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {assignmentError && <p className="text-danger">{assignmentError}</p>}
        <Tabs defaultActiveKey="general" id="assignment-tabs">
          <Tab eventKey="general" title="General">
            <Formik
              initialValues={mode === "update" ? assignmentData : initialValues}
              onSubmit={onSubmit}
              validationSchema={validationSchema}
              validateOnChange={false}
              enableReinitialize={true}
            >
              {(formik) => {
                return (
                  <Form>
                    <FormInput controlId="assignment-name" label="Assignment Name" name="name" />
                    <FormInput controlId="assignment-directory_path" label="Submission Directory" name="directory_path" />
                    <FormInput controlId="assignment-spec_location" label="Description URL" name="spec_location" />
                    <FormInput controlId="assignment-submitter_count" label="Submitter Count" name="submitter_count" type="number" />
                    <FormInput controlId="assignment-num_reviews" label="Number of Reviews" name="num_reviews" type="number" />
                    <FormInput controlId="assignment-num_review_of_reviews" label="Number of Review of Reviews" name="num_review_of_reviews" type="number" />
                    <FormInput controlId="assignment-num_review_of_reviewers" label="Number of Review of Reviewers" name="num_review_of_reviewers" type="number" />
                    <FormInput controlId="assignment-num_reviewers" label="Number of Reviewers" name="num_reviewers" type="number" />
                    <FormInput controlId="assignment-max_team_size" label="Max Team Size" name="max_team_size" type="number" />
                    <FormInput controlId="assignment-days_between_submissions" label="Days Between Submissions" name="days_between_submissions" type="number" />
                    <FormInput controlId="assignment-review_assignment_strategy" label="Review Assignment Strategy" name="review_assignment_strategy" />
                    <FormInput controlId="assignment-max_reviews_per_submission" label="Max Reviews Per Submission" name="max_reviews_per_submission" type="number" />
                    <FormInput controlId="assignment-review_topic_threshold" label="Review Topic Threshold" name="review_topic_threshold" type="number" />
                    <FormInput controlId="assignment-rounds_of_reviews" label="Rounds of Reviews" name="rounds_of_reviews" type="number" />
                    <FormInput controlId="assignment-num_quiz_questions" label="Number of Quiz Questions" name="num_quiz_questions" type="number" />
                    <FormInput controlId="assignment-late_policy_id" label="Late Policy ID" name="late_policy_id" type="number" />
                    <FormInput controlId="assignment-max_bids" label="Max Bids" name="max_bids" type="number" />
                    <FormCheckbox controlId="assignment-private" label="Private Assignment" name="private" />
                    <FormCheckbox controlId="assignment-show_teammate_review" label="Show Teammate Reviews?" name="show_teammate_review" />
                    <FormCheckbox controlId="assignment-require_quiz" label="Has quiz?" name="require_quiz" />
                    <FormCheckbox controlId="assignment-has_badge" label="Has badge?" name="has_badge" />
                    <FormCheckbox controlId="assignment-staggered_deadline" label="Staggered deadline assignment?" name="staggered_deadline" />
                    <FormCheckbox controlId="assignment-is_calibrated" label="Calibration for training?" name="is_calibrated" />
                    <FormCheckbox controlId="assignment-reviews_visible_to_all" label="Reviews Visible to All" name="reviews_visible_to_all" />
                    <FormCheckbox controlId="assignment-allow_suggestions" label="Allow Suggestions" name="allow_suggestions" />
                    <FormCheckbox controlId="assignment-copy_flag" label="Copy Flag" name="copy_flag" />
                    <FormCheckbox controlId="assignment-microtask" label="Microtask" name="microtask" />
                    <FormCheckbox controlId="assignment-is_coding_assignment" label="Is Coding Assignment" name="is_coding_assignment" />
                    <FormCheckbox controlId="assignment-is_intelligent" label="Is Intelligent" name="is_intelligent" />
                    <FormCheckbox controlId="assignment-calculate_penalty" label="Calculate Penalty" name="calculate_penalty" />
                    <FormCheckbox controlId="assignment-is_penalty_calculated" label="Is Penalty Calculated" name="is_penalty_calculated" />
                    <FormCheckbox controlId="assignment-availability_flag" label="Availability Flag" name="availability_flag" />
                    <FormCheckbox controlId="assignment-use_bookmark" label="Use Bookmark" name="use_bookmark" />
                    <FormCheckbox controlId="assignment-can_review_same_topic" label="Can Review Same Topic" name="can_review_same_topic" />
                    <FormCheckbox controlId="assignment-can_choose_topic_to_review" label="Can Choose Topic to Review" name="can_choose_topic_to_review" />
                    <Modal.Footer>
                      <Button variant="outline-secondary" onClick={handleClose}>
                        Close
                      </Button>

                      <Button
                        variant="outline-success"
                        type="submit"
                        disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting}
                      >
                        {mode === "update" ? "Update Assignment" : "Create Assignment"}
                      </Button>
                    </Modal.Footer>
                  </Form>
                );
              }}
            </Formik>
          </Tab>
          <Tab eventKey="etc" title="Etc">
            <div className="assignment-actions d-flex flex-wrap justify-content-start">
              <div className="custom-tab-button" onClick={() => navigate(`participants`)}>
                <FontAwesomeIcon icon={faUser} className="icon" />
                <span>Add Participant</span>
              </div>
              <div className="custom-tab-button" onClick={() => navigate(`/assignments/edit/${assignmentData.id}/createteams`)}>
                <FontAwesomeIcon icon={faUsers} className="icon" />
                <span>Create Teams</span>
              </div>

              <div className="custom-tab-button" onClick={() => navigate(`/assignments/edit/${assignmentData.id}/assignreviewer`)}>
                <FontAwesomeIcon icon={faUserCheck} className="icon" />
                <span>Assign Reviewer</span>
              </div>
              <div className="custom-tab-button" onClick={() => navigate(`/assignments/edit/${assignmentData.id}/viewsubmissions`)}>
                <FontAwesomeIcon icon={faClipboardList} className="icon" />
                <span>View Submissions</span>
              </div>
              <div className="custom-tab-button" onClick={() => navigate(`/assignments/edit/${assignmentData.id}/viewscores`)}>
                <FontAwesomeIcon icon={faChartBar} className="icon" />
                <span>View Scores</span>
              </div>
              <div className="custom-tab-button" onClick={() => navigate(`/assignments/edit/${assignmentData.id}/viewreports`)}>
                <FontAwesomeIcon icon={faFileAlt} className="icon" />
                <span>View Reports</span>
              </div>
              <div className="custom-tab-button" onClick={() => navigate(`/assignments/edit/${assignmentData.id}/viewdelayedjobs`)}>
                <FontAwesomeIcon icon={faClock} className="icon" />
                <span>View Delayed Jobs</span>
              </div>
            </div>

          </Tab>
        </Tabs>
      </Modal.Body>
    </Modal>
  );
};

export default AssignmentEditor;

================
File: src/pages/Assignments/AssignmentUtil.ts
================
import { IAssignmentRequest, IAssignmentResponse } from "../../utils/interfaces";
import axiosClient from "../../utils/axios_client";

export interface IAssignmentFormValues {
  id?: number;
  name: string;
  directory_path: string;
  spec_location:string;
  private:boolean;
  show_template_review: boolean;
  require_quiz:boolean;
  has_badge:boolean;
  staggered_deadline:boolean;
  is_calibrated:boolean;
}


export const transformAssignmentRequest = (values: IAssignmentFormValues) => {
  const assignment: IAssignmentRequest = {
    name: values.name,
    directory_path: values.directory_path,
    spec_location:values.spec_location,
    private:values.private,
    show_template_review: values.show_template_review,
    require_quiz:values.require_quiz,
    has_badge:values.has_badge,
    staggered_deadline:values.staggered_deadline,
    is_calibrated:values.is_calibrated,
    
  };
  console.log(assignment);
  return JSON.stringify(assignment);
};

export const transformAssignmentResponse = (assignmentResponse: string) => {
  const assignment: IAssignmentResponse = JSON.parse(assignmentResponse);
  const assignmentValues: IAssignmentFormValues = {
    id: assignment.id,
    name: assignment.name,
    directory_path: assignment.directory_path,
    spec_location:assignment.spec_location,
    private:assignment.private,
    show_template_review: assignment.show_template_review,
    require_quiz:assignment.require_quiz,
    has_badge:assignment.has_badge,
    staggered_deadline:assignment.staggered_deadline,
    is_calibrated:assignment.is_calibrated,
    
  };
  return assignmentValues;
};

export async function loadAssignment({ params }: any) {
  let assignmentData = {};
  // if params contains id, then we are editing a user, so we need to load the user data
  if (params.id) {
    const userResponse = await axiosClient.get(`/assignments/${params.id}`, {
      transformResponse: transformAssignmentResponse,
    });
    assignmentData = await userResponse.data;
  }

  return assignmentData;
}

================
File: src/pages/Assignments/AssignReviewer.tsx
================
import React, { useMemo } from 'react';
import { Button, Container, Row, Col } from 'react-bootstrap';
// import { useNavigate } from 'react-router-dom';
import { useLoaderData } from 'react-router-dom';
import Table from "components/Table/Table";
import { createColumnHelper } from "@tanstack/react-table";

interface IReviewer {
  id: number;
  name: string;
}

const columnHelper = createColumnHelper<IReviewer>();

const AssignReviewer: React.FC = () => {
  const assignment: any = useLoaderData();
  // const navigate = useNavigate();

  // Dummy data for reviewers
  const reviewers = useMemo(() => [
    { id: 1, name: 'Reviewer 1' },
    { id: 2, name: 'Reviewer 2' },
    { id: 3, name: 'Reviewer 3' },
    // ...other reviewers
  ], []);

  const columns = useMemo(() => [
    columnHelper.display({
      id: 'select',
      header: () => 'Select',
      cell: () => (
        <input type="checkbox" style={{ marginLeft: 'auto', marginRight: 'auto', display: 'block' }} /> // Center the checkbox
      )
    }),
    columnHelper.accessor('name', {
      header: () => 'Reviewer',
      cell: info => info.getValue()
    }),
    columnHelper.display({
      id: 'actions',
      header: () => 'Action',
      cell: () => (
        <Button variant="outline-danger" size="sm">
          Action
        </Button>
      )
    })
  ], []);

  const handleAssignReviewers = () => {
    console.log('Assigned reviewers');
    // Logic to assign selected reviewers goes here
  };

  // const handleClose = () => {
  //   navigate(-1); // Go back to the previous page
  // };

  return (
    <Container className="mt-4">
      <div style={{ color: '#31708f', backgroundColor: '#d9edf7', padding: '10px', borderRadius: '5px', border: '1px solid #bce8f1', marginBottom: '20px' }}>
        This is a placeholder page and is still in progress.
      </div>
      <Row className="mt-md-2 mb-md-2">
        <Col className="text-center">
          <h1>Assign Reviewer - {assignment.name}</h1>
        </Col>
        <hr />
      </Row>
      <Row>
        <Col>
          <Table
            data={reviewers}
            columns={columns}
            columnVisibility={{
              id: false,

            }}
          />
        </Col>
      </Row>
      <Row>
        <Col className="text-right" md={{ span: 1, offset: 11 }}>
          {/* <Button variant="outline-secondary" onClick={handleClose} style={{ marginRight: '10px' }}>
            Close
          </Button> */}
          <Button variant="outline-success" onClick={handleAssignReviewers}>
            Assign
          </Button>
        </Col>
      </Row>
    </Container>
  );
};

export default AssignReviewer;

================
File: src/pages/Assignments/CreateTeams.tsx
================
import React, { useState, useMemo, useCallback } from 'react';
import { Button, Container, Row, Col, Modal, Form } from 'react-bootstrap';
import Table from "components/Table/Table";
import { createColumnHelper } from "@tanstack/react-table";
import { BsFileText, BsPencilFill, BsPersonXFill } from "react-icons/bs";
import { useLoaderData } from 'react-router-dom';

interface Participant {
  name: string;
  teamName: string;
}

interface Team {
  name: string;
  members: Participant[];
}

// Initial Data
const initialParticipants: Participant[] = [
  { name: 'Eve', teamName: '' },
  { name: 'Frank', teamName: '' },
  { name: 'Leslie', teamName: '' },
  { name: 'Dom', teamName: '' },
];

const initialTeams: Team[] = [
  { name: 'Team Alpha', members: [{ name: 'Alice', teamName: 'Team Alpha' }, { name: 'Bob', teamName: 'Team Alpha' }] },
  { name: 'Team Beta', members: [{ name: 'Charlie', teamName: 'Team Beta' }] },
  { name: 'Team Theta', members: [{ name: 'Max', teamName: 'Team Theta' }] },
];

const columnHelper = createColumnHelper<Team>();

const CreateTeams: React.FC = () => {
  const assignment: any = useLoaderData();
  const [teams, setTeams] = useState<Team[]>(initialTeams);
  const [teamNameEdit, setTeamNameEdit] = useState('');
  const [participants, setParticipants] = useState<Participant[]>(initialParticipants);
  const [selectedParticipant, setSelectedParticipant] = useState('');
  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);
  const [teamNameForEdit, setTeamNameForEdit] = useState('');
  const [showAddParticipantModal, setShowAddParticipantModal] = useState(false);
  const [showEditTeamModal, setShowEditTeamModal] = useState(false);
  const [showCreateTeamModal, setShowCreateTeamModal] = useState(false);

  const handleShowAddParticipantModal = useCallback((team: Team) => {
    setSelectedTeam(team);
    setShowAddParticipantModal(true);
  }, []);

  const handleShowEditTeamModal = useCallback((team: Team) => {
    setSelectedTeam(team);
    setTeamNameForEdit(team.name);
    setShowEditTeamModal(true);
  }, []);

  const handleSaveEditedTeamName = useCallback(() => {
    if (selectedTeam && teamNameForEdit) {
      const updatedTeams = teams.map((team) => {
        if (team.name === selectedTeam.name) {
          return { ...team, name: teamNameForEdit };
        }
        return team;
      });
      setTeams(updatedTeams);
      setTeamNameForEdit('');
      setShowEditTeamModal(false);
    }
  }, [selectedTeam, teamNameForEdit, teams]);

  const handleAddParticipantToTeam = useCallback(() => {
    if (selectedParticipant && selectedTeam) {
      const updatedTeams = teams.map((team) => {
        if (team.name === selectedTeam.name) {
          return {
            ...team,
            members: [...team.members, { name: selectedParticipant, teamName: team.name }]
          };
        }
        return team;
      });
      setTeams(updatedTeams);
      setParticipants(participants.filter((p) => p.name !== selectedParticipant));
      setShowAddParticipantModal(false);
    }
  }, [selectedParticipant, selectedTeam, teams, participants]);

  const handleDeleteTeam = useCallback((teamToDelete: string) => {
    const updatedTeams = teams.filter((team) => team.name !== teamToDelete);
    setTeams(updatedTeams);
    const reassignedParticipants = participants.map((participant) => {
      if (participant.teamName === teamToDelete) {
        return { ...participant, teamName: '' };
      }
      return participant;
    });
    setParticipants(reassignedParticipants);
  }, [teams, participants]);

  const handleCreateNewTeam = useCallback(() => {
    if (teamNameEdit && !teams.some(team => team.name === teamNameEdit)) {
      setTeams([...teams, { name: teamNameEdit, members: [] }]);
      setTeamNameEdit('');
    }
  }, [teamNameEdit, teams]);

  // const handleClose = () => {
  //   navigate(-1); // Go back to the previous page
  // };

  const columns = useMemo(() => [
    columnHelper.accessor('name', {
      header: () => 'Team Name',
      cell: info => info.getValue()
    }),
    columnHelper.accessor('members', {
      header: () => 'Participants',
      cell: info => info.getValue().map((member: Participant) => member.name).join(', ')
    }),
    columnHelper.display({
      id: 'actions',
      header: () => 'Actions',
      cell: ({ row }) => (
        <div>
          <Button
            variant="outline-info"
            size="sm"
            onClick={() => handleShowAddParticipantModal(row.original)}
          >
            Add Participant
          </Button>{' '}
          <Button
            variant="outline-warning"
            size="sm"
            onClick={() => handleShowEditTeamModal(row.original)}
            title='Edit'
          >
            <BsPencilFill />
          </Button>{' '}
          <Button
            variant="outline-danger"
            size="sm"
            onClick={() => handleDeleteTeam(row.original.name)}
            title='Delete'
          >
            <BsPersonXFill />
          </Button>
        </div>
      )
    })
  ], [handleShowAddParticipantModal, handleShowEditTeamModal, handleDeleteTeam]);

  return (
    <Container fluid className="px-md-4">
      <Row className="mt-md-2 mb-md-2">
        <Col className="text-center">
          <h1>Teams - {assignment.name}</h1>
        </Col>
        <hr />
      </Row>
      <div style={{ color: '#31708f', backgroundColor: '#d9edf7', padding: '10px', borderRadius: '5px', border: '1px solid #bce8f1', marginBottom: '20px' }}>
        This is a placeholder page and is still in progress.
      </div>
      <Row>
        <Col md={{ span: 1, offset: 11 }}>
          <Button variant="outline-info" onClick={() => setShowCreateTeamModal(true)} className="d-flex align-items-center">
            <span className="me-1">Create</span><BsFileText />
          </Button>
        </Col>
      </Row>
      <Row>
        <Col>
          <Table
            data={teams}
            columns={columns}
            columnVisibility={{
              id: false,
            }}
          />
        </Col>
      </Row>
      {/* <Row>
        <Col className="text-right">
          <Button variant="outline-secondary" onClick={handleClose} style={{ marginRight: '10px' }}>
            Close
          </Button>
        </Col>
      </Row> */}
      <Modal show={showAddParticipantModal} onHide={() => setShowAddParticipantModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Add Participant to {selectedTeam?.name}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group controlId="formParticipantSelect">
              <Form.Label>Select Participant</Form.Label>
              <Form.Control as="select" value={selectedParticipant} onChange={(e) => setSelectedParticipant(e.target.value)}>
                <option value="">Select a participant</option>
                {participants.filter((p) => p.teamName === '').map((p, idx) => (
                  <option key={idx} value={p.name}>{p.name}</option>
                ))}
              </Form.Control>
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAddParticipantModal(false)}>Close</Button>
          <Button variant="primary" onClick={handleAddParticipantToTeam}>Add to Team</Button>
        </Modal.Footer>
      </Modal>

      <Modal show={showEditTeamModal} onHide={() => setShowEditTeamModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Edit Team Name</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group controlId="formTeamNameEdit">
              <Form.Label>Team Name</Form.Label>
              <Form.Control
                type="text"
                value={teamNameForEdit}
                onChange={(e) => setTeamNameForEdit(e.target.value)}
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowEditTeamModal(false)}>Cancel</Button>
          <Button variant="primary" onClick={handleSaveEditedTeamName}>Save Changes</Button>
        </Modal.Footer>
      </Modal>
      <Modal show={showCreateTeamModal} onHide={() => setShowCreateTeamModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Create New Team</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group controlId="formNewTeamName">
              <Form.Label>Team Name</Form.Label>
              <Form.Control
                type="text"
                value={teamNameEdit}
                onChange={(e) => setTeamNameEdit(e.target.value)}
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowCreateTeamModal(false)}>Cancel</Button>
          <Button variant="primary" onClick={() => {
            handleCreateNewTeam();
            setShowCreateTeamModal(false);
          }}>Create Team</Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default CreateTeams;

================
File: src/pages/Assignments/ViewDelayedJobs.tsx
================
import React, { useMemo } from 'react';
import { Button, Container, Row, Col } from 'react-bootstrap';
// import { useNavigate } from 'react-router-dom';
import Table from "components/Table/Table";
import { createColumnHelper } from "@tanstack/react-table";
import { useLoaderData } from 'react-router-dom';

interface IDelayedJob {
  id: number;
  jobName: string;
  scheduledTime: string;
}

const columnHelper = createColumnHelper<IDelayedJob>();

const ViewDelayedJobs: React.FC = () => {
  const assignment: any = useLoaderData();
  // const navigate = useNavigate();

  // Dummy data for delayed jobs
  const delayedJobs = useMemo(() => [
    { id: 1, jobName: 'Job 1', scheduledTime: '2023-01-01 12:00' },
    { id: 2, jobName: 'Job 2', scheduledTime: '2023-02-01 15:30' },
    // ...other delayed jobs
  ], []);

  const columns = useMemo(() => [
    columnHelper.accessor('jobName', {
      header: () => 'Job Name',
      cell: info => info.getValue()
    }),
    columnHelper.accessor('scheduledTime', {
      header: () => 'Scheduled Time',
      cell: info => info.getValue()
    }),
    columnHelper.display({
      id: 'actions',
      header: () => 'Actions',
      cell: ({ row }) => (
        <Button variant="outline-danger" size="sm" onClick={() => handleActionClick(row.original.id)}>
          Action
        </Button>
      )
    })
  ], []);

  const handleActionClick = (jobId: number) => {
    console.log(`Action clicked for delayed job ID ${jobId}`);
    // Logic for handling the action goes here
  };

  // const handleClose = () => {
  //   navigate(-1); // Go back to the previous page
  // };

  return (
    <Container className="mt-4">
      <div style={{ color: '#31708f', backgroundColor: '#d9edf7', padding: '10px', borderRadius: '5px', border: '1px solid #bce8f1', marginBottom: '20px' }}>
        This is a placeholder page and is still in progress.
      </div>
      <Row className="mt-md-2 mb-md-2">
        <Col className="text-center">
          <h1>View Delayed Jobs - {assignment.name}</h1>
        </Col>
        <hr />
      </Row>
      <Row>
        <Col>
          <Table
            data={delayedJobs}
            columns={columns}
            columnVisibility={{
              id: false,

            }}
          />
        </Col>
      </Row>
      {/* <Row>
        <Col className="text-right">
          <Button variant="outline-secondary" onClick={handleClose} style={{ marginRight: '10px' }}>
            Close
          </Button>
        </Col>
      </Row> */}
    </Container>
  );
};

export default ViewDelayedJobs;

================
File: src/pages/Assignments/ViewReports.tsx
================
import React, { useMemo } from 'react';
import { Button, Container, Row, Col } from 'react-bootstrap';
// import { useNavigate } from 'react-router-dom';
import Table from "components/Table/Table";
import { createColumnHelper } from "@tanstack/react-table";
import { useLoaderData } from 'react-router-dom';

interface IReport {
  id: number;
  title: string;
  date: string;
}

const columnHelper = createColumnHelper<IReport>();

const ViewReports: React.FC = () => {
  const assignment: any = useLoaderData();
  // const navigate = useNavigate();

  // Dummy data for reports
  const reports = useMemo(() => [
    { id: 1, title: 'Report 1', date: '2023-01-01' },
    { id: 2, title: 'Report 2', date: '2023-02-01' },
    // ...other reports
  ], []);

  const columns = useMemo(() => [
    columnHelper.accessor('title', {
      header: () => 'Title',
      cell: info => info.getValue()
    }),
    columnHelper.accessor('date', {
      header: () => 'Date',
      cell: info => info.getValue()
    }),
    columnHelper.display({
      id: 'actions',
      header: () => 'Actions',
      cell: ({ row }) => (
        <Button variant="outline-danger" size="sm" onClick={() => handleActionClick(row.original.id)}>
          Action
        </Button>
      )
    })
  ], []);

  const handleActionClick = (reportId: number) => {
    console.log(`Action clicked for report ID ${reportId}`);
    // Here goes the logic for handling the action
  };

  // const handleClose = () => {
  //   navigate(-1); // Go back to the previous page
  // };

  return (
    <Container className="mt-4">
      <div style={{ color: '#31708f', backgroundColor: '#d9edf7', padding: '10px', borderRadius: '5px', border: '1px solid #bce8f1', marginBottom: '20px' }}>
        This is a placeholder page and is still in progress.
      </div>
      <Row className="mt-md-2 mb-md-2">
        <Col className="text-center">
          <h1>View Reports - {assignment.name}</h1>
        </Col>
        <hr />
      </Row>
      <Row>
        <Col>
          <Table
            data={reports}
            columns={columns}
            columnVisibility={{
              id: false,

            }}
          />
        </Col>
      </Row>
      {/* <Row>
        <Col className="text-right">
          <Button variant="outline-secondary" onClick={handleClose} style={{ marginRight: '10px' }}>
            Close
          </Button>
        </Col>
      </Row> */}
    </Container>
  );
};

export default ViewReports;

================
File: src/pages/Assignments/ViewScores.tsx
================
import React, { useMemo, useState } from 'react';
import { Button, Container, Row, Col, Modal } from 'react-bootstrap';
import Table from "components/Table/Table";
import { createColumnHelper } from "@tanstack/react-table";
import { useLoaderData } from 'react-router-dom';
import { BsGraphUp } from 'react-icons/bs';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

interface IScore {
  id: number;
  student: string;
  score: number;
}

const columnHelper = createColumnHelper<IScore>();

const ViewScores: React.FC = () => {
  const assignment: any = useLoaderData();
  const [showGraph, setShowGraph] = useState(false);

  const scores = useMemo(() => [
    { id: 1, student: 'Team 1', score: 85 },
    { id: 2, student: 'Team 2', score: 90 },
    { id: 3, student: 'Team 3', score: 88 },
    { id: 4, student: 'Team 4', score: 92 },
    { id: 5, student: 'Team 5', score: 87 },
    { id: 6, student: 'Team 6', score: 94 },
    { id: 7, student: 'Team 7', score: 89 },
    { id: 8, student: 'Team 8', score: 91 },
    { id: 9, student: 'Team 9', score: 86 },
    { id: 10, student: 'Team 10', score: 93 },
    { id: 11, student: 'Team 11', score: 90 },
    { id: 12, student: 'Team 12', score: 92 },
    { id: 13, student: 'Team 13', score: 85 },
    { id: 14, student: 'Team 14', score: 88 },
    { id: 15, student: 'Team 15', score: 94 },
    { id: 16, student: 'Team 16', score: 87 },
    { id: 17, student: 'Team 17', score: 89 },
    { id: 18, student: 'Team 18', score: 91 },
    { id: 19, student: 'Team 19', score: 86 },
    { id: 20, student: 'Team 20', score: 93 },
    // ...other scores
  ], []);

  const columns = useMemo(() => [
    columnHelper.accessor('student', {
      header: () => 'Team',
      cell: info => info.getValue()
    }),
    columnHelper.accessor('score', {
      header: () => 'Score',
      cell: info => info.getValue()
    }),
    columnHelper.display({
      id: 'actions',
      header: () => 'Actions',
      cell: ({ row }) => (
        <Button variant="outline-danger" size="sm" onClick={() => console.log(`Action clicked for score ID ${row.original.id}`)}>
          Action
        </Button>
      )
    })
  ], []);

  const handleShowGraph = () => setShowGraph(true);
  const handleCloseGraph = () => setShowGraph(false);

  return (
    <Container className="mt-4">
      <div style={{ color: '#31708f', backgroundColor: '#d9edf7', padding: '10px', borderRadius: '5px', border: '1px solid #bce8f1', marginBottom: '20px' }}>
        This is a placeholder page and is still in progress.
      </div>
      <Row className="mt-md-2 mb-md-2">
        <Col className="text-center">
          <h1>View Scores - {assignment.name}</h1>
        </Col>
        <hr />
      </Row>
      <Row>
        <Col md={{ span: 1, offset: 11 }}>
          <Button variant="outline-info" onClick={handleShowGraph} className="d-flex align-items-center">
            <span className="me-1">Graph</span> <BsGraphUp />
          </Button>
        </Col>
      </Row>
      <Row>
        <Col>
          <Table
            data={scores}
            columns={columns}
            columnVisibility={{
              id: false,
            }}
          />
        </Col>
      </Row>
      <Modal show={showGraph} onHide={handleCloseGraph}>
        <Modal.Header closeButton>
          <Modal.Title>Score Graph</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={scores} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="student" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Line type="monotone" dataKey="score" stroke="#8884d8" activeDot={{ r: 8 }} />
            </LineChart>
          </ResponsiveContainer>
        </Modal.Body>
      </Modal>
    </Container>
  );
};

export default ViewScores;

================
File: src/pages/Assignments/ViewSubmissions.tsx
================
import React, { useMemo } from 'react';
import { Button, Container, Row, Col } from 'react-bootstrap';
// import { useNavigate } from 'react-router-dom';
import Table from "components/Table/Table";
import { createColumnHelper } from "@tanstack/react-table";
import { useLoaderData } from 'react-router-dom';

interface ISubmission {
  id: number;
  name: string;
}

const columnHelper = createColumnHelper<ISubmission>();

const ViewSubmissions: React.FC = () => {
  const assignment: any = useLoaderData();
  // const navigate = useNavigate();

  // Dummy data for submissions
  const submissions = useMemo(() => [
    { id: 1, name: 'Submission 1' },
    { id: 2, name: 'Submission 2' },
    // ...other submissions
  ], []);

  const columns = useMemo(() => [
    columnHelper.accessor('name', {
      header: () => 'Submission',
      cell: info => info.getValue()
    }),
    columnHelper.display({
      id: 'actions',
      header: () => 'Actions',
      cell: ({ row }) => (
        <Button variant="outline-danger" size="sm" onClick={() => handleActionClick(row.original.id)}>
          Action
        </Button>
      )
    })
  ], []);

  const handleActionClick = (submissionId: number) => {
    console.log(`Action clicked for submission ID ${submissionId}`);
    // Here goes the logic for handling the action
  };

  // const handleClose = () => {
  //   navigate(-1); // Go back to the previous page
  // };

  return (
    <Container className="mt-4">
      <div style={{ color: '#31708f', backgroundColor: '#d9edf7', padding: '10px', borderRadius: '5px', border: '1px solid #bce8f1', marginBottom: '20px' }}>
        This is a placeholder page and is still in progress.
      </div>
      <Row className="mt-md-2 mb-md-2">
        <Col className="text-center">
          <h1>View Submissions - {assignment.name}</h1>
        </Col>
        <hr />
      </Row>
      <Row>
        <Col>
          <Table
            data={submissions}
            columns={columns}
            columnVisibility={{
              id: false,
            }}
          />
        </Col>
      </Row>
      {/* <Row>
        <Col className="text-right">
          <Button variant="outline-secondary" onClick={handleClose} style={{ marginRight: '10px' }}>
            Close
          </Button>
        </Col>
      </Row> */}
    </Container>
  );
};

export default ViewSubmissions;

================
File: src/pages/Authentication/Login.tsx
================
import React from "react";
import { Button, Col, Container, InputGroup, Row } from "react-bootstrap";
import { Form, Formik, FormikHelpers } from "formik";
import FormInput from "../../components/Form/FormInput";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { authenticationActions } from "../../store/slices/authenticationSlice";
import { alertActions } from "../../store/slices/alertSlice";
import { setAuthToken } from "../../utils/auth";
import * as Yup from "yup";
import axios from "axios";

/**
 * @author Ankur Mundra on June, 2023
 */
interface ILoginFormValues {
  user_name: string;
  password: string;
}

const validationSchema = Yup.object({
  user_name: Yup.string().required("Required"),
  password: Yup.string().required("Required"),
});

const Login: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const location = useLocation();

  const onSubmit = (values: ILoginFormValues, submitProps: FormikHelpers<ILoginFormValues>) => {
    axios
      .post("http://localhost:3002/login", values)
      .then((response) => {
        const payload = setAuthToken(response.data.token);

        dispatch(
          authenticationActions.setAuthentication({
            authToken: response.data.token,
            user: payload,
          })
        );
        navigate(location.state?.from ? location.state.from : "/");
      })
      .catch((error) => {
        dispatch(
          alertActions.showAlert({
            variant: "danger",
            message: `Username or password is incorrect, ${error.message}`,
            title: "Unable to authenticate user!",
          })
        );
      });
    submitProps.setSubmitting(false);
  };

  return (
    <Container className="d-flex justify-content-center mt-xxl-5">
      <Col xs={12} md={6} lg={4}>
        <h1 className="text-center">Login</h1>
        <Formik
          initialValues={{ user_name: "", password: "" }}
          onSubmit={onSubmit}
          validationSchema={validationSchema}
          validateOnChange={false}
        >
          {(formik) => {
            return (
              <Form>
                <FormInput
                  controlId="login-user-name"
                  label="User Name"
                  name="user_name"
                  inputGroupPrepend={<InputGroup.Text id="login-prepend">@</InputGroup.Text>}
                />
                <FormInput
                  controlId="user-password"
                  label="Password"
                  name="password"
                  type="password"
                />
                <Row className="mt-2 mb-2">
                  <Col className="d-flex justify-content-end">
                    <Link to="/forgot-password">Forgot password?</Link>
                  </Col>
                </Row>
                <Button
                  style={{ width: "100%" }}
                  variant="primary"
                  type="submit"
                  disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting}
                >
                  Login
                </Button>
              </Form>
            );
          }}
        </Formik>
      </Col>
    </Container>
  );
};

export default Login;

================
File: src/pages/Authentication/Logout.ts
================
import React, { useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "../../store/store";
import { authenticationActions } from "../../store/slices/authenticationSlice";

/**
 * @author Ankur Mundra on June, 2023
 */

const Logout: React.FC = () => {
  const auth = useSelector((state: RootState) => state.authentication);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  useEffect(() => {
    if (auth.isAuthenticated) {
      localStorage.removeItem("token");
      localStorage.removeItem("expiration");
      dispatch(authenticationActions.removeAuthentication());
    }
    navigate("/login");
  }, [auth.isAuthenticated, navigate, dispatch]);

  return null;
};
export default Logout;

================
File: src/pages/Courses/Course.tsx
================
import { Row as TRow } from "@tanstack/react-table";
import Table from "components/Table/Table";
import useAPI from "hooks/useAPI";
import { useCallback, useEffect, useMemo, useState } from "react";
import { Button, Col, Container, Row } from "react-bootstrap";
import { RiHealthBookLine } from "react-icons/ri";
import { useDispatch, useSelector } from "react-redux";
import { Outlet, useLocation, useNavigate } from "react-router-dom";
import { alertActions } from "store/slices/alertSlice";
import { RootState } from "../../store/store";
import { ICourseResponse, ROLE } from "../../utils/interfaces";
import { courseColumns as COURSE_COLUMNS } from "./CourseColumns";
import CopyCourse from "./CourseCopy";
import DeleteCourse from "./CourseDelete";
import { formatDate, mergeDataAndNames } from "./CourseUtil";

// Courses Component: Displays and manages courses, including CRUD operations.

/**
 * @author Atharva Thorve, on December, 2023
 * @author Mrityunjay Joshi on December, 2023
 */
const Courses = () => {
  const { error, isLoading, data: CourseResponse, sendRequest: fetchCourses } = useAPI();
  const { data: InstitutionResponse, sendRequest: fetchInstitutions } = useAPI();
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();

  // State for delete and copy confirmation modals
  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState<{
    visible: boolean;
    data?: ICourseResponse;
  }>({ visible: false });

  const [showCopyConfirmation, setShowCopyConfirmation] = useState<{
    visible: boolean;
    data?: ICourseResponse;
  }>({ visible: false });

  useEffect(() => {
    // ToDo: Fix this API in backend so that it the institution name along with the id. Similar to how it is done in users.
    if (!showDeleteConfirmation.visible || !showCopyConfirmation.visible) {
      fetchCourses({ url: `/courses` });
      // ToDo: Remove this API call later after the above ToDo is completed
      fetchInstitutions({ url: `/institutions` });
    }
  }, [
    fetchCourses,
    fetchInstitutions,
    location,
    showDeleteConfirmation.visible,
    auth.user.id,
    showCopyConfirmation.visible,
  ]);

  // Error alert for API errors
  useEffect(() => {
    if (error) {
      dispatch(alertActions.showAlert({ variant: "danger", message: error }));
    }
  }, [error, dispatch]);

  // Callbacks for handling delete and copy confirmation modals
  const onDeleteCourseHandler = useCallback(
    () => setShowDeleteConfirmation({ visible: false }),
    []
  );

  const onCopyCourseHandler = useCallback(() => setShowCopyConfirmation({ visible: false }), []);

  // Callbacks for navigation and modal handling
  const onEditHandle = useCallback(
    (row: TRow<ICourseResponse>) => navigate(`edit/${row.original.id}`),
    [navigate]
  );

  const onTAHandle = useCallback(
    (row: TRow<ICourseResponse>) => navigate(`${row.original.id}/tas`),
    [navigate]
  );

  const onDeleteHandle = useCallback(
    (row: TRow<ICourseResponse>) =>
      setShowDeleteConfirmation({ visible: true, data: row.original }),
    []
  );

  const onCopyHandle = useCallback(
    (row: TRow<ICourseResponse>) => setShowCopyConfirmation({ visible: true, data: row.original }),
    []
  );

  const tableColumns = useMemo(
    () => COURSE_COLUMNS(onEditHandle, onDeleteHandle, onTAHandle, onCopyHandle),
    [onDeleteHandle, onEditHandle, onTAHandle, onCopyHandle]
  );

  let tableData = useMemo(
    () => (isLoading || !CourseResponse?.data ? [] : CourseResponse.data),
    [CourseResponse?.data, isLoading]
  );

  const institutionData = useMemo(
    () => (isLoading || !InstitutionResponse?.data ? [] : InstitutionResponse.data),
    [InstitutionResponse?.data, isLoading]
  );

  tableData = mergeDataAndNames(tableData, institutionData);

  const formattedTableData = tableData.map((item: any) => ({
    ...item,
    created_at: formatDate(item.created_at),
    updated_at: formatDate(item.updated_at),
  }));

  // Render the Courses component

  return (
    <>
      <Outlet />
      <main>
        <Container fluid className="px-md-4">
          <Row className="mt-md-2 mb-md-2">
            <Col className="text-center">
              <h1>Manage Courses</h1>
            </Col>
            <hr />
          </Row>
          <Row>
            <Col md={{ span: 1, offset: 11 }} style={{ paddingBottom: "10px" }}>
              <Button variant="outline-success" onClick={() => navigate("new")}>
                <RiHealthBookLine />
              </Button>
            </Col>
            {showDeleteConfirmation.visible && (
              <DeleteCourse
                courseData={showDeleteConfirmation.data!}
                onClose={onDeleteCourseHandler}
              />
            )}
            {showCopyConfirmation.visible && (
              <CopyCourse courseData={showCopyConfirmation.data!} onClose={onCopyCourseHandler} />
            )}
          </Row>
          <Row>
            <Table
              showGlobalFilter={false}
              data={formattedTableData}
              columns={tableColumns}
              columnVisibility={{
                id: false,
                institution: auth.user.role === ROLE.SUPER_ADMIN.valueOf(),
              }}
            />
          </Row>
        </Container>
      </main>
    </>
  );
};

export default Courses;

================
File: src/pages/Courses/CourseColumns.tsx
================
import { createColumnHelper, Row } from "@tanstack/react-table";
import { Button } from "react-bootstrap";
import { BsPencilFill, BsPersonXFill } from "react-icons/bs";
import { MdContentCopy, MdDelete } from "react-icons/md";
import { ICourseResponse as ICourse } from "../../utils/interfaces";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Mrityunjay Joshi on December, 2023
 */

// Course Columns Configuration: Defines the columns for the courses table
type Fn = (row: Row<ICourse>) => void;
const columnHelper = createColumnHelper<ICourse>();
export const courseColumns = (handleEdit: Fn, handleDelete: Fn, handleTA: Fn, handleCopy: Fn) => [
  // Column for the course name
  columnHelper.accessor("name", {
    id: "name",
    header: "Name",
    enableSorting: true,
    enableColumnFilter: true,
    enableGlobalFilter: false,
  }),

  // Column for the institution name
  columnHelper.accessor("institution.name", {
    id: "institution",
    header: "Institution",
    enableSorting: true,
    enableMultiSort: true,
    enableGlobalFilter: false,
  }),

  // Column for the creation date
  columnHelper.accessor("created_at", {
    header: "Creation Date",
    enableSorting: true,
    enableColumnFilter: false,
    enableGlobalFilter: false,
  }),

  // Column for the last updated date
  columnHelper.accessor("updated_at", {
    header: "Updated Date",
    enableSorting: true,
    enableColumnFilter: false,
    enableGlobalFilter: false,
  }),

  // Actions column with edit, delete, TA, and copy buttons
  columnHelper.display({
    id: "actions",
    header: "Actions",
    cell: ({ row }) => (
      <>
        <Button variant="outline-warning" size="sm" onClick={() => handleEdit(row)}>
          <BsPencilFill />
        </Button>
        <Button
          variant="outline-danger"
          size="sm"
          className="ms-sm-2"
          onClick={() => handleDelete(row)}
        >
          <MdDelete />
        </Button>
        <Button variant="outline-info" size="sm" className="ms-sm-2" onClick={() => handleTA(row)}>
          <BsPersonXFill />
        </Button>
        <Button
          variant="outline-primary"
          size="sm"
          className="ms-sm-2"
          onClick={() => handleCopy(row)}
        >
          <MdContentCopy />
        </Button>
      </>
    ),
  }),
];

================
File: src/pages/Courses/CourseCopy.tsx
================
import React, { useEffect, useState } from "react";
import { Button, Modal } from "react-bootstrap";
import { useDispatch } from "react-redux";
import { alertActions } from "store/slices/alertSlice";
import { HttpMethod } from "utils/httpMethods";
import useAPI from "../../hooks/useAPI";
import { ICourseResponse as ICourse } from "../../utils/interfaces";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Mrityunjay Joshi on December, 2023
 */

// CopyCourse Component: Modal for copying a course.

interface ICopyCourse {
  courseData: ICourse;
  onClose: () => void;
}

const CopyCourse: React.FC<ICopyCourse> = ({ courseData, onClose }) => {
  // State and hook declarations
  const { data: copiedCourse, error: courseError, sendRequest: CopyCourse } = useAPI();
  const [show, setShow] = useState<boolean>(true);
  const dispatch = useDispatch();

  // Function to initiate the course copy process
  const copyHandler = () =>
    CopyCourse({ url: `/courses/${courseData.id}/copy`, method: HttpMethod.GET });

  // Show error if any
  useEffect(() => {
    if (courseError) dispatch(alertActions.showAlert({ variant: "danger", message: courseError }));
  }, [courseError, dispatch]);

  // Close modal if course is copied
  useEffect(() => {
    if (copiedCourse?.status && copiedCourse?.status >= 200 && copiedCourse?.status < 300) {
      setShow(false);
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Course ${courseData.name} copied successfully!`,
        })
      );
      onClose();
    }
  }, [copiedCourse?.status, dispatch, onClose, courseData.name]);

  // Function to close the modal
  const closeHandler = () => {
    setShow(false);
    onClose();
  };

  // Render the CopyCourse modal
  return (
    <Modal show={show} onHide={closeHandler}>
      <Modal.Header closeButton>
        <Modal.Title>Copy Course</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>
          Are you sure you want to copy course <b>{courseData.name}?</b>
        </p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="outline-secondary" onClick={closeHandler}>
          Cancel
        </Button>
        <Button variant="outline-primary" onClick={copyHandler}>
          Copy
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default CopyCourse;

================
File: src/pages/Courses/CourseDelete.tsx
================
import React, { useEffect, useState } from "react";
import { Button, Modal } from "react-bootstrap";
import { useDispatch } from "react-redux";
import { alertActions } from "store/slices/alertSlice";
import { HttpMethod } from "utils/httpMethods";
import useAPI from "../../hooks/useAPI";
import { ICourseResponse as ICourse } from "../../utils/interfaces";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Mrityunjay Joshi on December, 2023
 */

// DeleteCourse Component: Modal for deleting a course

interface IDeleteCourse {
  courseData: ICourse;
  onClose: () => void;
}

const DeleteCourse: React.FC<IDeleteCourse> = ({ courseData, onClose }) => {
  // State and hook declarations
  const { data: deletedCourse, error: courseError, sendRequest: DeleteCourse } = useAPI();
  const [show, setShow] = useState<boolean>(true);
  const dispatch = useDispatch();

  // Delete course
  const deleteHandler = () =>
    DeleteCourse({ url: `/courses/${courseData.id}`, method: HttpMethod.DELETE });

  // Show error if any
  useEffect(() => {
    if (courseError) dispatch(alertActions.showAlert({ variant: "danger", message: courseError }));
  }, [courseError, dispatch]);

  // Close modal if course is deleted
  useEffect(() => {
    if (deletedCourse?.status && deletedCourse?.status >= 200 && deletedCourse?.status < 300) {
      setShow(false);
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Course ${courseData.name} deleted successfully!`,
        })
      );
      onClose();
    }
  }, [deletedCourse?.status, dispatch, onClose, courseData.name]);

  // Function to close the modal
  const closeHandler = () => {
    setShow(false);
    onClose();
  };

  // Render the DeleteCourse modal
  return (
    <Modal show={show} onHide={closeHandler}>
      <Modal.Header closeButton>
        <Modal.Title>Delete Course</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>
          Are you sure you want to delete course <b>{courseData.name}?</b>
        </p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="outline-secondary" onClick={closeHandler}>
          Cancel
        </Button>
        <Button variant="outline-danger" onClick={deleteHandler}>
          Delete
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default DeleteCourse;

================
File: src/pages/Courses/CourseEditor.tsx
================
import FormCheckBoxGroup from "components/Form/FormCheckBoxGroup";
import FormInput from "components/Form/FormInput";
import FormSelect from "components/Form/FormSelect";
import { Form, Formik, FormikHelpers } from "formik";
import useAPI from "hooks/useAPI";
import React, { useEffect } from "react";
import { Button, InputGroup, Modal } from "react-bootstrap";
import { useDispatch, useSelector } from "react-redux";
import { useLoaderData, useLocation, useNavigate } from "react-router-dom";
import { alertActions } from "store/slices/alertSlice";
import { HttpMethod } from "utils/httpMethods";
import * as Yup from "yup";
import { RootState } from "../../store/store";
import { IEditor, ROLE } from "../../utils/interfaces";
import { ICourseFormValues, courseVisibility, noSpacesSpecialCharsQuotes, transformCourseRequest } from "./CourseUtil";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Mrityunjay Joshi, on December, 2023
 */

// CourseEditor Component: Modal for creating or updating a course.
const initialValues: ICourseFormValues = {
  name: "",
  directory: "",
  private: [],
  institution_id: -1,
  instructor_id: -1,
  info: "",
};

// Validation schema for the course form
const validationSchema = Yup.object({
  name: Yup.string()
    .required("Required")
    .min(3, "Course name must be at least 3 characters")
    .max(20, "Course name must be at most 20 characters"),
  info: Yup.string().required("Required").nonNullable(),
  directory: Yup.string()
    .required("Required")
    .nonNullable()
    .test("no-spaces-special-chars-quotes", "Invalid characters", noSpacesSpecialCharsQuotes),
  institution_id: Yup.string().required("Required").nonNullable(),
});

const CourseEditor: React.FC<IEditor> = ({ mode }) => {

  // API hook for making requests
  const { data: courseResponse, error: courseError, sendRequest } = useAPI();
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const { courseData, institutions, instructors }: any = useLoaderData();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();

  initialValues.institution_id = auth.user.institution_id;

  // Close the modal if the course is updated successfully and navigate to the courses page
  useEffect(() => {
    if (courseResponse && courseResponse.status >= 200 && courseResponse.status < 300) {
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Course ${courseData.name} ${mode}d successfully!`,
        })
      );
      navigate(location.state?.from ? location.state.from : "/courses");
    }
  }, [dispatch, mode, navigate, courseData.name, courseResponse, location.state?.from]);

  // Show the error message if the course is not updated successfully
  useEffect(() => {
    courseError && dispatch(alertActions.showAlert({ variant: "danger", message: courseError }));
  }, [courseError, dispatch]);

  // Function to handle form submission
  const onSubmit = (values: ICourseFormValues, submitProps: FormikHelpers<ICourseFormValues>) => {
    let method: HttpMethod = HttpMethod.POST;
    let url: string = "/courses";

    if (mode === "update") {
      url = `/courses/${values.id}`;
      method = HttpMethod.PATCH;
    }

    // to be used to display message when course is created
    courseData.name = values.name;
    sendRequest({
      url: url,
      method: method,
      data: values,
      transformRequest: transformCourseRequest,
    });
    submitProps.setSubmitting(false);
  };

  // Function to close the modal
  const handleClose = () => navigate(location.state?.from ? location.state.from : "/courses");

  // Render the CourseEditor modal
  return (
    <Modal size="lg" centered show={true} onHide={handleClose} backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>{mode === "update" ? "Update Course" : "Create Course"}</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {courseError && <p className="text-danger">{courseError}</p>}
        <Formik
          initialValues={mode === "update" ? courseData : initialValues}
          onSubmit={onSubmit}
          validationSchema={validationSchema}
          validateOnChange={false}
          enableReinitialize={true}
        >
          {(formik) => {
            return (
              <Form>
                <FormSelect
                  controlId="course-institution"
                  name="institution_id"
                  disabled={mode === "update" || auth.user.role !== ROLE.SUPER_ADMIN.valueOf()}
                  options={institutions}
                  inputGroupPrepend={
                    <InputGroup.Text id="course-inst-prep">Institution</InputGroup.Text>
                  }
                />
                <FormSelect
                  controlId="course-instructor"
                  name="instructor_id"
                  disabled={mode === "update" || auth.user.role !== ROLE.SUPER_ADMIN.valueOf()}
                  options={instructors}
                  inputGroupPrepend={
                    <InputGroup.Text id="course-inst-prep">Instructors</InputGroup.Text>
                  }
                />
                <FormInput
                  controlId="name"
                  label="Name"
                  name="name"
                  disabled={mode === "update"}
                />
                <FormInput
                  controlId="directory"
                  label="Course Directory (Mandatory field. No Spaces, Special Characters, or quotes)"
                  name="directory"
                />
                <FormInput controlId="info" label="Course Information" name="info" />
                <FormCheckBoxGroup
                  controlId="course-visibility"
                  label="Course Visibility"
                  name="private"
                  options={courseVisibility}
                />

                <Modal.Footer>
                  <Button variant="outline-secondary" onClick={handleClose}>
                    Close
                  </Button>

                  <Button
                    variant="outline-success"
                    type="submit"
                    disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting}
                  >
                    {mode === "update" ? "Update Course" : "Create Course"}
                  </Button>
                </Modal.Footer>
              </Form>
            );
          }}
        </Formik>
      </Modal.Body>
    </Modal>
  );
};

export default CourseEditor;

================
File: src/pages/Courses/CourseUtil.ts
================
import { IFormOption } from "components/Form/interfaces";
import { getPrivilegeFromID, hasAllPrivilegesOf } from "utils/util";
import axiosClient from "../../utils/axios_client";
import { ICourseRequest, ICourseResponse, IInstitution, IInstitutionResponse, IInstructor, IUserRequest, ROLE } from "../../utils/interfaces";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Mrityunjay Joshi, on December, 2023
 */
// Course Utility Functions and Constants

// Enumeration for course visibility options
export enum CourseVisibility {
  PRIVATE = "private",
}

type PermittedCourseVisibility = CourseVisibility.PRIVATE

// Form options for course visibility
export const courseVisibility: IFormOption[] = [
  { label: "Private Course", value: CourseVisibility.PRIVATE },
];

// Interface for course form values
export interface ICourseFormValues {
  id?: number;
  name: string;
  directory: string;
  info: string;
  private: Array<PermittedCourseVisibility>;
  institution_id: number;
  instructor_id: number;
}

// Transform institutions response into form options
export const transformInstitutionsResponse = (institutionsList: string) => {
  let institutionsData: IFormOption[] = [{ label: "Select an Institution", value: "" }];
  let institutions: IInstitution[] = JSON.parse(institutionsList);
  institutions.forEach((institution) =>
    institutionsData.push({ label: institution.name, value: institution.id! })
  );
  return institutionsData;
};

// Transform instructor response into form options
export const transformInstructorResponse = (instructorList: string) => {
  let instructorData: IFormOption[] = [{ label: "Select an Instructor", value: "" }];
  let instructor: IInstructor[] = JSON.parse(instructorList);
  instructor.forEach((instructor) =>
    instructorData.push({ label: instructor.name, value: instructor.id! })
  );
  return instructorData;
};

// Transform course form values into request payload
export const transformCourseRequest = (values: ICourseFormValues) => {
  const course: ICourseRequest = {
    name: values.name,
    directory_path: values.directory,
    info: values.info,
    private: values.private.includes(CourseVisibility.PRIVATE),
    institution_id: values.institution_id,
    instructor_id: values.instructor_id,
  };
  return JSON.stringify(course);
}

// Transform course response into form values
export const transformCourseResponse = (courseResponse: string) => {
  const course: ICourseResponse = JSON.parse(courseResponse);
  const institution_id = course.institution_id ? course.institution_id : -1;
  const instructor_id = course.instructor_id ? course.instructor_id : -1;
  const courseValues: ICourseFormValues = {
    id: course.id,
    name: course.name,
    directory: course.directory_path,
    info: course.info,
    institution_id: institution_id,
    instructor_id: instructor_id,
    private: course.private ? [CourseVisibility.PRIVATE] : []
  }
  return courseValues;
}

// Load course, instructor, and institution data
export async function loadCourseInstructorDataAndInstitutions({ params }: any) {
  let courseData = {};

  // if params contains id, then we are editing a user, so we need to load the user data
  if (params.id) {
    const courseResponse = await axiosClient.get(`/courses/${params.id}`, {
      transformResponse: transformCourseResponse,
    });
    courseData = await courseResponse.data;
  }

  // Load institutions data
  const institutionsResponse = await axiosClient.get("/institutions", {
    transformResponse: transformInstitutionsResponse,
  });
  const institutions = await institutionsResponse.data;

  // ToDo: Create an API to just fetch instructors, so here in the frontend we won't have to filter out the users based on the role.
  const usersResponse = await axiosClient.get("/users", {
    transformResponse: transformInstructorResponse,
  });
  const users = await usersResponse.data;
  
  const instructors = users.filter((user: IUserRequest) => !hasAllPrivilegesOf(getPrivilegeFromID(user.role_id), ROLE.TA));

  return { courseData, institutions, instructors }
}

// Input Validation for the Directory path of the course
export const noSpacesSpecialCharsQuotes = (value: string) => {
  // Check for spaces
  if (/\s/.test(value)) {
    return false;
  }

  // Check for special characters
  if (/[^a-zA-Z0-9]/.test(value)) {
    return false;
  }

  // Check for quotes
  if (/["']/.test(value)) {
    return false;
  }

  return true;
};

// Function to format the date from ISO to "Dec 4, 2023, 7:35 PM" format.
export const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  const options: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    hour12: true,
  };
  return new Intl.DateTimeFormat('en-US', options).format(date);
};

// Function to merge data and names
export const mergeDataAndNames = (data: ICourseResponse[], names: IInstitutionResponse[]): any => {
  return data.map((dataObj) => {
    const matchingNameObject = names.find((nameObj) => nameObj.id === dataObj.institution_id);

    if (matchingNameObject) {
      return {
        ...dataObj,
        institution: {
          id: matchingNameObject.id,
          name: matchingNameObject.name,
        },
      };
    }

    return dataObj;
  });
};

================
File: src/pages/EditQuestionnaire/ExportModal.js
================
import React from "react";

const ExportModal = ({ onClose, onExport }) => {
  return (
    <div className="modal" style={{ display: "block" }}>
      <div className="modal-dialog">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">Export Questionnaire</h5>
            <button
              type="button"
              className="btn-close"
              aria-label="Close"
              onClick={onClose}
            ></button>
          </div>
          <div className="modal-body">
            <p>Click the button below to export the questionnaire data as a JSON file.</p>
          </div>
          <div className="modal-footer">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={onClose}
            >
              Close
            </button>
            <button
              type="button"
              className="btn btn-primary"
              onClick={onExport}
            >
              Export
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExportModal;

================
File: src/pages/EditQuestionnaire/ImportModal.js
================
import React, { useState } from "react";

const ImportModal = ({ onClose, onImport }) => {
  const [selectedFile, setSelectedFile] = useState(null);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setSelectedFile(file);
  };

  const handleImport = () => {
    if (selectedFile) {
      const reader = new FileReader();
      reader.onload = (event) => {
        try {
          const importedData = JSON.parse(event.target.result);
          onImport(importedData);
          onClose();
        } catch (error) {
          console.error("Error parsing JSON:", error);
          // Handle the error as needed (e.g., show an error message)
        }
      };
      reader.readAsText(selectedFile);
    }
  };

  return (
    <div className="modal" style={{ display: "block" }}>
      <div className="modal-dialog">
        <div className="modal-content">
          <div className="modal-header">
            <h5 className="modal-title">Import Questionnaire</h5>
            <button
              type="button"
              className="btn-close"
              aria-label="Close"
              onClick={onClose}
            ></button>
          </div>
          <div className="modal-body">
            <p>
              Select a JSON file to import questionnaire data. The file should
              contain a valid JSON object.
            </p>
            <input type="file" onChange={handleFileChange} />
          </div>
          <div className="modal-footer">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={onClose}
            >
              Close
            </button>
            <button
              type="button"
              className="btn btn-primary"
              onClick={handleImport}
            >
              Import
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ImportModal;

================
File: src/pages/EditQuestionnaire/Questionnaire.tsx
================
import React, { useState } from "react";
import ImportModal from "./ImportModal";
import ExportModal from "./ExportModal";

interface ImportedData {
  title: string;
  data: Array<{
    seq: number;
    question: string;
    type: string;
    weight: number;
    text_area_size: string;
    max_label: string;
    min_label: string;
  }>;
}

const Questionnaire = () => {
  const sample_questionnaire = {
    title: "Edit Teammate Review",
    data: [
      {
        seq: 1.0,
        question: "How many times was this person late to meetings?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "almost never",
        min_label: "almost always",
      },
      {
        seq: 2.0,
        question: "How many times did this person not show up?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "almost never",
        min_label: "almost always",
      },
      {
        seq: 3.0,
        question: "How much did this person offer to do in this project?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "100%-80%",
        min_label: "20%-0%",
      },
      {
        seq: 4.0,
        question: "What fraction of the work assigned to this person did s(he) do?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "100%-80%",
        min_label: "20%-0%",
      },
      {
        seq: 4.5,
        question: "Did this person do assigned work on time?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "always",
        min_label: "never",
      },
      {
        seq: 5.0,
        question: "How much initiative did this person take on this project?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "a whole lot",
        min_label: "total deadbeat",
      },
      {
        seq: 6.0,
        question: "Did this person try to avoid doing any task that was necessary?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "not at all",
        min_label: "absolutely",
      },
      {
        seq: 7.0,
        question: "How many of the useful ideas did this person come up with?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "100%-80%",
        min_label: "20%-0%",
      },
      {
        seq: 8.0,
        question: "What fraction of the coding did this person do?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "100%-80%",
        min_label: "20%-0%",
      },
      {
        seq: 9.0,
        question: "What fraction of the documentation did this person write?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "100%-80%",
        min_label: "20%-0%",
      },
      {
        seq: 11.0,
        question: "How important is this person to the team?",
        type: "Criterion",
        weight: 1,
        text_area_size: "50, 30",
        max_label: "indispensable",
        min_label: "redundant",
      },
    ],
  };
  const [minScore, setMinScore] = useState(0);
  const [maxScore, setMaxScore] = useState(5);
  const [isPrivate, setIsPrivate] = useState(false);

  const [questionnaireData, setQuestionnaireData] = useState(sample_questionnaire);
  const [showImportModal, setShowImportModal] = useState(false);
  const [showExportModal, setShowExportModal] = useState(false);

  // Function to export questionnaire data
  const exportQuestionnaire = () => {
    const dataToExport = JSON.stringify(questionnaireData);
    const blob = new Blob([dataToExport], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "questionnaire.json";
    a.click();

    URL.revokeObjectURL(url);
  };

  // Function to handle imported data
  const handleFileChange = (importedData: ImportedData) => {
    setQuestionnaireData(importedData);
  };


  return (
    <div>
      <div className="container">
        <h1 className="mt-4">{sample_questionnaire.title}</h1>
        <div className="row m-2">
          <div className="col-6">
            Min item score:
            <input
              className="form-control"
              type="number"
              value={minScore}
              onChange={(e) => setMinScore(parseInt(e.target.value, 10))}
              // Using parseInt to convert the input value to a number
            ></input>
          </div>
        </div>
        <div className="row m-2">
          <div className="col-6">
            Max item score:
            <input
              className="form-control"
              type="number"
              value={maxScore}
              onChange={(e) => setMaxScore(parseInt(e.target.value, 10))}
              // Using parseInt to convert the input value to a number
            ></input>
          </div>
        </div>
        <div className="row m-2">
          <div className="col-6">
            Is this Teammate review private:{' '} 
            <input
              type="checkbox"
              checked={isPrivate}
              onChange={() => setIsPrivate(!isPrivate)}
            />
          </div>
        </div>
        <div className="row m-2">
          <div className="col-6">
            <button
              type="button"
              style={{ borderColor: "black" }}
              className="btn btn-light m-2"
            >
              Update questionnaire parameters
            </button>
          </div>
        </div>
        <hr />
             
        <div className="row m-2">
          <div className="col-1">Seq</div>
          <div className="col-3">Question</div>
          <div className="col-1">Type</div>
          <div className="col-1">Weight</div>
          <div className="col-1">Text_area_size</div>
          <div className="col-2">Max_label</div>
          <div className="col-2">Min_label</div>
          <div className="col-1">Action</div>
        </div>
        {sample_questionnaire.data.map((item) => {
          return (
            <div className="row m-2">
              <div className="col-1" >
                <input
                  className="form-control"
                  style={{ borderColor: "black",width: "50px" }}
                  type="text"
                  value={item.seq}
                  disabled
                />
              </div>
              <div className="col-3">
                <input
                  className="form-control"
                  style={{ borderColor: "black" }}
                  type="text"
                  value={item.question}
                ></input>
              </div>
              <div className="col-1">
              <select
                className="form-select"
                style={{ borderColor: "black" }}
                defaultValue = {item.type}
              >
                <option value="Criterion">Criterion</option>
                <option value="Scale">Scale</option>
                <option value="Cake">Cake</option>
                <option value="Dropdown">Dropdown</option>
                <option value="Checkbox">Checkbox</option>
                <option value="TextArea">TextArea</option>
                <option value="TextField">TextField</option>
                <option value="UploadFile">UploadFile</option>
                <option value="SectionHeader">SectionHeader</option>
                <option value="TableHeader">TableHeader</option>
                <option value="ColumnHeader">ColumnHeader</option>
              </select>
              </div>
              <div className="col-1">
                <input
                  className="form-control"
                  style={{ borderColor: "black" }}
                  type="number"
                  placeholder="1"
                  pattern="[0-9]*" // Only allow numeric values
                  value={item.weight}
                ></input>
              </div>
              <div className="col-1">
                <input
                  className="form-control"
                  style={{ borderColor: "black" }}
                  type="text"
                  value={item.text_area_size}
                  defaultValue="80, 1"
                ></input>
              </div>
              <div className="col-2">
                <input
                  className="form-control"
                  style={{ borderColor: "black" }}
                  type="text"
                  value={item.max_label}
                ></input>
              </div>
              <div className="col-2">
                <input
                  className="form-control"
                  style={{ borderColor: "black" }}
                  type="text"
                  value={item.min_label}
                ></input>
              </div>              
              <div className="col-1">
              <button
                type="button"
                className="btn btn-light"
              >
                Remove
              </button>  
              </div>
            </div>
          );
        })}
        <br /> 
        <div className="row m-2">
        <br /> 
        <div className="col-1">
            <input className="form-control" type="text" placeholder="1"></input>
        </div>
        <div className="col-1">
        <p style={{ fontSize: "18px", paddingLeft: 0, paddingRight: 0 }}>
          more
        </p>
        </div>
        <div className="col-2">
            <select className="form-select">
            <option value="Criterion">Criterion</option>
            <option value="Scale">Scale</option>
            <option value="Cake">Cake</option>
            <option value="Dropdown">Dropdown</option>
            <option value="Checkbox">Checkbox</option>
            <option value="TextArea">TextArea</option>
            <option value="TextField">TextField</option>
            <option value="UploadFile">UploadFile</option>
            <option value="SectionHeader">SectionHeader</option>
            <option value="TableHeader">TableHeader</option>
            <option value="ColumnHeader">ColumnHeader</option>
            </select>
        </div>
        <div className="col-1">
        <p style={{ fontSize: "18px" }}>
        question(s)
        </p>
        </div>
        <div className="col-2">
        <button
            type="button"
            style={{ backgroundColor: "#4d8ac0", borderColor: "#4d8ac0" ,  marginBottom: '20px' }}
            className="btn btn-primary"
          >
            Add Question
          </button> 
          </div>
        </div>
        <br /> 
        <div className="row m-2">
        <div className="col-2">
          <button
            type="button"
            style={{ backgroundColor: "#4d8ac0", borderColor: "#4d8ac0" }}
            className="btn btn-primary"
          >
            Save all questions
          </button>
        </div>
        </div>
        <div className="row m-2">
        <div className="col-2">
          <button
            type="button"
            style={{ borderColor: "black" }}
            className="btn btn-light"
          >
            Edit/View Advice
          </button>
        </div>
        </div>
        <hr />
        <div>
          <div>
            <a
             
              style={{ color: "#b28b66", textDecoration: "none", cursor: "pointer" }}
              onClick={() => setShowImportModal(true)}
            >
              Import Questionnaire
            </a>{" "}
            |
            <a
             
              style={{ color: "#b28b66", textDecoration: "none", cursor: "pointer" }}
              onClick={() => setShowExportModal(true)}
            >
              Export Questionnaire
            </a>
          </div>

          {/* Render import and export modals conditionally */}
          {showImportModal && (
            <ImportModal
              onClose={() => setShowImportModal(false)}
              onImport={handleFileChange}
            />
          )}
          {showExportModal && (
            <ExportModal
              onClose={() => setShowExportModal(false)}
              onExport={exportQuestionnaire}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default Questionnaire;

================
File: src/pages/Email_the_author/email_the_author.css
================
/* Overall container */
#div1 {
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
    padding: 20px;
    box-sizing: border-box;
}

/* Styling for the form */
form {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

h2 {
    text-align: center;
    color: #333;
    font-family: 'Arial', sans-serif;
}

label {
    display: block;
    margin-bottom: 5px;
    color: #666;
    font-size: 16px;
    font-family: 'Arial', sans-serif;
}

input[type="text"],
textarea {
    width: 100%;
    padding: 8px;
    margin-bottom: 20px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box; /* Include padding and border in element's width */
}

input[type="text"] {
    height: 40px; /* Fixed height for text input */
}

textarea {
    height: 120px; /* Height for textarea */
    resize: none; /* Disables resizing */
}

#b1 {
    width: 100%;
    padding: 10px;
    background-color: #0056b3;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    font-family: 'Arial', sans-serif;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #004494;
}

================
File: src/pages/Email_the_author/email_the_author.tsx
================
import React from "react";
import "./email_the_author.css";
const Email_the_author: React.FC = () => {
  return (
    <div id="div1">
      <h2>Email the author</h2>
      <div>
        <label htmlFor="subject">Subject:</label>
        <input type="text" id="subject" name="subject" />
      </div>
      <div>
        <label htmlFor="description">Description:</label>
        <textarea id="description" name="description" ></textarea>
      </div>
      <button id="b1">Send</button>
    </div>
  );
};

export default Email_the_author;

================
File: src/pages/Institutions/institutionColumns.tsx
================
import {createColumnHelper, Row} from "@tanstack/react-table";
import {MdOutlineDeleteForever as Remove} from "react-icons/md";
import {BsPencilFill as Edit} from "react-icons/bs";
import {Button} from "react-bootstrap";
import {IInstitution} from "../../utils/interfaces";

/**
 * @author Ankur Mundra on June, 2023
 */

type Fn = (row: Row<IInstitution>) => void;
const columnHelper = createColumnHelper<IInstitution>();
export const institutionColumns = (handleEdit: Fn, handleDelete: Fn) => [
  columnHelper.accessor("id", {
    header: "Id",
    enableSorting: false,
    enableColumnFilter: false,
  }),

  columnHelper.accessor("name", {
    header: "Name",
    enableSorting: true,
  }),

  columnHelper.display({
    id: "actions",
    header: "Actions",
    cell: ({ row }) => (
      <>
        <Button variant="outline-warning" size="sm" onClick={() => handleEdit(row)}>
          <Edit />
        </Button>
        <Button
          size="sm"
          variant="outline-danger"
          className="ms-sm-2"
          onClick={() => handleDelete(row)}
        >
          <Remove />
        </Button>
      </>
    ),
  }),
];

================
File: src/pages/Institutions/InstitutionDelete.tsx
================
import React, {useEffect, useState} from "react";
import {Button, Modal} from "react-bootstrap";
import {useDispatch} from "react-redux";
import {alertActions} from "store/slices/alertSlice";
import {HttpMethod} from "utils/httpMethods";
import useAPI from "../../hooks/useAPI";
import {IInstitution} from "../../utils/interfaces";

/**
 * @author Ankur Mundra on June, 2023
 */

interface IDeleteInstitution {
  institutionData: IInstitution;
  onClose: () => void;
}

const DeleteInstitution: React.FC<IDeleteInstitution> = ({ institutionData, onClose }) => {
  const { data: response, error: userError, sendRequest: deleteUser } = useAPI();
  const [show, setShow] = useState<boolean>(true);
  const dispatch = useDispatch();

  // Delete user
  const deleteHandler = () =>
    deleteUser({ url: `/institutions/${institutionData.id}`, method: HttpMethod.DELETE });

  // Show error if any
  useEffect(() => {
    if (userError) dispatch(alertActions.showAlert({ variant: "danger", message: userError }));
  }, [userError, dispatch]);

  // Close modal if user is deleted
  useEffect(() => {
    if (response?.status && response?.status >= 200 && response?.status < 300) {
      setShow(false);
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Institution ${institutionData.name} deleted successfully!`,
        })
      );
      onClose();
    }
  }, [response?.status, dispatch, onClose, institutionData.name]);

  const closeHandler = () => {
    setShow(false);
    onClose();
  };

  return (
    <Modal show={show} onHide={closeHandler}>
      <Modal.Header closeButton>
        <Modal.Title>Delete Institution</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>
          Are you sure you want to delete institution <b>{institutionData.name}?</b>
        </p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="outline-secondary" onClick={closeHandler}>
          Cancel
        </Button>
        <Button variant="outline-danger" onClick={deleteHandler}>
          Delete
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default DeleteInstitution;

================
File: src/pages/Institutions/InstitutionEditor.tsx
================
import React, { useEffect } from "react";
import { Form, Formik, FormikHelpers } from "formik";
import { Button, Modal } from "react-bootstrap";
import FormInput from "components/Form/FormInput";
import { alertActions } from "store/slices/alertSlice";
import { useDispatch } from "react-redux";
import { useLoaderData, useNavigate } from "react-router-dom";
import { HttpMethod } from "utils/httpMethods";
import useAPI from "hooks/useAPI";
import * as Yup from "yup";
import axiosClient from "../../utils/axios_client";
import { IEditor, IInstitution } from "../../utils/interfaces";

/**
 * @author Ankur Mundra on June, 2023
 */

const initialValues: IInstitution = {
  name: "",
};

const validationSchema = Yup.object({
  name: Yup.string()
    .required("Required")
    .min(3, "Institution name must be at least 3 characters")
    .max(50, "Institution name must be at most 36 characters"),
});

const InstitutionEditor: React.FC<IEditor> = ({ mode }) => {
  const { data: institutionResponse, error, sendRequest } = useAPI();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const institution: any = useLoaderData();

  // Close the modal if the institution is updated successfully and navigate to the institutions page
  useEffect(() => {
    if (
      institutionResponse &&
      institutionResponse.status >= 200 &&
      institutionResponse.status < 300
    ) {
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Institution ${mode}d successfully!`,
        })
      );
      navigate("/administrator/institutions");
    }
  }, [dispatch, mode, navigate, institutionResponse]);

  // Show the error message if the institution is not updated successfully
  useEffect(() => {
    error && dispatch(alertActions.showAlert({ variant: "danger", message: error }));
  }, [error, dispatch]);

  const onSubmit = (values: IInstitution, submitProps: FormikHelpers<IInstitution>) => {
    let method: HttpMethod = HttpMethod.POST;
    let url: string = "/institutions";

    if (mode === "update") {
      url = `/institutions/${values.id}`;
      method = HttpMethod.PATCH;
    }

    sendRequest({
      url: url,
      method: method,
      data: values,
    });
    submitProps.setSubmitting(false);
  };

  const handleClose = () => navigate("/administrator/institutions");

  return (
    <Modal size="lg" centered show={true} onHide={handleClose} backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>{mode === "update" ? "Update " : "Create "}Institution</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {error && <p className="text-danger">{error}</p>}
        <Formik
          initialValues={mode === "update" ? institution : initialValues}
          onSubmit={onSubmit}
          validationSchema={validationSchema}
          validateOnChange={false}
          enableReinitialize={true}
        >
          {(formik) => {
            return (
              <Form>
                <FormInput controlId="institution-name" label="Institution Name" name="name" />
                <Modal.Footer>
                  <Button variant="outline-secondary" onClick={handleClose}>
                    Close
                  </Button>

                  <Button
                    variant="outline-success"
                    type="submit"
                    disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting}
                  >
                    {mode === "update" ? "Update " : "Create "}Institution
                  </Button>
                </Modal.Footer>
              </Form>
            );
          }}
        </Formik>
      </Modal.Body>
    </Modal>
  );
};

export async function loadInstitution({ params }: any) {
  const institutionResponse = await axiosClient.get(`/institutions/${params.id}`);
  return await institutionResponse.data;
}

export default InstitutionEditor;

================
File: src/pages/Institutions/Institutions.tsx
================
import { useCallback, useMemo, useState } from "react";
import { Outlet, useLoaderData, useNavigate } from "react-router-dom";
import { Button, Col, Container, Row } from "react-bootstrap";
import { Row as TRow } from "@tanstack/react-table";
import Table from "components/Table/Table";
import { institutionColumns as INSTITUTION_COLUMNS } from "./institutionColumns";
import axiosClient from "../../utils/axios_client";
import InstitutionDelete from "./InstitutionDelete";
import { BsPlusSquareFill } from "react-icons/bs";
import { IInstitution } from "../../utils/interfaces";

/**
 * @author Ankur Mundra on June, 2023
 */

const Institutions = () => {
  const navigate = useNavigate();
  const institutions: any = useLoaderData();

  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState<{
    visible: boolean;
    data?: IInstitution;
  }>({ visible: false });

  const onDeleteInstitutionHandler = useCallback(
    () => setShowDeleteConfirmation({ visible: false }),
    []
  );

  const onEditHandle = useCallback(
    (row: TRow<IInstitution>) => navigate(`edit/${row.original.id}`),
    [navigate]
  );

  const onDeleteHandle = useCallback(
    (row: TRow<IInstitution>) => setShowDeleteConfirmation({ visible: true, data: row.original }),
    []
  );

  const tableColumns = useMemo(
    () => INSTITUTION_COLUMNS(onEditHandle, onDeleteHandle),
    [onDeleteHandle, onEditHandle]
  );

  const tableData = useMemo(() => institutions, [institutions]);

  return (
    <>
      <Outlet />
      <main>
        <Container fluid className="px-md-4">
          <Row className="mt-md-2 mb-md-2">
            <Col className="text-center">
              <h1>Manage Institutions</h1>
            </Col>
            <hr />
          </Row>
          <Row>
            <Col md={{ span: 1, offset: 8 }}>
              <Button variant="outline-success" onClick={() => navigate("new")}>
                <BsPlusSquareFill />
              </Button>
            </Col>
            {showDeleteConfirmation.visible && (
              <InstitutionDelete
                institutionData={showDeleteConfirmation.data!}
                onClose={onDeleteInstitutionHandler}
              />
            )}
          </Row>
          <Row>
            <Table
              data={tableData}
              columns={tableColumns}
              showColumnFilter={false}
              columnVisibility={{ id: false }}
              tableSize={{ span: 6, offset: 3 }}
            />
          </Row>
        </Container>
      </main>
    </>
  );
};

export async function loadInstitutions() {
  const institutionsResponse = await axiosClient.get("/institutions");
  return await institutionsResponse.data;
}

export default Institutions;

================
File: src/pages/Participants/Participant.tsx
================
import { Row as TRow } from "@tanstack/react-table";
import Table from "components/Table/Table";
import useAPI from "hooks/useAPI";
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { Button, Col, Container, Row } from "react-bootstrap";
import { BsPersonFillAdd } from "react-icons/bs";
import { useDispatch, useSelector } from "react-redux";
import { Outlet, useLocation, useNavigate } from "react-router-dom";
import { alertActions } from "store/slices/alertSlice";
import { RootState } from "../../store/store";
import { IParticipantResponse, ROLE } from "../../utils/interfaces";
import DeleteParticipant from "./ParticipantDelete";
import { participantColumns as PARPTICIPANT_COLUMNS } from "./participantColumns";

/**
 * @author Atharva Thorve on October, 2023
 */

interface IModel {
  type: "student_tasks" | "courses"|"assignments";
  id: Number;
}

const Participants: React.FC<IModel> = ({ type, id }) => {
  const { error, isLoading, data: participantResponse, sendRequest: fetchParticipants } = useAPI();
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();

  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState<{
    visible: boolean;
    data?: IParticipantResponse;
  }>({ visible: false });

  useEffect(() => {
    if (!showDeleteConfirmation.visible) fetchParticipants({ url: `/participants/${type}/${id}` });
  }, [fetchParticipants, location, showDeleteConfirmation.visible, auth.user.id, type, id]);

  // Error alert
  useEffect(() => {
    if (error) {
      dispatch(alertActions.showAlert({ variant: "danger", message: error }));
    }
  }, [error, dispatch]);

  const onDeleteParticipantHandler = useCallback(() => setShowDeleteConfirmation({ visible: false }), []);

  const onEditHandle = useCallback(
    (row: TRow<IParticipantResponse>) => navigate(`/${type}/participant/edit/${row.original.id}`),
    [navigate, type]
  );

  const onDeleteHandle = useCallback(
    (row: TRow<IParticipantResponse>) => setShowDeleteConfirmation({ visible: true, data: row.original }),
    []
  );

  const tableColumns = useMemo(
    () => PARPTICIPANT_COLUMNS(onEditHandle, onDeleteHandle),
    [onDeleteHandle, onEditHandle]
  );

  const tableData = useMemo(
    () => (isLoading || !participantResponse?.data ? [] : participantResponse.data),
    [participantResponse?.data, isLoading]
  );

  return (
    <>
      <Outlet />
      <main>
        <Container fluid className="px-md-4">
          <Row className="mt-md-2 mb-md-2">
            <Col className="text-center">
              <h1>Manage Participants</h1>
            </Col>
            <hr />
          </Row>
          <Row>
            <Col md={{ span: 1, offset: 11 }}>
              <Button variant="outline-success" onClick={() => navigate("new")}>
                <BsPersonFillAdd />
              </Button>
            </Col>
            {showDeleteConfirmation.visible && (
              <DeleteParticipant participantData={showDeleteConfirmation.data!} onClose={onDeleteParticipantHandler} />
            )}
          </Row>
          <Row>
            <Table
              data={tableData}
              columns={tableColumns}
              columnVisibility={{
                id: false,
                institution: auth.user.role === ROLE.SUPER_ADMIN.valueOf(),
              }}
            />
          </Row>
        </Container>
      </main>
    </>
  );
};

export default Participants;

================
File: src/pages/Participants/participantColumns.tsx
================
import { createColumnHelper, Row } from "@tanstack/react-table";
import { Button } from "react-bootstrap";
import { BsPencilFill, BsPersonXFill } from "react-icons/bs";
import { IParticipantResponse as IParticipant } from "../../utils/interfaces";

/**
 * @author Divit Kalathil on October, 2023
 */

type Fn = (row: Row<IParticipant>) => void;
const columnHelper = createColumnHelper<IParticipant>();
export const participantColumns = (handleEdit: Fn, handleDelete: Fn) => [
  columnHelper.accessor("id", {
    header: "Id",
    enableColumnFilter: false,
    enableSorting: false,
  }),

  columnHelper.accessor("name", {
    header: "Participant Name",
    enableSorting: true,
  }),

  columnHelper.accessor("full_name", {
    header: "Full Name",
    enableSorting: true,
    enableMultiSort: true,
  }),

  columnHelper.accessor("email", {
    header: "Email",
  }),

  columnHelper.accessor("role.name", {
    id: "role",
    header: "Role",
    enableColumnFilter: false,
  }),

  columnHelper.accessor("parent.name", {
    id: "parent",
    header: "Parent",
    enableColumnFilter: false,
  }),

  columnHelper.group({
    id: "email_preferences",
    header: "Email Preferences",
    columns: [
      columnHelper.accessor("email_on_review", {
        header: "Review",
        enableSorting: false,
        enableColumnFilter: false,
        enableGlobalFilter: false,
      }),
      columnHelper.accessor("email_on_submission", {
        header: "Submission",
        enableSorting: false,
        enableColumnFilter: false,
        enableGlobalFilter: false,
      }),
      columnHelper.accessor("email_on_review_of_review", {
        header: "Meta Review",
        enableSorting: false,
        enableColumnFilter: false,
        enableGlobalFilter: false,
      }),
    ],
  }),
  columnHelper.accessor("institution.name", {
    id: "institution",
    header: "Institution",
    enableColumnFilter: false,
  }),
  columnHelper.display({
    id: "actions",
    header: "Actions",
    cell: ({ row }) => (
      <>
        <Button variant="outline-warning" size="sm" onClick={() => handleEdit(row)}>
          <BsPencilFill />
        </Button>
        <Button
          variant="outline-danger"
          size="sm"
          className="ms-sm-2"
          onClick={() => handleDelete(row)}
        >
          <BsPersonXFill />
        </Button>
      </>
    ),
  }),
];

================
File: src/pages/Participants/ParticipantDelete.tsx
================
import React, { useEffect, useState } from "react";
import { Button, Modal } from "react-bootstrap";
import { useDispatch } from "react-redux";
import { alertActions } from "store/slices/alertSlice";
import { HttpMethod } from "utils/httpMethods";
import useAPI from "../../hooks/useAPI";
import { IParticipantResponse as IParticipant } from "../../utils/interfaces";

/**
 * @author Atharva Thorve on October, 2023
 */

interface IDeleteParticipant {
  participantData: IParticipant;
  onClose: () => void;
}

const DeleteParticipant: React.FC<IDeleteParticipant> = ({ participantData, onClose }) => {
  const { data: deletedParticipant, error: participantError, sendRequest: deleteParticipant } = useAPI();
  const [show, setShow] = useState<boolean>(true);
  const dispatch = useDispatch();

  // Delete user
  const deleteHandler = () =>
    deleteParticipant({ url: `/participants/${participantData.id}`, method: HttpMethod.DELETE });

  // Show error if any
  useEffect(() => {
    if (participantError) dispatch(alertActions.showAlert({ variant: "danger", message: participantError }));
  }, [participantError, dispatch]);

  // Close modal if user is deleted
  useEffect(() => {
    if (deletedParticipant?.status && deletedParticipant?.status >= 200 && deletedParticipant?.status < 300) {
      setShow(false);
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `User ${participantData.name} deleted successfully!`,
        })
      );
      onClose();
    }
  }, [deletedParticipant?.status, dispatch, onClose, participantData.name]);

  const closeHandler = () => {
    setShow(false);
    onClose();
  };

  return (
    <Modal show={show} onHide={closeHandler}>
      <Modal.Header closeButton>
        <Modal.Title>Delete Participant</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>
          Are you sure you want to delete participant <b>{participantData.name}?</b>
        </p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="outline-secondary" onClick={closeHandler}>
          Cancel
        </Button>
        <Button variant="outline-danger" onClick={deleteHandler}>
          Delete
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default DeleteParticipant;

================
File: src/pages/Participants/ParticipantEditor.tsx
================
import FormCheckBoxGroup from "components/Form/FormCheckBoxGroup";
import FormInput from "components/Form/FormInput";
import FormSelect from "components/Form/FormSelect";
import { Form, Formik, FormikHelpers } from "formik";
import useAPI from "hooks/useAPI";
import React, { useEffect } from "react";
import { Button, Col, InputGroup, Modal, Row } from "react-bootstrap";
import { useDispatch, useSelector } from "react-redux";
import { useLoaderData, useLocation, useNavigate } from "react-router-dom";
import { alertActions } from "store/slices/alertSlice";
import { HttpMethod } from "utils/httpMethods";
import * as Yup from "yup";
import { RootState } from "../../store/store";
import { ROLE } from "../../utils/interfaces";
import { IParticipantFormValues, emailOptions, transformParticipantRequest } from "./participantUtil";
/**
 * @author Mrityunjay Joshi on October, 2023
 */

const initialValues: IParticipantFormValues = {
  name: "",
  email: "",
  firstName: "",
  lastName: "",
  role_id: -1,
  institution_id: -1,
  emailPreferences: [],
};

interface IParticipantEditor {
  mode: "create" | "update";
  type: string;
}

const validationSchema = Yup.object({
  name: Yup.string()
    .required("Required")
    .matches(/^[a-z]+$/, "Name must be in lowercase")
    .min(3, "Name must be at least 3 characters")
    .max(20, "Name must be at most 20 characters"),
  email: Yup.string().required("Required").email("Invalid email format"),
  firstName: Yup.string().required("Required").nonNullable(),
  lastName: Yup.string().required("Required").nonNullable(),
  role_id: Yup.string().required("Required").nonNullable(),
  institution_id: Yup.string().required("Required").nonNullable(),
});

const ParticipantEditor: React.FC<IParticipantEditor> = ({ mode, type }) => {
  const { data: participantResponse, error: participantError, sendRequest } = useAPI();
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const { participantData, roles, institutions }: any = useLoaderData();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();

  // logged-in participant is the parent of the participant being created and the institution is the same as the parent's
  initialValues.parent_id = auth.user.id;
  initialValues.institution_id = auth.user.institution_id;

  // Close the modal if the participant is updated successfully and navigate to the participants page
  useEffect(() => {
    if (participantResponse && participantResponse.status >= 200 && participantResponse.status < 300) {
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Participant ${participantData.name} ${mode}d successfully!`,
        })
      );
      navigate(location.state?.from ? location.state.from : `/${type}/participants`);
    }
  }, [dispatch, mode, navigate, participantData.name, participantResponse, location.state?.from, type]);

  // Show the error message if the participant is not updated successfully
  useEffect(() => {
    participantError && dispatch(alertActions.showAlert({ variant: "danger", message: participantError }));
  }, [participantError, dispatch]);

  const onSubmit = (values: IParticipantFormValues, submitProps: FormikHelpers<IParticipantFormValues>) => {
    let method: HttpMethod = HttpMethod.POST;
    let url: string = "/participants";

    if (mode === "update") {
      url = `/participants/${values.id}`;
      method = HttpMethod.PATCH;
    }

    // to be used to display message when participant is created
    participantData.name = values.name;
    sendRequest({
      url: url,
      method: method,
      data: values,
      transformRequest: transformParticipantRequest,
    });
    submitProps.setSubmitting(false);
  };

  const handleClose = () => navigate(location.state?.from ? location.state.from : `/${type}/participants`);  

  return (
    <Modal size="lg" centered show={true} onHide={handleClose} backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>{mode === "update" ? "Update Participant" : "Create Participant"}</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {participantError && <p className="text-danger">{participantError}</p>}
        <Formik
          initialValues={mode === "update" ? participantData : initialValues}
          onSubmit={onSubmit}
          validationSchema={validationSchema}
          validateOnChange={false}
          enableReinitialize={true}
        >
          {(formik) => {
            return (
              <Form>
                <FormSelect
                  controlId="participant-role"
                  name="role_id"
                  options={roles}
                  inputGroupPrepend={<InputGroup.Text id="role-prepend">Role</InputGroup.Text>}
                />
                <FormInput
                  controlId="participant-name"
                  label="Participant Name"
                  name="name"
                  disabled={mode === "update"}
                  inputGroupPrepend={<InputGroup.Text id="participant-name-prep">@</InputGroup.Text>}
                />
                <Row>
                  <FormInput
                    as={Col}
                    controlId="participant-first-name"
                    label="First name"
                    name="firstName"
                  />
                  <FormInput
                    as={Col}
                    controlId="participant-last-name"
                    label="Last name"
                    name="lastName"
                  />
                </Row>
                <FormInput controlId="participant-email" label="Email" name="email" />
                <FormCheckBoxGroup
                  controlId="email-pref"
                  label="Email Preferences"
                  name="emailPreferences"
                  options={emailOptions}
                />
                <FormSelect
                  controlId="participant-institution"
                  name="institution_id"
                  disabled={mode === "update" || auth.user.role !== ROLE.SUPER_ADMIN.valueOf()}
                  options={institutions}
                  inputGroupPrepend={
                    <InputGroup.Text id="participant-inst-prep">Institution</InputGroup.Text>
                  }
                />
                <Modal.Footer>
                  <Button variant="outline-secondary" onClick={handleClose}>
                    Close
                  </Button>

                  <Button
                    variant="outline-success"
                    type="submit"
                    disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting}
                  >
                    {mode === "update" ? "Update Participant" : "Create Participant"}
                  </Button>
                </Modal.Footer>
              </Form>
            );
          }}
        </Formik>
      </Modal.Body>
    </Modal>
  );
};

export default ParticipantEditor;

================
File: src/pages/Participants/participantUtil.ts
================
import { IFormOption } from "components/Form/interfaces";
import axiosClient from "../../utils/axios_client";
import { IInstitution, IParticipantRequest, IParticipantResponse, IRole } from "../../utils/interfaces";

/**
 * @author Divit Kalathil on October, 2023
 */

export enum EmailPreference {
  EMAIL_ON_REVIEW = "email_on_review",
  EMAIL_ON_SUBMISSION = "email_on_submission",
  EMAIL_ON_META_REVIEW = "email_on_review_of_review",
}

type PermittedEmailPreferences =
  | EmailPreference.EMAIL_ON_REVIEW
  | EmailPreference.EMAIL_ON_SUBMISSION
  | EmailPreference.EMAIL_ON_META_REVIEW;

export interface IParticipantFormValues {
  id?: number;
  name: string;
  email: string;
  firstName: string;
  lastName: string;
  role_id: number;
  parent_id?: number | null;
  institution_id: number;
  emailPreferences: Array<PermittedEmailPreferences>;
}

export const emailOptions: IFormOption[] = [
  { label: "When someone else reviews my work", value: EmailPreference.EMAIL_ON_REVIEW },
  {
    label: "When someone else submits work I am assigned to review",
    value: EmailPreference.EMAIL_ON_SUBMISSION,
  },
  {
    label: "When someone else reviews one of my reviews (meta-reviews my work)",
    value: EmailPreference.EMAIL_ON_META_REVIEW,
  },
];

export const transformInstitutionsResponse = (institutionsList: string) => {
  let institutionsData: IFormOption[] = [{ label: "Select an Institution", value: "" }];
  let institutions: IInstitution[] = JSON.parse(institutionsList);
  institutions.forEach((institution) =>
    institutionsData.push({ label: institution.name, value: institution.id! })
  );
  return institutionsData;
};

export const transformRolesResponse = (rolesList: string) => {
  let rolesData: IFormOption[] = [{ label: "Select a Role", value: "" }];
  let roles: IRole[] = JSON.parse(rolesList);
  roles.forEach((role) => rolesData.push({ label: role.name, value: role.id! }));
  return rolesData;
};

export const transformParticipantRequest = (values: IParticipantFormValues) => {
  // const parent_id = values.parent_id ? values.parent_id : null;
  const participant: IParticipantRequest = {
    name: values.name,
    email: values.email,
    role_id: values.role_id,
    parent_id: values.parent_id,
    institution_id: values.institution_id,
    full_name: values.lastName + ", " + values.firstName,
    email_on_review: values.emailPreferences.includes(EmailPreference.EMAIL_ON_REVIEW),
    email_on_submission: values.emailPreferences.includes(EmailPreference.EMAIL_ON_SUBMISSION),
    email_on_review_of_review: values.emailPreferences.includes(
      EmailPreference.EMAIL_ON_META_REVIEW
    ),
  };
  return JSON.stringify(participant);
};

export const transformParticipantResponse = (participantResponse: string) => {
  const participant: IParticipantResponse = JSON.parse(participantResponse);
  const parent_id = participant.parent.id ? participant.parent.id : null;
  const institution_id = participant.institution.id ? participant.institution.id : -1;
  const participantValues: IParticipantFormValues = {
    id: participant.id,
    name: participant.name,
    email: participant.email,
    firstName: participant.full_name.split(",")[1].trim(),
    lastName: participant.full_name.split(",")[0].trim(),
    role_id: participant.role.id,
    parent_id: parent_id,
    institution_id: institution_id,
    emailPreferences: [],
  };
  if (participant.email_on_review) {
    participantValues.emailPreferences.push(EmailPreference.EMAIL_ON_REVIEW);
  }
  if (participant.email_on_submission) {
    participantValues.emailPreferences.push(EmailPreference.EMAIL_ON_SUBMISSION);
  }
  if (participant.email_on_review_of_review) {
    participantValues.emailPreferences.push(EmailPreference.EMAIL_ON_META_REVIEW);
  }
  return participantValues;
};

export async function loadParticipantDataRolesAndInstitutions({ params }: any) {
  let participantData = {};
  // if params contains id, then we are editing a participant, so we need to load the participant data
  if (params.id) {
    const participantResponse = await axiosClient.get(`/participants/${params.id}`, {
      transformResponse: transformParticipantResponse,
    });
    participantData = await participantResponse.data;
  }
  const institutionsResponse = await axiosClient.get("/institutions", {
    transformResponse: transformInstitutionsResponse,
  });
  const rolesResponse = await axiosClient.get("/roles/subordinate_roles", {
    transformResponse: transformRolesResponse,
  });

  const institutions = await institutionsResponse.data;
  const roles = await rolesResponse.data;
  return { participantData, roles, institutions };
}

================
File: src/pages/Profile/Edit.css
================
/* Styles for the edit form container */
.edit-form-container {
  max-width: 95%;
  margin: 20px 0 0 20px;
  padding: 10px 40px 40px 40px;
  background-color: #ffffff;
}

/* Styles for form fields */
.form-field {
  margin-bottom: 20px;
  display: flex; /* Use flexbox */
  align-items: center; /* Align items vertically */
}

/* Styles for form field labels */
.form-field label {
  flex-basis: 22%;
  color: #333;
  font-size: 14px;
}

/* Styles for input fields */
.form-field input[type="text"],
.form-field input[type="password"],
.form-field input[type="email"],
.form-field select {
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 25%;
  box-sizing: border-box;
  font-size: 14px;
}

/* Styles for buttons */
.form-field button {
  color: #6c757d;
  cursor: pointer;
  background-color: transparent;
  border: #6c757d 1px solid;
  padding: 4px 10px;
  border-radius: 6px;
}

/* Styles for button hover state */
.form-field button:hover {
  background-color: white !important;
}

/* Styles for button hover state */
.form-field button:hover {
  background-color: #0056b3;
}

/* Styles for h2 user profile */
.h2-user-profile {
  margin-bottom: 40px;
}

/* Styles for email options container */
.email-options-container {
  position: relative;
  padding-right: 20px;
  margin-bottom: 20px;
}

/* Styles for email options header */
.email-options-container .email-options-header {
  display: block;
  margin-bottom: 0;
}

/* Styles for email options heading */
.email-options-container .email-options-heading {
  font-weight: bold;
  display: block;
}

/* Styles for email instructions */
.email-options-container .email-instructions {
  display: block;
  text-align: left;
  margin-top: 5px;
  margin-bottom: 10px;
}

/* Ensure checkboxes are stacked vertically below the instruction */
.email-options-container .checkbox-group {
  display: block;
  padding-top: 20px;
}

/* Styles for individual checkbox labels */
.email-options-container .checkbox-group label {
  display: block;
  margin-bottom: 5px;
}

/* Styles for checkbox inputs */
.email-options-container .checkbox-group label input[type="checkbox"] {
  margin-right: 10px;
}

/* Styles for italics */
.italics > p {
  font-style: italic;
  font-size: 11px;
  margin-top: 12px;
  margin-bottom: 8px;
}

/* Styles for custom column flex */
.custom-column-flex {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: start;
}

================
File: src/pages/Profile/Edit.tsx
================
import React from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import './Edit.css'; // Importing custom CSS styles
import { Button } from 'react-bootstrap'; // Importing Button component from react-bootstrap

// Define initial form values and validation schema using Yup
const Edit: React.FC = () => {
  const initialValues = {
    fullName: 'Admin',
    password: '',
    confirmPassword: '',
    email: '',
    institution: 'Other',
    actionPreference: 'cannotShowActions',
    handle: '',
    timeZone: 'GMT-05:00',
    language: 'No Preference',
    emailOptions: {
      reviewNotification: true,
      submissionNotification: true,
      metaReviewNotification: true,
    },
  };

  const validationSchema = Yup.object().shape({
    fullName: Yup.string().required('Full name is required'),
    password: Yup.string().required('Password is required'),
    confirmPassword: Yup.string()
      .oneOf([Yup.ref('password')], 'Passwords must match')
      .required('Confirm Password is required'),
    email: Yup.string().email('Invalid email address').required('Email is required'),
    handle: Yup.string().required('Handle is required'),
  });

  // Handle form submission
  const handleSubmit = (values: any, { setSubmitting }: any) => {
    setTimeout(() => {
      alert(JSON.stringify(values, null, 2)); // Display form values as JSON
      setSubmitting(false);
    }, 400);
  };

  return (
    <div className="edit-form-container"> {/* Container for the entire form */}
      <h2 className='h2-user-profile'>User Profile Information</h2> {/* Heading for user profile */}
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ isSubmitting }) => ( // Formik render prop function
          <Form> {/* Form component */}
            {/* Form fields with labels, inputs, and error messages */}
            <div className="form-field">
              <label htmlFor="fullName" style={{ fontWeight: 800 }}>Full name (last, first[middle]):</label>
              <Field type="text" name="fullName" />
              <ErrorMessage name="fullName" component="div" className="error-message" />
            </div>

            {/* Password and Confirm Password fields with validation */}
            <div className="form-field">
              <label htmlFor="password">Password:</label>
              <Field type="password" name="password" />
              <ErrorMessage name="password" component="div" className="error-message" />
            </div>

            <div className="form-field">
              <label htmlFor="confirmPassword">Confirm your password:</label>
              <Field type="password" name="confirmPassword" />
              <ErrorMessage name="confirmPassword" component="div" className="error-message" />
            </div>

            {/* Note regarding password field */}
            <div className='italics'>
              <p>If password field is blank, the password will not be updated</p>
            </div>

            {/* Email field */}
            <div className="form-field">
              <label htmlFor="email" style={{ fontWeight: 800 }}>E-mail address:</label>
              <Field type="email" name="email" />
              <ErrorMessage name="email" component="div" className="error-message" />
            </div>

            {/* Institution field */}
            <div className="form-field">
              <label htmlFor="institution" style={{ fontWeight: 800 }}>Institution:</label>
              <Field as="select" name="institution">
                <option value="Other">Other</option>
                <option value="North Carolina State University">North Carolina State University</option>
                <option value="Duke University">Duke University</option>
                <option value="Purdue University">Purdue University</option>
                <option value="UT Austin">UT Austin</option>
              </Field>
            </div>

            {/* Action Preference radio buttons */}
            <div className="form-field action-preference custom-column-flex">
              <label style={{ fontWeight: 800 }}>Action Preference:</label>
              <div className="radio-group">
                <label style={{ marginRight: 8 }}>
                  <Field type="radio" name="actionPreference" value="canShowActions" />
                  Homepage can show actions
                </label>
                <label>
                  <Field type="radio" name="actionPreference" value="cannotShowActions" />
                  Homepage cannot show actions
                </label>
              </div>
              <ErrorMessage name="actionPreference" component="div" className="error-message" />
            </div>

            <hr /> {/* Horizontal rule for visual separation */}

            {/* Handle field with instructions */}
            <div className='custom-column-flex'>
              <label style={{ fontWeight: 800 }}>Handle</label>
              <div>A "handle" can be used to conceal your username from people who view your wiki pages. If you have a handle, your wiki account should be named after your handle instead of after your user-ID. If you do not have a handle, your Expertiza user-ID will be used instead. A blank entry in the field below will cause the handle to be set back to your Expertiza user-ID. <div style={{ marginTop: -12 }}><br /></div>
                Note: By using this form, you are changing your default handle, which will be used for all future assignments. To change your handle for a specific assignment, select that assignment and choose the Change Handle action.</div>
            </div>

            {/* Handle input field */}
            <div className="form-field" style={{ marginTop: 28 }}>
              <label htmlFor="handle">Default Handle:</label>
              <Field type="text" name="handle" />
              <ErrorMessage name="handle" component="div" className="error-message" />
            </div>

            {/* Email Options checkboxes */}
            <div className="email-options-container">
              <div className="email-options-header">
                <label className="email-options-heading">Email Options:</label>
                <p className="email-instructions">Check the boxes representing the times when you want to receive e-mail.</p>
              </div>
              <div className="checkbox-group">
                <label>
                  <Field type="checkbox" name="emailOptions.reviewNotification" />
                  When someone else reviews my work
                </label>
                <label>
                  <Field type="checkbox" name="emailOptions.submissionNotification" />
                  When someone else submits work I am assigned to review
                </label>
                <label>
                  <Field type="checkbox" name="emailOptions.metaReviewNotification" />
                  When someone else reviews one of my reviews (meta-reviews my work)
                </label>
              </div>
            </div>

            {/* Preferred Time Zone field */}
            <div className="form-field">
              <label htmlFor="timeZone">Preferred Time Zone:</label>
              <Field as="select" name="timeZone">
                <option value="GMT-05:00">GMT-05:00 Eastern Time (US)</option>
                <option value="GMT+01:00">GMT+01:00 Berlin</option>
                <option value="GMT-07:00">GMT-07:00 Arizona (US)</option>
              </Field>
            </div>

            {/* Preferred Language field */}
            <div className="form-field">
              <label htmlFor="language">Preferred Language:</label>
              <Field as="select" name="language">
                <option value="No Preference">No Preference</option>
                <option value="English">English</option>
                <option value="Hindi">Hindi</option>
              </Field>
              
            </div>

            {/* Submit button */}
            <div className="form-field">
              <Button type="submit" disabled={isSubmitting} variant="outline-success">
                Save
              </Button>
            </div>
          </Form>
        )}
      </Formik>
    </div>
  );
};

export default Edit;

================
File: src/pages/ProjectTopics/ProjectTopics.css
================
.project-topics {
    padding: 1rem;
  }
  
  .topics-header {
    margin-bottom: 1.5rem;
  }
  
  .search-container {
    position: relative;
    margin-bottom: 1rem;
  }
  
  .search-input {
    width: 100%;
    padding: 0.5rem;
    padding-left: 2rem;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
  }
  
  .search-icon {
    position: absolute;
    left: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
  }
  
  .topics-table {
    width: 100%;
    margin-bottom: 1rem;
    border-collapse: separate;
    border-spacing: 0;
  }
  
  .topics-table th,
  .topics-table td {
    padding: 0.75rem;
    vertical-align: top;
    border-top: 1px solid #dee2e6;
  }
  
  .topics-table th {
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    font-weight: 500;
  }
  
  .topics-table tbody tr:hover {
    background-color: rgba(0, 0, 0, 0.075);
  }
  
  .topic-name {
    font-weight: 500;
  }
  
  .assigned-user {
    font-size: 0.875rem;
    color: #6c757d;
    margin-top: 0.25rem;
  }
  
  .status-check {
    color: #28a745;
  }
  
  .status-x {
    color: #dc3545;
  }
  
  .loading-spinner {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
  }
  
  .table-container {
    overflow-x: auto;
  }
  
  @media (max-width: 768px) {
    .project-topics {
      padding: 0.5rem;
    }
    
    .topics-table th,
    .topics-table td {
      padding: 0.5rem;
    }
  }

================
File: src/pages/ProjectTopics/ProjectTopics.tsx
================
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Alert, Form } from 'react-bootstrap';
import Table from "../../components/Table/Table";
import { createColumnHelper, ColumnDef } from "@tanstack/react-table";
import './ProjectTopics.css';

// Define interfaces
interface Topic {
  id: number;
  topic_identifier: string;
  name: string;
  description: string;
  max_choosers: number;
  available_slots: number;
  waitlist_count: number;
  category: string;
  assigned_users: AssignedUser[];
}

interface AssignedUser {
  name: string;
  status: boolean;
}

interface Assignment {
  id: number;
  name: string;
}

// Mock data
const mockAssignments: Assignment[] = [
  { id: 1, name: "OSS project & documentation" },
  { id: 2, name: "Final Project" }
];

const mockTopics: Topic[] = [
  {
    id: 1,
    topic_identifier: "E2100",
    name: "Tagging report for students",
    description: "Implement tagging functionality for student reports",
    max_choosers: 1,
    available_slots: 0,
    waitlist_count: 0,
    category: "Enhancement",
    assigned_users: [
      { name: "smdupor jmhurst jcui9", status: false }
    ]
  },
  {
    id: 2,
    topic_identifier: "E2101",
    name: "Refactor questionnaires_controller.rb",
    description: "Code refactoring task",
    max_choosers: 1,
    available_slots: 0,
    waitlist_count: 0,
    category: "Refactoring",
    assigned_users: [
      { name: "jpvillam jwhostet wnsaid", status: false }
    ]
  },
  {
    id: 3,
    topic_identifier: "E2102",
    name: "Refactor quiz_questionnaires_controller.rb",
    description: "Code refactoring for quiz module",
    max_choosers: 1,
    available_slots: 0,
    waitlist_count: 0,
    category: "Refactoring",
    assigned_users: [
      { name: "nnhimes smaktha", status: false }
    ]
  },
  {
    id: 4,
    topic_identifier: "E2103",
    name: "Refactor response_controller.rb",
    description: "Refactoring response handling",
    max_choosers: 1,
    available_slots: 0,
    waitlist_count: 0,
    category: "Refactoring",
    assigned_users: [
      { name: "jchinch akashya3 zpparks", status: false }
    ]
  }
];

const ProjectTopics: React.FC = () => {
  const [selectedAssignment, setSelectedAssignment] = useState<number | null>(null);
  const [topics, setTopics] = useState<Topic[]>(mockTopics); // Initialize with mock data
  const [selectedTopics, setSelectedTopics] = useState<number[]>([]);

  useEffect(() => {
    if (selectedAssignment) {
      // Filter topics based on selected assignment (in real app, this would be an API call)
      const filteredTopics = mockTopics.filter(topic => topic.max_choosers > 0);
      setTopics(filteredTopics);
    }
  }, [selectedAssignment]);

  const handleSelectionChange = (selectedData: Record<string, any>[]) => {
    const selectedIds = selectedData.map(item => item.id);
    setSelectedTopics(selectedIds);
  };

  // Custom rendering for status indicators
  const renderStatus = (status: boolean) => (
    <span className={status ? 'status-check' : 'status-x'}>
      {status ? '✓' : '✗'}
    </span>
  );

  const columnHelper = createColumnHelper<Topic>();

  const columns: ColumnDef<Topic, any>[] = [
    columnHelper.accessor('topic_identifier', {
      header: 'Topic ID',
      cell: info => info.getValue(),
    }),
    columnHelper.accessor('name', {
      header: 'Topic name(s)',
      cell: info => (
        <div>
          <div className="topic-name">
            {info.getValue()}
            {renderStatus(true)}
          </div>
          {info.row.original.assigned_users.map((user: AssignedUser, idx: number) => (
            <div key={idx} className="assigned-user">
              {user.name} {renderStatus(user.status)}
            </div>
          ))}
        </div>
      ),
    }),
    columnHelper.accessor('max_choosers', {
      header: 'Num. of slots',
      cell: info => info.getValue(),
    }),
    columnHelper.accessor('available_slots', {
      header: 'Available slots',
      cell: info => info.getValue(),
    }),
    columnHelper.accessor('waitlist_count', {
      header: 'Num. on waitlist',
      cell: info => info.getValue(),
    }),
  ];

  return (
    <Container fluid className="project-topics">
      <div className="topics-header">
        <h1>Project Topics</h1>
        
        <Row className="mb-3">
          <Col md={6}>
            <Form.Select
              value={selectedAssignment || ''}
              onChange={(e) => setSelectedAssignment(Number(e.target.value))}
            >
              <option value="">Select an assignment</option>
              {mockAssignments.map(assignment => (
                <option key={assignment.id} value={assignment.id}>
                  {assignment.name}
                </option>
              ))}
            </Form.Select>
          </Col>
        </Row>
      </div>

      <div className="table-container">
        <Table
          data={topics}
          columns={columns}
          showGlobalFilter={true}
          onSelectionChange={handleSelectionChange}
        />
      </div>
    </Container>
  );
};

export default ProjectTopics;

================
File: src/pages/Questionnaire/dummyData.json
================
[
    {
      "name": "Review",
      "creationDate": "2023-01-10",
      "updatedDate": "2023-01-15"
    },
    {
      "name": "Metareview",
      "creationDate": "2023-02-05",
      "updatedDate": "2023-02-10"
    },
    {
      "name": "Author Feedback",
      "creationDate": "2023-03-20",
      "updatedDate": "2023-03-25"
    },
    {
      "name": "Teammate Review",
      "creationDate": "2023-04-15",
      "updatedDate": "2023-04-20"
    },
    {
      "name": "Assignment Survey",
      "creationDate": "2023-05-01",
      "updatedDate": "2023-05-06"
    },
    {
      "name": "Global Survey",
      "creationDate": "2023-06-10",
      "updatedDate": "2023-06-15"
    },
    {
      "name": "Course Survey",
      "creationDate": "2023-07-20",
      "updatedDate": "2023-07-25"
    },
    {
      "name": "Bookmark Rating",
      "creationDate": "2023-08-05",
      "updatedDate": "2023-08-10"
    }
  ]

================
File: src/pages/Questionnaire/Questionnaire.css
================
.questionnaire-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    min-height: 100vh;
    padding-top: 20px; /* Add padding to the top */
  }
  .questionnaire-table {
    border-collapse: collapse;
    width: 70%; /* Adjust the width as needed */
    margin-top: 20px; /* Add some spacing from the button and label */
  }
  
  .questionnaire-table th, .questionnaire-table td {
    border: 1px solid #ccc;
    padding: 8px;
    text-align: left;
  }
  
  .questionnaire-table th {
    background-color: #f2f2f2;
  }
  
  .questionnaire-table tr:nth-child(even) {
    background-color: #f2f2f2;
  }
  
  .questionnaire-table tr:hover {
    background-color: #ddd;
  }
  .centered-table {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    height: 100%;
  }

================
File: src/pages/Questionnaire/questionnaire.tsx
================
import React, { useState } from 'react';
import './Questionnaire.css';
import {Button} from "react-bootstrap";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTrash, faPencilAlt, faEye } from '@fortawesome/free-solid-svg-icons';
import dummyData from './dummyData.json';
import {BsPencilFill, BsPersonXFill} from "react-icons/bs";
import {BiCopy}from "react-icons/bi";
import { BsPlusSquareFill } from "react-icons/bs";


function Questionnaire() {
  const [showOnlyMyItems, setShowOnlyMyItems] = useState(true);
  const [expandedItem, setExpandedItem] = useState<number | null>(null);
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc' | 'default' | null>(null);

  const questionnaireItems = dummyData; // Use dummy data for items

  const handleAddButtonClick = () => {
    console.log('Add button clicked');
    // Add your logic for adding questionnaire items here
  };
  type QuestionnaireItem = {
    name: string;
    creationDate: string;
    updatedDate: string;
    };
  

  const handleItemClick = (index: number) => {
    if (expandedItem === index) {
      setExpandedItem(null);
    } else {
      setExpandedItem(index);
    }
  };

  const handleDelete = (item: QuestionnaireItem) => {
    console.log(`Delete button clicked for item:`, item);
    // Add your logic for deleting the item here
  };

  const handleEdit = (item: QuestionnaireItem) => {
    console.log(`Edit button clicked for item:`, item);
    // Add your logic for editing the item here
  };

  const handleShow = (item: QuestionnaireItem) => {
    console.log(`Show button clicked for item:`, item);
    // Add your logic for showing the item here
  };

  const handleSortByName = () => {
    if (sortOrder === 'asc') {
      setSortOrder('desc');
    } else {
      setSortOrder('asc');
    }
  };

  const sortedQuestionnaireItems = [...questionnaireItems];

  if (sortOrder === 'asc') {
    sortedQuestionnaireItems.sort();
  } else if (sortOrder === 'desc') {
    sortedQuestionnaireItems.sort().reverse();
  }

  return (
    <div className="questionnaire-container">
      <h1>Questionnaire List</h1>
      <button onClick={handleAddButtonClick}>Add</button>

      <br />

      <label>
        <input
          type="checkbox"
          checked={showOnlyMyItems}
          onChange={() => setShowOnlyMyItems(!showOnlyMyItems)}
        />
        Display my items only
      </label>

      <table className="questionnaire-table">
        <thead>
          <tr>
            <th onClick={handleSortByName}>
              Name {sortOrder === 'asc' && '↑'} {sortOrder === 'desc' && '↓'} {sortOrder === null && '↑↓'}
            </th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          {sortedQuestionnaireItems.map((item, index) => (
            <React.Fragment key={index}>
              <tr>
                <td onClick={() => handleItemClick(index)}>{item.name}</td>
                <td>
                
                <Button variant="outline-success" onClick={() => handleAddButtonClick}>
                <BsPlusSquareFill />
              </Button>
                  
                </td>
              </tr>
              {expandedItem === index && (
  <tr className="expanded-row">
    <td colSpan={4}>
      <table className='expanded-row centered-table'>
        <tbody>
          <tr>
            <th><strong>Name:</strong></th>
            
           
          
            <th><strong>Creation Date:</strong></th>
           
          
            <th><strong>Updated Date:</strong></th>
            
          
            <th><strong>Actions:</strong></th>
            
            
          </tr>
          <tr> <td>{item.name}</td>
            <td>{item.creationDate}</td>
            <td>{item.updatedDate}</td>
            <td>
            
            <Button
          variant="outline-danger"
          size="sm"
          className="ms-sm-2"
          onClick={() => handleDelete(item)}
        >
          <BsPersonXFill />
        </Button>
              <span className="icon-space"></span>
              <Button variant="outline-warning" size="sm" onClick={() => handleEdit(item)}>
          <BsPencilFill />
        </Button>
        
              <span className="icon-space"></span>
              
              <Button variant="outline-warning" size="sm" onClick={() => handleShow(item)}>
          <BiCopy />
        </Button>
              
            </td>

          </tr>
        </tbody>
      </table>
    </td>
  </tr>
)}
            </React.Fragment>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Questionnaire;

================
File: src/pages/Reviews/reviewData.ts
================
export interface ReviewItem {
  id: number;
  question: string;
  score: number;
  comment: string;
}

interface Reviews {
  [key: string]: ReviewItem[];
}

const reviews : Reviews = {
  "1": [
    {
      id: 1,
      question: 'The code is written in a clean and readable way. (Mention any relevant details.) [Max points: 5]',
      score: 5,
      comment: 'The code has a clear structure with appropriate indentation and spacing. It is easy to visually parse and understand the code\'s flow. There are appropriate comments where expected\n\nJust one negative point: Quite a lot dead(commented out) code is present. This could have been removed in a refactor',
    },
    {
      id: 2,
      question: 'Each method is performing only one task. (One method should only handle one task, if there are multiple tasks, there should be function calls. Mention any relevant details.) [Max points: 5]',
      score: 5,
      comment: 'They managed task organization very well by providing distinctive methods to implement various functionalities within their code logic.',
    },
    {
      id: 3,
      question: 'Variable and method names are indicative of what the variables are storing/handling. (Mention any relevant details.) [Max points: 5]',
      score: 5,
      comment: 'They provided indictive way of using variable and method names here in the code for instance they used date, category, price_min, price_max, event_name which follows perfect naming convention for storing and handling the necessary data.',
    },
    {
      id: 4,
      question: 'Commit messages are indicative of what changes were made in the commit. (Mention any relevant details.) [Max points: 5]',
      score: 3,
      comment: 'Most of the messages are good, but there are some commits which add multiple unrelated changes and their message is not clearly indicative of the change.\n\nFor example: "Added Room Booking Part" has a lot of file changes, and it is not clear if the commit added event creation or ticket booking feature.',
    },
    {
      id: 5,
      question: 'This system works as it is supposed to. (If you found any problems in the first round, did the authors fix them? Comment on any functionality that is still failing.) [Max points: 5]',
      score: 3,
      comment: 'Some issues mentioned in round 1 that were not fixed:\n1) URL manipulation:\nI was able to edit the review written by another attendee by manipulating the URL\nI was able to delete a room as an attendee\n\n2) In ReviewIndex view, filtering is done based on user email. But user email is not visible in each review, hence it is not clear if the filter was succesfully applied\n\n3) The project document mentions that every instance of event ticket must have its own confirmation number. But when I purchase bulk tickets, all of them are having the same confirmation number',
    },
    {
      id: 6,
      question: 'This team made commits in round 2.',
      score: 0,
      comment: 'No, the team did not made any commits in the second round',
    },
    {
      id: 7,
      question: 'The README file contains all the information needed, and the code is well documented, with adequate comments to explain the coding. [Max points: 5]',
      score: 5,
      comment: 'The README is exceptionally detailed and contains all the required information. Great job!',
    },
    {
      id: 8,
      question: 'Has the testing been done properly for at least one model? [Max points: 5]',
      score: 5,
      comment: 'They did testing perfectly well for two models here for both admin and user modal tests',
    },
    {
      id: 9,
      question: 'Has the testing been done properly for at least one controller? [Max points: 5]',
      score: 5,
      comment: 'Thorough testing has been conducted on three key controllers: admins_controller, home_controller, and users_controller',
    },
  ],
  "2": [
    {
      id: 1,
      question: 'Each method is performing only one task. (One method should only handle one task, if there are multiple tasks, there should be function calls. Mention any relevant details.) [Max points: 5]',
      score: 5,
      comment: '',
    },
  ],
};

const feedbacks : Reviews = {
  "1": [
    {
      id: 1,
      question: 'This reviewer appeared to understand my work. [Max points: 5]',
      score: 5,
      comment: 'Yes, the reviewer understood the work correctly',
    },
    {
      id: 2,
      question: 'This reviewer\'s comments helped me improve my work. [Max points: 5]',
      score: 5,
      comment: 'Yes, the reviewers comment helped me to improve my work.',
    },
    {
      id: 3,
      question: 'The tone of this review was respectful [Max points: 5]',
      score: 5,
      comment: 'Yes, the tone was good',
    },
    ]
};



export const getReviewItems = (setId: string): ReviewItem[] => {
  return reviews[setId] || [];
};

export const getFeedbackItems = (setId: string): ReviewItem[] => {
  return feedbacks[setId] || [];
};

================
File: src/pages/Reviews/Reviews.css
================
.centered-container {
    width: 80%;
    margin: 0 auto;
    text-align: center;
    align-items: center;
}

.side-by-side-container {
    display: flex;
    justify-content: center;
}
  
.action-container {
    flex: 1;
    justify-content: left;
}

.score-comment-wrapper {
    display: flex;
    align-items: center;
}

.trash-link-wrapper {
    display: flex;
    align-items: center;
}

.trash-button {
    margin-right: 10px;
}
  
.score {
    width: 30px; /* Adjust width as needed */
    height: 30px; /* Adjust height as needed */
    border-radius: 50%; /* Makes the shape a circle */
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: 10px; /* Adjust margin between score and comment */
}

.comment {
    flex: 1; /* Allows the comment to take up remaining space */
    margin: 0; /* Remove default margin */
}

.reviewTable {
    text-align: left;
}

.tableTitle {
    text-align: center;
}

.deleteButton {
    padding-right: 10px;
    padding-bottom: 10px;
    padding-top: 10px;
}

.tableButton {
    display: inline-block;
    text-align: left;
    padding-right: 10px;
    padding-bottom: 10px;
    padding-top: 10px;
}

================
File: src/pages/Reviews/reviews.tsx
================
import { Table } from "react-bootstrap";
import React, { useCallback, useEffect, useMemo, useState } from "react";
import "./Reviews.css";
import { useNavigate } from "react-router-dom";
import { getReviewItems, getFeedbackItems, ReviewItem } from "./reviewData"; // Import function and interface

import { Row, Col, Button, Modal } from "react-bootstrap";
import { BsEnvelopeFill, BsEyeFill, BsEyeSlashFill, BsShareFill, BsTrashFill, BsCheck, BsX, BsFileEarmarkArrowUp} from "react-icons/bs";

type HandleMethod = () => void;

const Reviews: React.FC = () => {
  const [showReview, setShowReview] = useState<boolean>(true);
  const [showReviewSecond, setShowReviewSecond] = useState<boolean>(true);
  const [showSubmissions, setshowSubmissions] = useState<boolean>(true);

  const navigate = useNavigate();
  const [reviewSetId, setReviewSetId] = useState<string>("1"); // Default set ID
  const [reviewItems, setReviewItems] = useState<ReviewItem[]>([]);
  const [feedbackItems, setFeedbackItems] = useState<ReviewItem[]>([]);
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);

  const [showWarning, setShowWarning] = useState(false);
  const [warningSuccessFunc, setWarningSuccessFunc] = useState<HandleMethod | null>(null);
  const [warningPrompt, setWarningPrompt] = useState<string>("");
  const fileInputRef = React.useRef<HTMLInputElement>(null);

  const handleShowWarning = (promptText: string, customFn?: HandleMethod) => {
    setWarningPrompt(promptText);
    setShowWarning(true);
    if (customFn) {
      setWarningSuccessFunc(() => customFn);
    }
  };

  const handleCloseWarning = () => {
    setShowWarning(false);
    setWarningSuccessFunc(null);
    setWarningPrompt("");
  };

  const handleCancelWarning = () => {
    setShowWarning(false);
    setWarningSuccessFunc(null);
    setWarningPrompt("");
  };

  const handleConfirmWarning = () => {
    if (warningSuccessFunc) {
      warningSuccessFunc();
    }
    setShowWarning(false);
    setWarningSuccessFunc(null);
    setWarningPrompt("");
  };

  const [links, setLinks] = useState([
    "https://github.ncsu.edu/npatil2/CSC517_Program2",
    "http://152.7.177.84:8080/"
  ]);

  const removeLink = (index: number) => {
    setLinks(prevLinks => prevLinks.filter((_, i) => i !== index));
  }

  useEffect(() => {
    console.log('Component mounted or reviewSetId changed');
    const items = getReviewItems(reviewSetId);
    const feedback = getFeedbackItems(reviewSetId);
    setReviewItems(items);
    setFeedbackItems(feedback);
  }, [reviewSetId]);  // Make sure reviewSetId is managed correctly

  if (!reviewItems.length) {
    console.log('No review items to display');
    return <div>No reviews available.</div>;
  }

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const fileList = Array.from(files); // Convert FileList to array
      setSelectedFiles(prevFiles => [...prevFiles, ...fileList]);
      event.target.value = ''; // Allowing for duplicate files
    }
  };

  const handleRemoveFile = (index: number) => {
    setSelectedFiles(prevFiles => prevFiles.filter((_, i) => i !== index));
  };

  const handleShareReview = () => {
    console.log("Handle Share Review");
  };

  const getScoreColor = (score: number) => {
    switch (score) {
      case 5:
        return 'green';
      case 4:
        return 'lightgreen';
      case 3:
        return 'yellow';
      case 2:
        return 'orange';
      case 1:
        return 'pink';
      case 0:
        return 'red';
      default:
        return 'black';
    }
  };

  const handleFileUploadButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="centered-container">
      <h1>Review for Program 2</h1>
      <br/>
      <Modal show={showWarning} onHide={handleCloseWarning}>
        <Modal.Header closeButton>
          <Modal.Title>Warning!</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {warningPrompt}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="danger" onClick={handleCancelWarning}>
            <BsX />
          </Button>
          <Button variant="success" onClick={handleConfirmWarning}>
            <BsCheck />
          </Button>
        </Modal.Footer>
      </Modal>
      
      <Row className="side-by-side-container">
        <Col xs={12} md={6} className="action-container">
          <Row className="reviewTable">
            <Col xs={12}>
              <div className="tableButton">
                <Button title="Toggle Visibility" onClick={() => setshowSubmissions(!showSubmissions)}>
                  {showSubmissions ? <BsEyeFill /> : <BsEyeSlashFill />}
                  {showSubmissions  ? <span style={{ paddingLeft: "5px" }}>Hide Links</span> :
                    <span style={{ paddingLeft: "5px" }}>Show Links</span>}
                </Button>
              </div>

            </Col>
          </Row>
          <Table striped bordered>
            <tbody>
              <tr>
                <td>
                  <h4>Link Submissions</h4>
                </td>
              </tr>
              {showSubmissions && (
                links.map((item, index) => (
                  <tr key={index}>
                    <td>
                      <div className="trash-link-wrapper">
                        <div className="trash-button">
                          <Button size="sm" title="Remove Link" variant="danger" onClick={
                            () => handleShowWarning(`Are you sure you want to remove the link '${item}'?`, () => removeLink(index))
                          }>
                            <BsTrashFill />
                          </Button>
                        </div>
                        
                        <a href={item}>{item}</a>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </Table>
        </Col>

        <Col xs={12} md={6} className="action-container">
          <Row className="reviewTable">
            <Col xs={12}>
              
              <div className="tableButton">
                  <input
                    type="file"
                    onChange={handleFileSelect}
                    style={{ display: 'none' }} // Hide the default file input
                    ref={fileInputRef}
                  />
                <Button variant="info" title="Submit File" onClick={handleFileUploadButtonClick}>
                  <BsFileEarmarkArrowUp />
                  <span style={{ paddingLeft: "5px" }}>Submit File</span>
                </Button>
              </div>
            </Col>
          </Row>
          <Table striped bordered>
            <thead>
              <tr>
                <th colSpan={3} style={{backgroundColor:"##f2f2f2"}}><h4 >File Submissions</h4></th>
              </tr>
              <tr>
                <th>File Name</th>
                <th>File Size</th>
                <th>File Type</th>
              </tr>
            </thead>
            <tbody>
            {
              selectedFiles.map((item, index) => (
                <tr key={index}>
                  <td>
                    <div className="trash-link-wrapper">
                      <div className="trash-button">
                        <Button size="sm" title="Remove File" variant="danger" onClick={
                          () => handleShowWarning(`Are you sure you want to remove the file '${item.name}'?`, () => handleRemoveFile(index))
                        }>
                          <BsTrashFill />
                        </Button>
                      </div>

                      {item.name}
                    </div>
                  </td>
                  <td>
                    {item.size}
                  </td>
                  <td>
                    {item.type}
                  </td>
                </tr>
              ))
            }
            </tbody>
          </Table>
        </Col>
      </Row>

      <Row className="reviewTable">
        <Col xs={12}>
          <div className="tableButton">
            <Button title="Toggle Visibility" onClick={() => setShowReview(!showReview)}>
              {showReview ? <BsEyeFill /> : <BsEyeSlashFill />}
              {showReview ? <span style={{ paddingLeft: "5px" }}>Hide Review</span> :
                <span style={{ paddingLeft: "5px" }}>Show Review</span>}

            </Button>
          </div>

          <div className="tableButton">
            <Button title="Email Author" variant="warning" onClick={() => navigate("../email_the_author")}>
              <BsEnvelopeFill />
              <span style={{ paddingLeft: "5px" }}>Email Author </span>
            </Button>
          </div>

          <div className="tableButton">
            <Button title="Share My Review" variant="info" onClick={
              () => handleShowWarning("Your review may now be available for other students to view. Are you sure?", () => handleShareReview)
            }>
              <BsShareFill /> <span style={{ paddingLeft: "5px" }}>Share My Review </span>
            </Button>
          </div>

        </Col>
        <span style={{ textAlign: "right" }}><strong>Last Reviewed:</strong> Sunday February 25 2024, 08:27PM</span>
      </Row>

      <Row className="reviewTable">
        <Col xs={12}>
          <Table striped bordered>
            <tbody>
              <tr>
                <td>
                  <h3 className="tableTitle">Software Engineering and Testing</h3>
                </td>
              </tr>
              {showReview && (
                reviewItems.map((item) => (
                  <tr key={item.id}>
                    <div style={{background: item.id % 2 == 0 ? "#D9EDF7" : "#FCF8E3"}}>
                      <td>
                        <h5><span>{item.id}. {item.question}</span></h5>
                        <div className="score-comment-wrapper">
                          <span className="score" style={{ backgroundColor: getScoreColor(item.score) }}>
                            {`${item.score}`}
                          </span>
                          <p className="comment" style={{padding:"10px"}}>{item.comment}</p>
                        </div>
                      </td>
                    </div>
                  </tr>
                ))
              )}
            </tbody>
          </Table>
        </Col>
      </Row>
      <br/>
      <br/>
      <br/>

      <Row className="reviewTable">

        <div className="tableButton">
          <Button title="Toggle Visibility" onClick={() => setShowReviewSecond(!showReviewSecond)}>
            {showReviewSecond ? <BsEyeFill /> : <BsEyeSlashFill />}
            {showReviewSecond ? <span style={{ paddingLeft: "5px" }}>Hide Review</span> :
              <span style={{ paddingLeft: "5px" }}>Show Review</span>}

          </Button>
        </div>

        <span style={{ textAlign: "right" }}><strong>Last Reviewed:</strong> Sunday February 25 2024, 08:27PM</span>
      </Row>
      <Row className="reviewTable">
        <Col xs={12}>
          <Table striped bordered>
            <tbody>
            <tr>
              <td>
                <h3 className="tableTitle">FeedBack from the Author</h3>
              </td>
            </tr>
            {showReviewSecond && (
              feedbackItems.map((item) => (
                <tr key={item.id}>
                <div style={{background: item.id % 2 == 0 ? "#D9EDF7" : "#FCF8E3"}}>
                    <td>
                      <h5><span>{item.id}. {item.question}</span></h5>
                      <div className="score-comment-wrapper">
                          <span className="score" style={{ backgroundColor: getScoreColor(item.score) }}>
                            {`${item.score}`}
                          </span>
                        <p className="comment" style={{padding:"10px"}}>{item.comment}</p>
                      </div>
                    </td>
                  </div>
                </tr>
              ))
            )}
            </tbody>
          </Table>
        </Col>
      </Row>
    </div>
  );
};

export default Reviews;

================
File: src/pages/Roles/roleColumns.tsx
================
import {createColumnHelper, Row} from "@tanstack/react-table";
import {MdOutlineDeleteForever as Remove} from "react-icons/md";
import {BsPencilFill as Edit} from "react-icons/bs";
import {Button} from "react-bootstrap";
import {IRole} from "../../utils/interfaces";

/**
 * @author Ankur Mundra on June, 2023
 */

type Fn = (row: Row<IRole>) => void;
const columnHelper = createColumnHelper<IRole>();
export const roleColumns = (handleEdit: Fn, handleDelete: Fn) => [
  columnHelper.accessor("id", {
    header: "Id",
    enableColumnFilter: false,
    enableSorting: false,
  }),

  columnHelper.accessor("name", {
    header: "Role Name",
    enableSorting: true,
  }),

  columnHelper.accessor("parent_id", {
    header: "Parent Id",
    enableSorting: true,
    enableColumnFilter: false,
  }),
  columnHelper.display({
    id: "actions",
    header: "Actions",
    cell: ({ row }) => (
      <>
        <Button variant="outline-warning" size="sm" onClick={() => handleEdit(row)}>
          <Edit />
        </Button>
        <Button
          size="sm"
          variant="outline-danger"
          className="ms-sm-2"
          onClick={() => handleDelete(row)}
        >
          <Remove />
        </Button>
      </>
    ),
  }),
];

================
File: src/pages/Roles/RoleDelete.tsx
================
import React, {useEffect, useState} from "react";
import {Button, Modal} from "react-bootstrap";
import {useDispatch} from "react-redux";
import {alertActions} from "store/slices/alertSlice";
import {HttpMethod} from "utils/httpMethods";
import useAPI from "../../hooks/useAPI";
import {IRole} from "../../utils/interfaces";

/**
 * @author Ankur Mundra on June, 2023
 */

interface IDeleteRole {
  roleData: IRole;
  onClose: () => void;
}

const DeleteRole: React.FC<IDeleteRole> = ({ roleData, onClose }) => {
  const { data: response, error: roleError, sendRequest: deleteRole } = useAPI();
  const [show, setShow] = useState<boolean>(true);
  const dispatch = useDispatch();

  // Delete user
  const deleteHandler = () =>
    deleteRole({ url: `/roles/${roleData.id}`, method: HttpMethod.DELETE });

  // Show error if any
  useEffect(() => {
    if (roleError) dispatch(alertActions.showAlert({ variant: "danger", message: roleError }));
  }, [roleError, dispatch]);

  // Close modal if user is deleted
  useEffect(() => {
    if (response?.status && response?.status >= 200 && response?.status < 300) {
      setShow(false);
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Role: ${roleData.name} deleted successfully!`,
        })
      );
      onClose();
    }
  }, [response?.status, dispatch, onClose, roleData.name]);

  const closeHandler = () => {
    setShow(false);
    onClose();
  };

  return (
    <Modal show={show} onHide={closeHandler}>
      <Modal.Header closeButton>
        <Modal.Title>Delete Role</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>
          Are you sure you want to delete role <b>{roleData.name}?</b>
        </p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="outline-secondary" onClick={closeHandler}>
          Cancel
        </Button>
        <Button variant="outline-danger" onClick={deleteHandler}>
          Delete
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default DeleteRole;

================
File: src/pages/Roles/RoleEditor.tsx
================
import React, { useEffect } from "react";
import { Form, Formik, FormikHelpers } from "formik";
import { Button, InputGroup, Modal } from "react-bootstrap";
import FormInput from "components/Form/FormInput";
import { alertActions } from "store/slices/alertSlice";
import { useDispatch } from "react-redux";
import { useNavigate, useRouteLoaderData } from "react-router-dom";
import { HttpMethod } from "utils/httpMethods";
import useAPI from "hooks/useAPI";
import * as Yup from "yup";
import axiosClient from "../../utils/axios_client";
import { IEditor, IRole } from "../../utils/interfaces";
import FormSelect from "../../components/Form/FormSelect";
import { transformRolesResponse } from "../Users/userUtil";

/**
 * @author Ankur Mundra on June, 2023
 */

const initialValues: IRole = {
  name: "",
  parent_id: -1,
};

const validationSchema = Yup.object({
  name: Yup.string()
    .required("Required")
    .min(3, "Institution name must be at least 3 characters")
    .max(16, "Institution name must be at most 16 characters"),
});

const RoleEditor: React.FC<IEditor> = ({ mode }) => {
  const { data: roleResponse, error, sendRequest } = useAPI();
  const availableRoles = transformRolesResponse(JSON.stringify(useRouteLoaderData("roles")));
  const role: any = useRouteLoaderData("edit-role");
  const dispatch = useDispatch();
  const navigate = useNavigate();

  // Close the modal if the role is updated successfully and navigate to the institutions page
  useEffect(() => {
    if (roleResponse && roleResponse.status >= 200 && roleResponse.status < 300) {
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `Role ${mode}d successfully!`,
        })
      );
      navigate("/administrator/roles");
    }
  }, [dispatch, mode, navigate, roleResponse]);

  // Show the error message if the role is not updated successfully
  useEffect(() => {
    error && dispatch(alertActions.showAlert({ variant: "danger", message: error }));
  }, [error, dispatch]);

  const onSubmit = (values: IRole, submitProps: FormikHelpers<IRole>) => {
    let method: HttpMethod = HttpMethod.POST;
    let url: string = "/roles";

    if (mode === "update") {
      url = `/roles/${values.id}`;
      method = HttpMethod.PATCH;
    }

    sendRequest({
      url: url,
      method: method,
      data: values,
    });
    submitProps.setSubmitting(false);
  };

  const handleClose = () => navigate("/administrator/roles");

  return (
    <Modal size="lg" centered show={true} onHide={handleClose} backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>{mode === "update" ? "Update " : "Create "}Role</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {error && <p className="text-danger">{error}</p>}
        <Formik
          initialValues={mode === "update" ? role : initialValues}
          onSubmit={onSubmit}
          validationSchema={validationSchema}
          validateOnChange={false}
          enableReinitialize={true}
        >
          {(formik) => {
            return (
              <Form>
                <FormInput controlId="role-name" label="Role Name" name="name" />
                <FormSelect
                  controlId="role-parent"
                  name="parent_id"
                  options={availableRoles}
                  inputGroupPrepend={<InputGroup.Text id="role-p-prepend">Parent</InputGroup.Text>}
                />
                <Modal.Footer>
                  <Button variant="outline-secondary" onClick={handleClose}>
                    Close
                  </Button>
                  <Button
                    variant="outline-success"
                    type="submit"
                    disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting}
                  >
                    {mode === "update" ? "Update " : "Create "}Role
                  </Button>
                </Modal.Footer>
              </Form>
            );
          }}
        </Formik>
      </Modal.Body>
    </Modal>
  );
};

export async function loadAvailableRole({ params }: any) {
  const roleResponse = await axiosClient.get(`roles/${params.id}`);
  return await roleResponse.data;
}

export default RoleEditor;

================
File: src/pages/Roles/Roles.tsx
================
import { useCallback, useMemo, useState } from "react";
import { Outlet, useLoaderData, useNavigate } from "react-router-dom";
import { Button, Col, Container, Row } from "react-bootstrap";
import { Row as TRow } from "@tanstack/react-table";
import Table from "components/Table/Table";
import axiosClient from "../../utils/axios_client";
import { BsPlusSquareFill } from "react-icons/bs";
import { IRole } from "../../utils/interfaces";
import { roleColumns as ROLE_COLUMNS } from "./roleColumns";
import DeleteRole from "./RoleDelete";

/**
 * @author Ankur Mundra on June, 2023
 */

const Roles = () => {
  const navigate = useNavigate();
  const roles: any = useLoaderData();

  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState<{
    visible: boolean;
    data?: IRole;
  }>({ visible: false });

  const onDeleteRoleHandler = useCallback(() => setShowDeleteConfirmation({ visible: false }), []);

  const onEditHandle = useCallback(
    (row: TRow<IRole>) => navigate(`edit/${row.original.id}`),
    [navigate]
  );

  const onDeleteHandle = useCallback(
    (row: TRow<IRole>) => setShowDeleteConfirmation({ visible: true, data: row.original }),
    []
  );

  const tableColumns = useMemo(
    () => ROLE_COLUMNS(onEditHandle, onDeleteHandle),
    [onDeleteHandle, onEditHandle]
  );
  const tableData = useMemo(() => roles, [roles]);

  return (
    <>
      <Outlet />
      <main>
        <Container fluid className="px-md-4">
          <Row className="mt-md-2 mb-md-2">
            <Col className="text-center">
              <h1>Manage Roles</h1>
            </Col>
            <hr />
          </Row>
          <Row className="mb-1">
            <Col md={{ span: 1, offset: 8 }}>
              <Button variant="outline-success" onClick={() => navigate("new")}>
                <BsPlusSquareFill />
              </Button>
            </Col>
            {showDeleteConfirmation.visible && (
              <DeleteRole roleData={showDeleteConfirmation.data!} onClose={onDeleteRoleHandler} />
            )}
          </Row>
          <Row>
            <Table
              data={tableData}
              columns={tableColumns}
              tableSize={{ span: 6, offset: 3 }}
              showColumnFilter={false}
              showPagination={false}
            />
          </Row>
        </Container>
      </main>
    </>
  );
};

export async function loadRoles() {
  const rolesResponse = await axiosClient.get("/roles");
  return await rolesResponse.data;
}

export default Roles;

================
File: src/pages/TA/TA.tsx
================
// Importing necessary interfaces and modules

import { Row as TRow } from "@tanstack/react-table";
import Table from "components/Table/Table";
import useAPI from "hooks/useAPI";
import { useCallback, useEffect, useMemo, useState } from "react";
import { Button, Col, Container, Modal, Row } from "react-bootstrap";
import { BsPersonFillAdd } from "react-icons/bs";
import { useDispatch, useSelector } from "react-redux";
import { Outlet, useLocation, useNavigate, useParams } from "react-router-dom";
import { alertActions } from "store/slices/alertSlice";
import { RootState } from "../../store/store";
import { ITAResponse, ROLE } from "../../utils/interfaces";
import { TAColumns as TA_COLUMNS } from "./TAColumns";
import DeleteTA from "./TADelete";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Divit Kalathil, on December, 2023
 */
const TAs = () => {
  const { error, isLoading, data: TAResponse, sendRequest: fetchTAs } = useAPI();
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();
  const params = useParams();

  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState<{
    visible: boolean;
    data?: ITAResponse;
  }>({ visible: false });

  useEffect(() => {
    const { courseId } = params;
    // ToDo: This API in the backend is not working properly needs to be fixed.
    if (!showDeleteConfirmation.visible) fetchTAs({ url: `/courses/${courseId}/tas` });
  }, [fetchTAs, location, showDeleteConfirmation.visible, auth.user.id, params]);

  // Error alert
  useEffect(() => {
    if (error) {
      dispatch(alertActions.showAlert({ variant: "danger", message: error }));
    }
  }, [error, dispatch]);

  const onDeleteTAHandler = useCallback(() => setShowDeleteConfirmation({ visible: false }), []);

  const onDeleteHandle = useCallback(
    (row: TRow<ITAResponse>) => setShowDeleteConfirmation({ visible: true, data: row.original }),
    []
  );

  const tableColumns = useMemo(
    () => TA_COLUMNS(onDeleteHandle),
    [onDeleteHandle]
  );

  const tableData = useMemo(
    () => (isLoading || !TAResponse?.data ? [] : TAResponse.data),
    [TAResponse?.data, isLoading]
  );

  const handleClose = () => navigate(location.state?.from ? location.state.from : "/courses");

  return (
    // Unable to use fullscreen modal with proper size breakdowns since the react-bootstrap version is below 5.
    // Therefore the max size is at xl.
    // ToDo: After dependency has been updated do change the size of the Modal.
    <Modal size="xl" centered show={true} onHide={handleClose} backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>Manage TAs</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Outlet />
        <main>
          <Container fluid className="px-md-4">
            <Row className="mt-md-2 mb-md-2">
              <Col className="text-center">
                <h1>Manage TAs</h1>
              </Col>
              <hr />
            </Row>
            <Row>
              <Col md={{ span: 1, offset: 11 }} style={{paddingBottom: "10px"}}>
                <Button variant="outline-success" onClick={() => navigate("new")}>
                  <BsPersonFillAdd />
                </Button>
              </Col>
              {showDeleteConfirmation.visible && (
                <DeleteTA TAData={showDeleteConfirmation.data!} onClose={onDeleteTAHandler} />
              )}
            </Row>
            <Row>
              <Table
                showGlobalFilter={false}
                data={tableData}
                columns={tableColumns}
                columnVisibility={{
                  id: false,
                  institution: auth.user.role === ROLE.SUPER_ADMIN.valueOf(),
                }}
              />
            </Row>
          </Container>
        </main>
      </Modal.Body>
    </Modal>
  );
};

export default TAs;

================
File: src/pages/TA/TAColumns.tsx
================
// Importing necessary interfaces and modules
import { createColumnHelper, Row } from "@tanstack/react-table";
import { Button } from "react-bootstrap";
import { BsPersonXFill } from "react-icons/bs";
import { ITAResponse as ITA } from "../../utils/interfaces";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Divit Kalathil, on December, 2023
 */

type Fn = (row: Row<ITA>) => void;
const columnHelper = createColumnHelper<ITA>();
export const TAColumns = (handleDelete: Fn) => [
  columnHelper.accessor("id", {
    header: "Id",
    enableColumnFilter: false,
    enableSorting: false,
  }),
  //create TA Name column Header
  columnHelper.accessor("name", {
    header: "TA Name",
    enableSorting: true,
  }),
  //create Full TA Name column Header
  columnHelper.accessor("full_name", {
    header: "Full Name",
    enableSorting: true,
    enableMultiSort: true,
  }),
  //create Email column Header
  columnHelper.accessor("email", {
    header: "Email",
  }),

  columnHelper.display({
    id: "actions",
    header: "Actions",
    cell: ({ row }) => (
      <>
        <Button
          variant="outline-danger"
          size="sm"
          className="ms-sm-2"
          onClick={() => handleDelete(row)}
        >
          <BsPersonXFill />
        </Button>
      </>
    ),
  }),
];

================
File: src/pages/TA/TADelete.tsx
================
// Importing necessary interfaces and modules
import React, { useEffect, useState } from "react";
import { Button, Modal } from "react-bootstrap";
import { useDispatch } from "react-redux";
import { useParams } from "react-router";
import { alertActions } from "store/slices/alertSlice";
import { HttpMethod } from "utils/httpMethods";
import useAPI from "../../hooks/useAPI";
import { ITAResponse as ITA } from "../../utils/interfaces";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Divit Kalathil, on December, 2023
 */

interface IDeleteTA {
  TAData: ITA;
  onClose: () => void;
}

const DeleteTA: React.FC<IDeleteTA> = ({ TAData, onClose }) => {
  const { data: deletedTA, error: TAError, sendRequest: deleteTA } = useAPI();
  const [show, setShow] = useState<boolean>(true);
  const dispatch = useDispatch();
  const params = useParams();

  // Delete TA
  const deleteHandler = () => {
    const { courseId } = params;
    deleteTA({ url: `/courses/${courseId}/TAs/${TAData.id}`, method: HttpMethod.DELETE });
  };

  // Show error if any
  useEffect(() => {
    if (TAError) dispatch(alertActions.showAlert({ variant: "danger", message: TAError }));
  }, [TAError, dispatch]);

  // Close modal if TA is deleted
  useEffect(() => {
    if (deletedTA?.status && deletedTA?.status >= 200 && deletedTA?.status < 300) {
      setShow(false);
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `TA ${TAData.name} deleted successfully!`,
        })
      );
      onClose();
    }
  }, [deletedTA?.status, dispatch, onClose, TAData.name]);

  const closeHandler = () => {
    setShow(false);
    onClose();
  };

  // Pop-up Function to delete TA
  return (
    <Modal show={show} onHide={closeHandler}>
      <Modal.Header closeButton>
        <Modal.Title>Delete TA</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>
          Are you sure you want to delete TA <b>{TAData.name}?</b>
        </p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="outline-secondary" onClick={closeHandler}>
          Cancel
        </Button>
        <Button variant="outline-danger" onClick={deleteHandler}>
          Delete
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default DeleteTA;

================
File: src/pages/TA/TAEditor.tsx
================
// Importing necessary interfaces and modules
import FormSelect from "components/Form/FormSelect";
import { Form, Formik, FormikHelpers } from "formik";
import useAPI from "hooks/useAPI";
import React, { useEffect } from "react";
import { Button, InputGroup, Modal } from "react-bootstrap";
import { useDispatch } from "react-redux";
import { useLoaderData, useLocation, useNavigate, useParams } from "react-router-dom";
import { alertActions } from "store/slices/alertSlice";
import { HttpMethod } from "utils/httpMethods";
import * as Yup from "yup";
import { IEditor } from "../../utils/interfaces";
import { ITAFormValues, transformTARequest } from "./TAUtil";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Divit Kalathil, on December, 2023
 */

const initialValues: ITAFormValues = {
  name: "",
};

const validationSchema = Yup.object({
  name: Yup.string().required("Required").nonNullable(),
});

const TAEditor: React.FC<IEditor> = ({ mode }) => {
  const { data: TAResponse, error: TAError, sendRequest } = useAPI();
  const TAData = { ...initialValues };

  // Load data from the server
  const { taUsers }: any = useLoaderData();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();
  const params = useParams();
  const { courseId } = params;

  // logged-in TA is the parent of the TA being created and the institution is the same as the parent's

  // Close the modal if the TA is updated successfully and navigate to the TAs page
  useEffect(() => {
    if (TAResponse && TAResponse.status >= 200 && TAResponse.status < 300) {
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `TA ${TAData.name} ${mode}d successfully!`,
        })
      );
      navigate(location.state?.from ? location.state.from : "/TAs");
    }
  }, [dispatch, mode, navigate, TAData.name, TAResponse, location.state?.from]);

  // Show the error message if the TA is not updated successfully
  useEffect(() => {
    TAError && dispatch(alertActions.showAlert({ variant: "danger", message: TAError }));
  }, [TAError, dispatch]);

  const onSubmit = (values: ITAFormValues, submitProps: FormikHelpers<ITAFormValues>) => {
    let method: HttpMethod = HttpMethod.GET;
    // ToDo: Need to create API in the backend for this call. 
    // Note: The current API needs the TA id to create a new TA which is incorrect and needs to be fixed. 
    // Currently we send the username of the user we want to add as the TA for the course.
    let url: string = `/courses/${courseId}/add_ta/${values.name}`;

    // to be used to display message when TA is created
    sendRequest({
      url: url,
      method: method,
      data: {},
      transformRequest: transformTARequest,
    });
    submitProps.setSubmitting(false);
  };

  const handleClose = () => navigate(location.state?.from ? location.state.from : `/courses/${courseId}/tas`);
  //Validation of TA Entry 
  return (
    <Modal size="lg" centered show={true} onHide={handleClose} backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>Add TA</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {TAError && <p className="text-danger">{TAError}</p>}
        <Formik
          initialValues={initialValues}
          onSubmit={onSubmit}
          validationSchema={validationSchema}
          validateOnChange={false}
          enableReinitialize={true}
        >
          {(formik) => {
            return (
              <Form>
                <FormSelect
                  controlId="TA-name"
                  label="Teaching Assistant Name"
                  name="name"
                  options={taUsers}
                  inputGroupPrepend={
                    <InputGroup.Text id="TA-name-prep">TA</InputGroup.Text>
                  }
                />
                <Modal.Footer>
                  <Button variant="outline-secondary" onClick={handleClose}>
                    Close
                  </Button>

                  <Button
                    variant="outline-success"
                    type="submit"
                    disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting}
                  >
                    "Add TA"
                  </Button>
                </Modal.Footer>
              </Form>
            );
          }}
        </Formik>
      </Modal.Body>
    </Modal>
  );
};

export default TAEditor;

================
File: src/pages/TA/TAUtil.ts
================
// Importing necessary interfaces and modules
import { IFormOption } from "components/Form/interfaces";
import axiosClient from "utils/axios_client";
import { ITA, ITARequest } from "../../utils/interfaces";

/**
 * @author Atharva Thorve, on December, 2023
 * @author Divit Kalathil, on December, 2023
 */

/**
 * ITAFormValues interface represents the shape of values in the TA form.
 */

export interface ITAFormValues {
  name: string;
}

export const transformTAResponse = (taList: string) => {
  let taData: IFormOption[] = [{ label: "Select a TA", value: "" }]; 
  let tas: ITA[] = JSON.parse(taList);
  tas.forEach((ta) => taData.push({ label: ta.name, value: ta.id! }));
  return taData;
}

export const transformTARequest = (values: ITAFormValues) => {
  // const parent_id = values.parent_id ? values.parent_id : null;
  const TA: ITARequest = {
    name: values.name,
  };
  return JSON.stringify(TA);
};
  // loadTAs function fetches the list of Teaching Assistants from the server.

export async function loadTAs({ params }: any) {
  // Making a GET request to fetch users with the "Teaching Assistant" role
  const taRoleUsersResponse = await axiosClient.get(`/users/role/Teaching Assistant`, {
    transformResponse: transformTAResponse
  });
  const taUsers = taRoleUsersResponse.data;

  return { taUsers };
}

================
File: src/pages/Users/User.tsx
================
import { Row as TRow } from "@tanstack/react-table";
import Table from "components/Table/Table";
import useAPI from "hooks/useAPI";
import { useCallback, useEffect, useMemo, useState } from "react";
import { Button, Col, Container, Row } from "react-bootstrap";
import { BsPersonFillAdd } from "react-icons/bs";
import { useDispatch, useSelector } from "react-redux";
import { Outlet, useLocation, useNavigate } from "react-router-dom";
import { alertActions } from "store/slices/alertSlice";
import { RootState } from "../../store/store";
import { IUserResponse, ROLE } from "../../utils/interfaces";
import DeleteUser from "./UserDelete";
import { userColumns as USER_COLUMNS } from "./userColumns";

/**
 * @author Ankur Mundra on April, 2023
 */
const Users = () => {
  const { error, isLoading, data: userResponse, sendRequest: fetchUsers } = useAPI();
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();

  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState<{
    visible: boolean;
    data?: IUserResponse;
  }>({ visible: false });

  useEffect(() => {
    if (!showDeleteConfirmation.visible) fetchUsers({ url: `/users/${auth.user.id}/managed` });
  }, [fetchUsers, location, showDeleteConfirmation.visible, auth.user.id]);

  // Error alert
  useEffect(() => {
    if (error) {
      dispatch(alertActions.showAlert({ variant: "danger", message: error }));
    }
  }, [error, dispatch]);

  const onDeleteUserHandler = useCallback(() => setShowDeleteConfirmation({ visible: false }), []);

  const onEditHandle = useCallback(
    (row: TRow<IUserResponse>) => navigate(`edit/${row.original.id}`),
    [navigate]
  );

  const onDeleteHandle = useCallback(
    (row: TRow<IUserResponse>) => setShowDeleteConfirmation({ visible: true, data: row.original }),
    []
  );

  const tableColumns = useMemo(
    () => USER_COLUMNS(onEditHandle, onDeleteHandle),
    [onDeleteHandle, onEditHandle]
  );

  const tableData = useMemo(
    () => (isLoading || !userResponse?.data ? [] : userResponse.data),
    [userResponse?.data, isLoading]
  );

  return (
    <>
      <Outlet />
      <main>
        <Container fluid className="px-md-4">
          <Row className="mt-md-2 mb-md-2">
            <Col className="text-center">
              <h1>Manage Users</h1>
            </Col>
            <hr />
          </Row>
          <Row>
            <Col md={{ span: 1, offset: 11 }}>
              <Button variant="outline-success" onClick={() => navigate("new")}>
                <BsPersonFillAdd />
              </Button>
            </Col>
            {showDeleteConfirmation.visible && (
              <DeleteUser userData={showDeleteConfirmation.data!} onClose={onDeleteUserHandler} />
            )}
          </Row>
          <Row>
            <Table
              data={tableData}
              columns={tableColumns}
              columnVisibility={{
                id: false,
                institution: auth.user.role === ROLE.SUPER_ADMIN.valueOf(),
              }}
            />
          </Row>
        </Container>
      </main>
    </>
  );
};

export default Users;

================
File: src/pages/Users/userColumns.tsx
================
import {createColumnHelper, Row} from "@tanstack/react-table";
import {Button} from "react-bootstrap";
import {BsPencilFill, BsPersonXFill} from "react-icons/bs";
import {IUserResponse as IUser} from "../../utils/interfaces";
/**
 * @author Ankur Mundra on April, 2023
 */

type Fn = (row: Row<IUser>) => void;
const columnHelper = createColumnHelper<IUser>();
export const userColumns = (handleEdit: Fn, handleDelete: Fn) => [
  columnHelper.accessor("id", {
    header: "Id",
    enableColumnFilter: false,
    enableSorting: false,
  }),

  columnHelper.accessor("name", {
    header: "Username",
    enableSorting: true,
  }),

  columnHelper.accessor("full_name", {
    header: "Full Name",
    enableSorting: true,
    enableMultiSort: true,
  }),

  columnHelper.accessor("email", {
    header: "Email",
  }),

  columnHelper.accessor("role.name", {
    id: "role",
    header: "Role",
    enableColumnFilter: false,
  }),

  columnHelper.accessor("parent.name", {
    id: "parent",
    header: "Parent",
    enableColumnFilter: false,
  }),

  columnHelper.group({
    id: "email_preferences",
    header: "Email Preferences",
    columns: [
      columnHelper.accessor("email_on_review", {
        header: "Review",
        enableSorting: false,
        enableColumnFilter: false,
        enableGlobalFilter: false,
      }),
      columnHelper.accessor("email_on_submission", {
        header: "Submission",
        enableSorting: false,
        enableColumnFilter: false,
        enableGlobalFilter: false,
      }),
      columnHelper.accessor("email_on_review_of_review", {
        header: "Meta Review",
        enableSorting: false,
        enableColumnFilter: false,
        enableGlobalFilter: false,
      }),
    ],
  }),
  columnHelper.accessor("institution.name", {
    id: "institution",
    header: "Institution",
    enableColumnFilter: false,
  }),
  columnHelper.display({
    id: "actions",
    header: "Actions",
    cell: ({ row }) => (
      <>
        <Button variant="outline-warning" size="sm" onClick={() => handleEdit(row)}>
          <BsPencilFill />
        </Button>
        <Button
          variant="outline-danger"
          size="sm"
          className="ms-sm-2"
          onClick={() => handleDelete(row)}
        >
          <BsPersonXFill />
        </Button>
      </>
    ),
  }),
];

================
File: src/pages/Users/UserDelete.tsx
================
import React, {useEffect, useState} from "react";
import {Button, Modal} from "react-bootstrap";
import {useDispatch} from "react-redux";
import {alertActions} from "store/slices/alertSlice";
import {HttpMethod} from "utils/httpMethods";
import useAPI from "../../hooks/useAPI";
import {IUserResponse as IUser} from "../../utils/interfaces";

/**
 * @author Ankur Mundra on April, 2023
 */

interface IDeleteUser {
  userData: IUser;
  onClose: () => void;
}

const DeleteUser: React.FC<IDeleteUser> = ({ userData, onClose }) => {
  const { data: deletedUser, error: userError, sendRequest: deleteUser } = useAPI();
  const [show, setShow] = useState<boolean>(true);
  const dispatch = useDispatch();

  // Delete user
  const deleteHandler = () =>
    deleteUser({ url: `/users/${userData.id}`, method: HttpMethod.DELETE });

  // Show error if any
  useEffect(() => {
    if (userError) dispatch(alertActions.showAlert({ variant: "danger", message: userError }));
  }, [userError, dispatch]);

  // Close modal if user is deleted
  useEffect(() => {
    if (deletedUser?.status && deletedUser?.status >= 200 && deletedUser?.status < 300) {
      setShow(false);
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `User ${userData.name} deleted successfully!`,
        })
      );
      onClose();
    }
  }, [deletedUser?.status, dispatch, onClose, userData.name]);

  const closeHandler = () => {
    setShow(false);
    onClose();
  };

  return (
    <Modal show={show} onHide={closeHandler}>
      <Modal.Header closeButton>
        <Modal.Title>Delete User</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>
          Are you sure you want to delete user <b>{userData.name}?</b>
        </p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="outline-secondary" onClick={closeHandler}>
          Cancel
        </Button>
        <Button variant="outline-danger" onClick={deleteHandler}>
          Delete
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

export default DeleteUser;

================
File: src/pages/Users/UserEditor.tsx
================
import React, { useEffect } from "react";
import { emailOptions, IUserFormValues, transformUserRequest } from "./userUtil";
import { Form, Formik, FormikHelpers } from "formik";
import { Button, Col, InputGroup, Modal, Row } from "react-bootstrap";
import FormCheckBoxGroup from "components/Form/FormCheckBoxGroup";
import FormInput from "components/Form/FormInput";
import FormSelect from "components/Form/FormSelect";
import { alertActions } from "store/slices/alertSlice";
import { useDispatch, useSelector } from "react-redux";
import { useLoaderData, useLocation, useNavigate } from "react-router-dom";
import { HttpMethod } from "utils/httpMethods";
import useAPI from "hooks/useAPI";
import * as Yup from "yup";
import { IEditor, ROLE } from "../../utils/interfaces";
import { RootState } from "../../store/store";

/**
 * @author Ankur Mundra on April, 2023
 */

const initialValues: IUserFormValues = {
  name: "",
  email: "",
  firstName: "",
  lastName: "",
  role_id: -1,
  institution_id: -1,
  emailPreferences: [],
};

const validationSchema = Yup.object({
  name: Yup.string()
    .required("Required")
    .matches(/^[a-z]+$/, "Username must be in lowercase")
    .min(3, "Username must be at least 3 characters")
    .max(20, "Username must be at most 20 characters"),
  email: Yup.string().required("Required").email("Invalid email format"),
  firstName: Yup.string().required("Required").nonNullable(),
  lastName: Yup.string().required("Required").nonNullable(),
  role_id: Yup.string().required("Required").nonNullable(),
  institution_id: Yup.string().required("Required").nonNullable(),
});

const UserEditor: React.FC<IEditor> = ({ mode }) => {
  const { data: userResponse, error: userError, sendRequest } = useAPI();
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const { userData, roles, institutions }: any = useLoaderData();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();

  // logged-in user is the parent of the user being created and the institution is the same as the parent's
  initialValues.parent_id = auth.user.id;
  initialValues.institution_id = auth.user.institution_id;

  // Close the modal if the user is updated successfully and navigate to the users page
  useEffect(() => {
    if (userResponse && userResponse.status >= 200 && userResponse.status < 300) {
      dispatch(
        alertActions.showAlert({
          variant: "success",
          message: `User ${userData.name} ${mode}d successfully!`,
        })
      );
      navigate(location.state?.from ? location.state.from : "/users");
    }
  }, [dispatch, mode, navigate, userData.name, userResponse, location.state?.from]);

  // Show the error message if the user is not updated successfully
  useEffect(() => {
    userError && dispatch(alertActions.showAlert({ variant: "danger", message: userError }));
  }, [userError, dispatch]);

  const onSubmit = (values: IUserFormValues, submitProps: FormikHelpers<IUserFormValues>) => {
    let method: HttpMethod = HttpMethod.POST;
    let url: string = "/users";

    if (mode === "update") {
      url = `/users/${values.id}`;
      method = HttpMethod.PATCH;
    }

    // to be used to display message when user is created
    userData.name = values.name;
    sendRequest({
      url: url,
      method: method,
      data: values,
      transformRequest: transformUserRequest,
    });
    submitProps.setSubmitting(false);
  };

  const handleClose = () => navigate(location.state?.from ? location.state.from : "/users");

  return (
    <Modal size="lg" centered show={true} onHide={handleClose} backdrop="static">
      <Modal.Header closeButton>
        <Modal.Title>{mode === "update" ? "Update User" : "Create User"}</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {userError && <p className="text-danger">{userError}</p>}
        <Formik
          initialValues={mode === "update" ? userData : initialValues}
          onSubmit={onSubmit}
          validationSchema={validationSchema}
          validateOnChange={false}
          enableReinitialize={true}
        >
          {(formik) => {
            return (
              <Form>
                <FormSelect
                  controlId="user-role"
                  name="role_id"
                  options={roles}
                  inputGroupPrepend={<InputGroup.Text id="role-prepend">Role</InputGroup.Text>}
                />
                <FormInput
                  controlId="user-name"
                  label="Username"
                  name="name"
                  disabled={mode === "update"}
                  inputGroupPrepend={<InputGroup.Text id="user-name-prep">@</InputGroup.Text>}
                />
                <Row>
                  <FormInput
                    as={Col}
                    controlId="user-first-name"
                    label="First name"
                    name="firstName"
                  />
                  <FormInput
                    as={Col}
                    controlId="user-last-name"
                    label="Last name"
                    name="lastName"
                  />
                </Row>
                <FormInput controlId="user-email" label="Email" name="email" />
                <FormCheckBoxGroup
                  controlId="email-pref"
                  label="Email Preferences"
                  name="emailPreferences"
                  options={emailOptions}
                />
                <FormSelect
                  controlId="user-institution"
                  name="institution_id"
                  disabled={mode === "update" || auth.user.role !== ROLE.SUPER_ADMIN.valueOf()}
                  options={institutions}
                  inputGroupPrepend={
                    <InputGroup.Text id="user-inst-prep">Institution</InputGroup.Text>
                  }
                />
                <Modal.Footer>
                  <Button variant="outline-secondary" onClick={handleClose}>
                    Close
                  </Button>

                  <Button
                    variant="outline-success"
                    type="submit"
                    disabled={!(formik.isValid && formik.dirty) || formik.isSubmitting}
                  >
                    {mode === "update" ? "Update User" : "Create User"}
                  </Button>
                </Modal.Footer>
              </Form>
            );
          }}
        </Formik>
      </Modal.Body>
    </Modal>
  );
};

export default UserEditor;

================
File: src/pages/Users/userUtil.ts
================
import { IFormOption } from "components/Form/interfaces";
import axiosClient from "../../utils/axios_client";
import { IInstitution, IRole, IUserRequest, IUserResponse } from "../../utils/interfaces";

/**
 * @author Ankur Mundra on April, 2023
 */

export enum EmailPreference {
  EMAIL_ON_REVIEW = "email_on_review",
  EMAIL_ON_SUBMISSION = "email_on_submission",
  EMAIL_ON_META_REVIEW = "email_on_review_of_review",
}

type PermittedEmailPreferences =
  | EmailPreference.EMAIL_ON_REVIEW
  | EmailPreference.EMAIL_ON_SUBMISSION
  | EmailPreference.EMAIL_ON_META_REVIEW;

export interface IUserFormValues {
  id?: number;
  name: string;
  email: string;
  firstName: string;
  lastName: string;
  role_id: number;
  parent_id?: number | null;
  institution_id: number;
  emailPreferences: Array<PermittedEmailPreferences>;
}

export const emailOptions: IFormOption[] = [
  { label: "When someone else reviews my work", value: EmailPreference.EMAIL_ON_REVIEW },
  {
    label: "When someone else submits work I am assigned to review",
    value: EmailPreference.EMAIL_ON_SUBMISSION,
  },
  {
    label: "When someone else reviews one of my reviews (meta-reviews my work)",
    value: EmailPreference.EMAIL_ON_META_REVIEW,
  },
];

export const transformInstitutionsResponse = (institutionsList: string) => {
  let institutionsData: IFormOption[] = [{ label: "Select an Institution", value: "" }];
  let institutions: IInstitution[] = JSON.parse(institutionsList);
  institutions.forEach((institution) =>
    institutionsData.push({ label: institution.name, value: institution.id! })
  );
  return institutionsData;
};

export const transformRolesResponse = (rolesList: string) => {
  let rolesData: IFormOption[] = [{ label: "Select a Role", value: "" }];
  let roles: IRole[] = JSON.parse(rolesList);
  roles.forEach((role) => rolesData.push({ label: role.name, value: role.id! }));
  return rolesData;
};

export const transformUserRequest = (values: IUserFormValues) => {
  // const parent_id = values.parent_id ? values.parent_id : null;
  const user: IUserRequest = {
    name: values.name,
    email: values.email,
    role_id: values.role_id,
    parent_id: values.parent_id,
    institution_id: values.institution_id,
    full_name: values.lastName + ", " + values.firstName,
    email_on_review: values.emailPreferences.includes(EmailPreference.EMAIL_ON_REVIEW),
    email_on_submission: values.emailPreferences.includes(EmailPreference.EMAIL_ON_SUBMISSION),
    email_on_review_of_review: values.emailPreferences.includes(
      EmailPreference.EMAIL_ON_META_REVIEW
    ),
  };
  return JSON.stringify(user);
};

export const transformUserResponse = (userResponse: string) => {
  const user: IUserResponse = JSON.parse(userResponse);
  const parent_id = user.parent.id ? user.parent.id : null;
  const institution_id = user.institution.id ? user.institution.id : -1;
  const userValues: IUserFormValues = {
    id: user.id,
    name: user.name,
    email: user.email,
    firstName: user.full_name.split(",")[1].trim(),
    lastName: user.full_name.split(",")[0].trim(),
    role_id: user.role.id,
    parent_id: parent_id,
    institution_id: institution_id,
    emailPreferences: [],
  };
  if (user.email_on_review) {
    userValues.emailPreferences.push(EmailPreference.EMAIL_ON_REVIEW);
  }
  if (user.email_on_submission) {
    userValues.emailPreferences.push(EmailPreference.EMAIL_ON_SUBMISSION);
  }
  if (user.email_on_review_of_review) {
    userValues.emailPreferences.push(EmailPreference.EMAIL_ON_META_REVIEW);
  }
  return userValues;
};

export async function loadUserDataRolesAndInstitutions({ params }: any) {
  let userData = {};
  // if params contains id, then we are editing a user, so we need to load the user data
  if (params.id) {
    const userResponse = await axiosClient.get(`/users/${params.id}`, {
      transformResponse: transformUserResponse,
    });
    userData = await userResponse.data;
  }
  const institutionsResponse = await axiosClient.get("/institutions", {
    transformResponse: transformInstitutionsResponse,
  });
  const rolesResponse = await axiosClient.get("/roles/subordinate_roles", {
    transformResponse: transformRolesResponse,
  });

  const institutions = await institutionsResponse.data;
  const roles = await rolesResponse.data;
  return { userData, roles, institutions };
}

================
File: src/pages/ViewTeamGrades/Data/authorFeedback.json
================
[
  [
    {
      "questionNumber": "1",
      "questionText": "This reviewer appeared to understand my work.",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The reviewer demonstrated a deep understanding of the work, providing insightful feedback." },
        { "name": "Alice", "score": 3, "comment": "While the reviewer grasped the main points, some aspects could have been clarified further." },
        { "name": "Bob", "score": 4, "comment": "The reviewer's understanding was evident, although certain nuances could have been explored more." },
        { "name": "Emma", "score": 5, "comment": "The reviewer showcased a comprehensive understanding of the work, offering valuable insights." },
        { "name": "Mike", "score": 4, "comment": "The reviewer's comprehension was evident, but a few minor details could have been addressed." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "2",
      "questionText": "This reviewer's comments helped me improve my work.",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The reviewer's comments were insightful and contributed significantly to the improvement of the work." },
        { "name": "Alice", "score": 5, "comment": "The reviewer's feedback was instrumental in refining various aspects of the work." },
        { "name": "Bob", "score": 5, "comment": "The reviewer's constructive criticism was invaluable in enhancing the quality of the work." },
        { "name": "Emma", "score": 5, "comment": "The reviewer's suggestions were practical and directly led to improvements in the work." },
        { "name": "Mike", "score": 5, "comment": "The reviewer's feedback played a crucial role in refining the work and addressing potential shortcomings." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "3",
      "questionText": "The tone of this review was respectful.",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The reviewer maintained a respectful tone throughout the review, fostering a positive exchange of ideas." },
        { "name": "Alice", "score": 5, "comment": "The review was conducted in a respectful manner, acknowledging the efforts put into the work." },
        { "name": "Bob", "score": 5, "comment": "The reviewer's tone was consistently respectful, contributing to a constructive review process." },
        { "name": "Emma", "score": 5, "comment": "The tone of the review remained respectful, focusing on constructive criticism." },
        { "name": "Mike", "score": 5, "comment": "Throughout the review, the tone remained respectful and professional." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    }
  ],
  [
    {
      "questionNumber": "1",
      "questionText": "This reviewer appeared to understand my work.",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The reviewer demonstrated a good understanding of the work, providing valuable insights." },
        { "name": "Alice", "score": 5, "comment": "The reviewer's understanding of the work was evident, contributing to meaningful feedback." },
        { "name": "Bob", "score": 3, "comment": "While the reviewer grasped the main points, certain aspects could have been explained more clearly." },
        { "name": "Emma", "score": 4, "comment": "The reviewer showcased a solid understanding of the work, offering constructive feedback." },
        { "name": "Mike", "score": 5, "comment": "The reviewer's comprehension was evident, providing insightful comments." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "2",
      "questionText": "This reviewer's comments helped me improve my work.",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The reviewer's comments offered valuable insights that contributed to improving the work." },
        { "name": "Alice", "score": 5, "comment": "The reviewer provided constructive criticism that directly led to enhancements in the work." },
        { "name": "Bob", "score": 3, "comment": "While the reviewer's feedback was helpful, certain suggestions could have been elaborated further." },
        { "name": "Emma", "score": 4, "comment": "The reviewer's suggestions were practical and contributed to refining various aspects of the work." },
        { "name": "Mike", "score": 5, "comment": "The reviewer's feedback played a crucial role in refining the work and addressing potential weaknesses." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "3",
      "questionText": "The tone of this review was respectful.",
      "reviews": [
        { "name": "John", "score": 4, "comment": "While the review was generally respectful, there were a few instances where the tone could have been more considerate." },
        { "name": "Alice", "score": 5, "comment": "The reviewer maintained a respectful tone throughout the review, fostering a positive exchange of ideas." },
        { "name": "Bob", "score": 3, "comment": "While most of the review was conducted with a respectful tone, certain sections could have been phrased more diplomatically." },
        { "name": "Emma", "score": 4, "comment": "The review was conducted with a respectful tone, focusing on constructive criticism." },
        { "name": "Mike", "score": 5, "comment": "Throughout the review, the tone remained respectful and professional." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    }
  ]
]

================
File: src/pages/ViewTeamGrades/Data/dummyData.json
================
{
  "team": "Straw Hat Pirates",
  "members": ["Aniket Singh Shaktawat", "Pankhi Saini", "Siddharth Shah", "Riya Gori"],
  "grade": "Grade for submission",
  "comment": "Comment for submission",
  "late_penalty": 0
}

================
File: src/pages/ViewTeamGrades/Data/heatMapData.json
================
[
  [
    {
      "questionNumber": "1",
      "questionText": "What is the main purpose of this feature?",
      "reviews": [
        { "name": "John", "score": 4, "comment": "Great work on this aspect!" },
        { "name": "Alice", "score": 3, "comment": "Could use some improvement here." },
        { "name": "Bob", "score": 4, "comment": "The presentation was well-organized and clear. However, some points could have been elaborated further to provide a deeper understanding of the topic." },
        { "name": "Emma", "score": 5, "comment": "The speaker demonstrated a profound understanding of the subject matter, making the session engaging and informative." },
        { "name": "Mike", "score": 4, "comment": "The visuals were compelling and helped in understanding complex concepts easily. However, there were a few slides with too much text, which made it hard to follow at times." },
        { "name": "Sophia", "score": 5, "comment": "The use of real-world examples made the concepts more relatable and easier to grasp. Additionally, the speaker was engaging and kept the audience hooked throughout." },
        { "name": "David", "score": 4, "comment": "The interactive exercises were beneficial in reinforcing the learning. However, there were a few technical glitches that disrupted the flow." },
        { "name": "Olivia", "score": 5, "comment": "The hands-on activities were the highlight of the session, providing practical experience that complemented the theoretical learning." },
        { "name": "William", "score": 4, "comment": "The guest speaker brought a fresh perspective to the topic, offering valuable insights that sparked further discussions among the participants." },
        { "name": "Sophia", "score": 5, "comment": "The case studies presented were enlightening, providing practical examples that showcased the application of theoretical concepts." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "2",
      "questionText": "How user-friendly is this feature?",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The interface was intuitive and easy to navigate." },
        { "name": "Alice", "score": 2, "comment": "There were some confusing elements that could be simplified." },
        { "name": "Bob", "score": 5, "comment": "The feature was straightforward to use, with clear instructions." },
        { "name": "Emma", "score": 2, "comment": "The user experience could be improved, especially for new users." },
        { "name": "Mike", "score": 3, "comment": "Some aspects were user-friendly, but others required a learning curve." },
        { "name": "Sophia", "score": 2, "comment": "More tooltips or hints could enhance the user-friendliness." },
        { "name": "David", "score": 3, "comment": "Overall, the feature was easy to grasp, but minor improvements could enhance the user experience." },
        { "name": "Olivia", "score": 4, "comment": "The feature was generally user-friendly, with a few areas for improvement." },
        { "name": "William", "score": 3, "comment": "Certain functions were straightforward, while others could use simplification." },
        { "name": "Sophia", "score": 2, "comment": "The feature would benefit from clearer labels and instructions." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "3",
      "questionText": "Does this feature meet the project requirements?",
      "reviews": [
        { "name": "John", "score": 1},
        { "name": "Alice", "score": 1},
        { "name": "Bob", "score": 1},
        { "name": "Emma", "score": 0},
        { "name": "Mike", "score": 1},
        { "name": "Sophia", "score": 0},
        { "name": "David", "score": 1},
        { "name": "Olivia", "score": 1},
        { "name": "William", "score": 1},
        { "name": "Sophia", "score": 0}
      ],
      "RowAvg": 0,
      "maxScore": 1
    },
    {
      "questionNumber": "4",
      "questionText": "How would you rate the performance of this feature?",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The feature performs adequately under normal conditions." },
        { "name": "Alice", "score": 2, "comment": "Performance could be improved, especially for larger datasets." },
        { "name": "Bob", "score": 4, "comment": "The feature's performance is generally satisfactory." },
        { "name": "Emma", "score": 1, "comment": "Performance issues were encountered during testing." },
        { "name": "Mike", "score": 3, "comment": "Overall, the feature performs well, but some optimizations could enhance speed." },
        { "name": "Sophia", "score": 2, "comment": "The feature's performance is acceptable but could be faster." },
        { "name": "David", "score": 3, "comment": "The feature handles most tasks efficiently, but a few functions could be optimized." },
        { "name": "Olivia", "score": 4, "comment": "Performance is stable and meets expectations for regular use." },
        { "name": "William", "score": 3, "comment": "The feature's performance meets the needs for the intended tasks." },
        { "name": "Sophia", "score": 2, "comment": "There were occasional lags in performance during heavy usage." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "5",
      "questionText": "What are your thoughts on the design of this feature?",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The design is sleek and modern, enhancing usability." },
        { "name": "Alice", "score": 3, "comment": "Some design elements could be more cohesive." },
        { "name": "Bob", "score": 5, "comment": "The feature's design is intuitive and visually appealing." },
        { "name": "Emma", "score": 2, "comment": "The design could be more user-centric." },
        { "name": "Mike", "score": 4, "comment": "Overall, the design facilitates ease of use." },
        { "name": "Sophia", "score": 3, "comment": "Certain design choices enhance functionality, while others could be refined." },
        { "name": "David", "score": 4, "comment": "The design aligns well with the feature's purpose." },
        { "name": "Olivia", "score": 5, "comment": "The design elements contribute to a seamless user experience." },
        { "name": "William", "score": 4, "comment": "Design considerations are apparent, benefiting user interaction." },
        { "name": "Sophia", "score": 2, "comment": "Some design aspects may confuse new users." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "6",
      "questionText": "Were the documentation and help resources helpful?",
      "reviews": [
        { "name": "John", "score": 3, "comment": "The design is average, with room for improvement." },
        { "name": "Alice", "score": 5, "comment": "Certain design elements enhance usability effectively." },
        { "name": "Bob", "score": 5, "comment": "The design stands out with its intuitive layout." },
        { "name": "Emma", "score": 3, "comment": "Some design aspects could be more cohesive." },
        { "name": "Mike", "score": 5, "comment": "The feature's design is modern and visually appealing." },
        { "name": "Sophia", "score": 5, "comment": "Design considerations are apparent, benefiting user interaction." },
        { "name": "David", "score": 3, "comment": "The design offers room for improvement in certain areas." },
        { "name": "Olivia", "score": 4, "comment": "The feature's design is clean and uncluttered." },
        { "name": "William", "score": 5, "comment": "Certain design elements contribute significantly to usability." },
        { "name": "Sophia", "score": 3, "comment": "The design could be more user-centric." }
      ],

      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "7",
      "questionText": "Did the feature perform well under stress/load?",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The design is sleek and modern, enhancing usability." },
        { "name": "Alice", "score": 5, "comment": "The feature's design is intuitive and visually appealing." },
        { "name": "Bob", "score": 3, "comment": "Some design elements could be streamlined for clarity." },
        { "name": "Emma", "score": 5, "comment": "Overall, the design facilitates ease of use." },
        { "name": "Mike", "score": 5, "comment": "The design elements contribute to a seamless user experience." },
        { "name": "Sophia", "score": 3, "comment": "Certain design choices enhance functionality, while others could be refined." },
        { "name": "David", "score": 5, "comment": "The design aligns well with the feature's purpose." },
        { "name": "Olivia", "score": 5, "comment": "The design delights users with its attention to detail." },
        { "name": "William", "score": 3, "comment": "Some design aspects may confuse new users." },
        { "name": "Sophia", "score": 4, "comment": "The design balances aesthetics with functionality effectively." }
      ],

      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "8",
      "questionText": "How satisfied are you with the support provided for this feature?",
      "reviews": [
        { "name": "John", "score": 3 },
        { "name": "Alice", "score": 4 },
        { "name": "Bob", "score": 5 },
        { "name": "Emma", "score": 2 },
        { "name": "Mike", "score": 4 },
        { "name": "Sophia", "score": 3 },
        { "name": "David", "score": 4 },
        { "name": "Olivia", "score": 5 },
        { "name": "William", "score": 4 },
        { "name": "Sophia", "score": 2 }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "9",
      "questionText": "Would you recommend this feature to others?",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The design is exceptional, exceeding expectations." },
        { "name": "Alice", "score": 3, "comment": "Certain design aspects could be polished further." },
        { "name": "Bob", "score": 5, "comment": "Overall, the design enhances user experience effectively." },
        { "name": "Emma", "score": 5, "comment": "The feature's design is top-notch, setting a new standard." },
        { "name": "Mike", "score": 3, "comment": "Some design elements could be more intuitive." },
        { "name": "Sophia", "score": 5, "comment": "The design offers a pleasant user journey." },
        { "name": "David", "score": 5, "comment": "Design considerations are evident, making tasks straightforward." },
        { "name": "Olivia", "score": 3, "comment": "Certain design choices may require further refinement." },
        { "name": "William", "score": 5, "comment": "The design adapts well to different screen sizes and devices." },
        { "name": "Sophia", "score": 5, "comment": "The feature's design is a joy to interact with." }
      ],

      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "10",
      "questionText": "Overall, how would you rate this feature?",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The design is polished and professional." },
        { "name": "Alice", "score": 5, "comment": "Certain design elements make the feature a joy to use." },
        { "name": "Bob", "score": 3, "comment": "Some design aspects could benefit from refinement." },
        { "name": "Emma", "score": 5, "comment": "The design is user-friendly, with intuitive navigation." },
        { "name": "Mike", "score": 5, "comment": "Certain design elements enhance user interaction effectively." },
        { "name": "Sophia", "score": 3, "comment": "Some design aspects may require further attention." },
        { "name": "David", "score": 5, "comment": "The design encourages exploration and discovery." },
        { "name": "Olivia", "score": 5, "comment": "The feature's design sets a new standard for user interfaces." },
        { "name": "William", "score": 3, "comment": "Certain design elements are confusing and could be clarified." },
        { "name": "Sophia", "score": 5, "comment": "The design offers an inviting and engaging experience." }
      ],

      "RowAvg": 0,
      "maxScore": 5
    }
  ],
  [
    {
      "questionNumber": "1",
      "questionText": "What is the main purpose of this feature?",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The design is polished and professional." },
        { "name": "Alice", "score": 5, "comment": "Certain design elements make the feature a joy to use." },
        { "name": "Bob", "score": 3, "comment": "Some design aspects could benefit from refinement." },
        { "name": "Emma", "score": 4, "comment": "The design is user-friendly, with intuitive navigation." },
        { "name": "Mike", "score": 5, "comment": "Certain design elements enhance user interaction effectively." },
        { "name": "Sophia", "score": 4, "comment": "Some design aspects may require further attention." },
        { "name": "David", "score": 4, "comment": "The design encourages exploration and discovery." },
        { "name": "Olivia", "score": 5, "comment": "The feature's design sets a new standard for user interfaces." },
        { "name": "William", "score": 4, "comment": "Certain design elements are confusing and could be clarified." },
        { "name": "Sophia", "score": 4, "comment": "The design offers an inviting and engaging experience." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "2",
      "questionText": "How user-friendly is this feature?",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The design is flawless, making tasks effortless." },
        { "name": "Alice", "score": 2, "comment": "Some design aspects could be more user-oriented." },
        { "name": "Bob", "score": 4, "comment": "The feature's design is inviting and approachable." },
        { "name": "Emma", "score": 5, "comment": "Certain design elements provide a delightful user journey." },
        { "name": "Mike", "score": 2, "comment": "Some design choices could enhance user engagement." },
        { "name": "Sophia", "score": 4, "comment": "The design adapts well to varying user needs." },
        { "name": "David", "score": 5, "comment": "The feature's design excels in simplicity and effectiveness." },
        { "name": "Olivia", "score": 3, "comment": "Certain design elements could benefit from more visual hierarchy." },
        { "name": "William", "score": 4, "comment": "The design offers a pleasing aesthetic while being functional." },
        { "name": "Sophia", "score": 5, "comment": "The feature's design is intuitive and user-centric." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "3",
      "questionText": "Does this feature meet the project requirements?",
      "reviews": [
        { "name": "John", "score": 1},
        { "name": "Alice", "score": 1},
        { "name": "Bob", "score": 1},
        { "name": "Emma", "score": 0},
        { "name": "Mike", "score": 1},
        { "name": "Sophia", "score": 0},
        { "name": "David", "score": 1},
        { "name": "Olivia", "score": 0},
        { "name": "William", "score": 0},
        { "name": "Sophia", "score": 1 }
      ],
      "RowAvg": 0,
      "maxScore": 1
    },
    {
      "questionNumber": "4",
      "questionText": "How would you rate the performance of this feature?",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The design is exceptional, exceeding expectations." },
        { "name": "Alice", "score": 5, "comment": "Certain design aspects could be polished further." },
        { "name": "Bob", "score": 4, "comment": "Overall, the design enhances user experience effectively." },
        { "name": "Emma", "score": 5, "comment": "The feature's design is top-notch, setting a new standard." },
        { "name": "Mike", "score": 0, "comment": "Some design elements could be more intuitive." },
        { "name": "Sophia", "score": 4, "comment": "The design offers a pleasant user journey." },
        { "name": "David", "score": 5, "comment": "Design considerations are evident, making tasks straightforward." },
        { "name": "Olivia", "score": 5, "comment": "Certain design choices may require further refinement." },
        { "name": "William", "score": 5, "comment": "The design adapts well to different screen sizes and devices." },
        { "name": "Sophia", "score": 5, "comment": "The feature's design is a joy to interact with." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "5",
      "questionText": "What are your thoughts on the design of this feature?",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The design is polished and professional." },
        { "name": "Alice", "score": 5, "comment": "Certain design elements make the feature a joy to use." },
        { "name": "Bob", "score": 3, "comment": "Some design aspects could benefit from refinement." },
        { "name": "Emma", "score": 4, "comment": "The design is user-friendly, with intuitive navigation." },
        { "name": "Mike", "score": 5, "comment": "Certain design elements enhance user interaction effectively." },
        { "name": "Sophia", "score": 2, "comment": "Some design aspects may require further attention." },
        { "name": "David", "score": 4, "comment": "The design encourages exploration and discovery." },
        { "name": "Olivia", "score": 5, "comment": "The feature's design sets a new standard for user interfaces." },
        { "name": "William", "score": 4, "comment": "Certain design elements are confusing and could be clarified." },
        { "name": "Sophia", "score": 4, "comment": "The design offers an inviting and engaging experience." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "6",
      "questionText": "Were the documentation and help resources helpful?",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The design is flawless, making tasks effortless." },
        { "name": "Alice", "score": 3, "comment": "Some design aspects could be more user-oriented." },
        { "name": "Bob", "score": 5, "comment": "The feature's design is inviting and approachable." },
        { "name": "Emma", "score": 5, "comment": "Certain design elements provide a delightful user journey." },
        { "name": "Mike", "score": 3, "comment": "Some design choices could enhance user engagement." },
        { "name": "Sophia", "score": 4, "comment": "The design adapts well to varying user needs." },
        { "name": "David", "score": 5, "comment": "The feature's design excels in simplicity and effectiveness." },
        { "name": "Olivia", "score": 1, "comment": "Certain design elements could benefit from more visual hierarchy." },
        { "name": "William", "score": 5, "comment": "The design offers a pleasing aesthetic while being functional." },
        { "name": "Sophia", "score": 5, "comment": "The feature's design is intuitive and user-centric." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "7",
      "questionText": "Did the feature perform well under stress/load?",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The design is sleek and modern, enhancing usability." },
        { "name": "Alice", "score": 5, "comment": "The feature's design is intuitive and visually appealing." },
        { "name": "Bob", "score": 3, "comment": "Some design elements could be streamlined for clarity." },
        { "name": "Emma", "score": 4, "comment": "Overall, the design facilitates ease of use." },
        { "name": "Mike", "score": 5, "comment": "The design elements contribute to a seamless user experience." },
        { "name": "Sophia", "score": 2, "comment": "Certain design choices enhance functionality, while others could be refined." },
        { "name": "David", "score": 4, "comment": "The design aligns well with the feature's purpose." },
        { "name": "Olivia", "score": 5, "comment": "The design delights users with its attention to detail." },
        { "name": "William", "score": 2, "comment": "Some design aspects may confuse new users." },
        { "name": "Sophia", "score": 4, "comment": "The design balances aesthetics with functionality effectively." }
      ],

      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "8",
      "questionText": "How satisfied are you with the support provided for this feature?",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The design is exceptional, exceeding expectations." },
        { "name": "Alice", "score": 4, "comment": "Certain design aspects could be polished further." },
        { "name": "Bob", "score": 4, "comment": "Overall, the design enhances user experience effectively." },
        { "name": "Emma", "score": 5, "comment": "The feature's design is top-notch, setting a new standard." },
        { "name": "Mike", "score": 2, "comment": "Some design elements could be more intuitive." },
        { "name": "Sophia", "score": 4, "comment": "The design offers a pleasant user journey." },
        { "name": "David", "score": 5, "comment": "Design considerations are evident, making tasks straightforward." },
        { "name": "Olivia", "score": 3, "comment": "Certain design choices may require further refinement." },
        { "name": "William", "score": 4, "comment": "The design adapts well to different screen sizes and devices." },
        { "name": "Sophia", "score": 5, "comment": "The feature's design is a joy to interact with." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "9",
      "questionText": "Would you recommend this feature to others?",
      "reviews": [
        { "name": "John", "score": 5, "comment": "The design is flawless, making tasks effortless." },
        { "name": "Alice", "score": 3, "comment": "Some design aspects could be more user-oriented." },
        { "name": "Bob", "score": 4, "comment": "The feature's design is inviting and approachable." },
        { "name": "Emma", "score": 5, "comment": "Certain design elements provide a delightful user journey." },
        { "name": "Mike", "score": 2, "comment": "Some design choices could enhance user engagement." },
        { "name": "Sophia", "score": 4, "comment": "The design adapts well to varying user needs." },
        { "name": "David", "score": 5, "comment": "The feature's design excels in simplicity and effectiveness." },
        { "name": "Olivia", "score": 2, "comment": "Certain design elements could benefit from more visual hierarchy." },
        { "name": "William", "score": 4, "comment": "The design offers a pleasing aesthetic while being functional." },
        { "name": "Sophia", "score": 5, "comment": "The feature's design is intuitive and user-centric." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    },
    {
      "questionNumber": "10",
      "questionText": "Overall, how would you rate this feature?",
      "reviews": [
        { "name": "John", "score": 4, "comment": "The design is sleek and modern, enhancing usability." },
        { "name": "Alice", "score": 5, "comment": "The feature's design is intuitive and visually appealing." },
        { "name": "Bob", "score": 3, "comment": "Some design elements could be streamlined for clarity." },
        { "name": "Emma", "score": 4, "comment": "Overall, the design facilitates ease of use." },
        { "name": "Mike", "score": 3, "comment": "The design elements contribute to a seamless user experience." },
        { "name": "Sophia", "score": 3, "comment": "Certain design choices enhance functionality, while others could be refined. Overall scope of improvement" },
        { "name": "David", "score": 4, "comment": "The design aligns well with the feature's purpose." },
        { "name": "Olivia", "score": 5, "comment": "The design delights users with its attention to detail." },
        { "name": "William", "score": 4, "comment": "Some design aspects may confuse new users." },
        { "name": "Sophia", "score": 4, "comment": "The design balances aesthetics with functionality effectively." }
      ],
      "RowAvg": 0,
      "maxScore": 5
    }
  ]
]

================
File: src/pages/ViewTeamGrades/Data/teammateData.json
================
[
        {
          "questionNumber": "1",
          "questionText": "How many times was this person late to meetings?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "He was never late for any meeting." },
            { "name": "Alice", "score": 4, "comment": "She was late once due to traffic." },
            { "name": "Bob", "score": 5, "comment": "He was punctual for all meetings." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "2",
          "questionText": "How many times did this person fail to show up?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "This never happened." },
            { "name": "Alice", "score": 4, "comment": "She missed one meeting due to illness." },
            { "name": "Bob", "score": 5, "comment": "He never failed to show up." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "3",
          "questionText": "What fraction of the work assigned to this person did (s)he do?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "He completed all assigned tasks on time." },
            { "name": "Alice", "score": 4, "comment": "She completed 70% of the assigned work." },
            { "name": "Bob", "score": 5, "comment": "He completed 100% of his assigned work." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "4",
          "questionText": "Did this person do assigned work on time?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "Yes, he did all the work on time." },
            { "name": "Alice", "score": 4, "comment": "She completed most of the work on time." },
            { "name": "Bob", "score": 5, "comment": "He always completed his work on time." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "5",
          "questionText": "How much initiative did this person take on this project?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "He always took initiatives and brought fresh ideas." },
            { "name": "Alice", "score": 4, "comment": "She occasionally proposed new ideas for improvement." },
            { "name": "Bob", "score": 5, "comment": "He consistently showed initiative and creativity." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "6",
          "questionText": "Did this person shirk any task that was necessary for completing the project?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "This never happened." },
            { "name": "Alice", "score": 4, "comment": "She occasionally avoided tasks she found challenging." },
            { "name": "Bob", "score": 5, "comment": "He always fulfilled his responsibilities." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "7",
          "questionText": "Did you need to clean up any of the code written by this team member?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "No, the code was clean and easy to read." },
            { "name": "Alice", "score": 4, "comment": "Some parts of her code needed minor cleanup." },
            { "name": "Bob", "score": 5, "comment": "His code was well-structured and required no cleanup." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "8",
          "questionText": "Did this person make any unneeded modifications that did not benefit the project, but may have increased their score on the Github metrics?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "Not at all, he always had good explanation for his part of the work." },
            { "name": "Alice", "score": 4, "comment": "She made a few unnecessary changes to increase her commit count." },
            { "name": "Bob", "score": 5, "comment": "He only made changes that were necessary for project improvement." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "9",
          "questionText": "Did this person exhibit any behaviors that could cause dissension on the team?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "No, he is fun to work with." },
            { "name": "Alice", "score": 4, "comment": "She occasionally disagreed with team decisions but was respectful." },
            { "name": "Bob", "score": 5, "comment": "He was cooperative and maintained a positive attitude." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "10",
          "questionText": "What fraction of the documentation did this person write? (Note: Contribution of all team members should not add up to more than 100%)",
          "reviews": [
            { "name": "John", "score": 4, "comment": "He did 50% of the work, He made the basic structure for the documentation and took most of the responsibility related to it." },
            { "name": "Alice", "score": 5, "comment": "She contributed 40% to the documentation, focusing on detailed explanations." },
            { "name": "Bob", "score": 4, "comment": "His contribution to documentation was 30%, mainly focused on formatting and organization." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        },
        {
          "questionNumber": "11",
          "questionText": "How important was this person to the team?",
          "reviews": [
            { "name": "John", "score": 5, "comment": "He brought great ideas for the project and thus was very important." },
            { "name": "Alice", "score": 4, "comment": "She played a significant role in decision-making and problem-solving." },
            { "name": "Bob", "score": 5, "comment": "His contributions were invaluable to the success of the project." }
          ],
          "RowAvg": 0,
          "maxScore": 5
        }
      ]

================
File: src/pages/ViewTeamGrades/App.tsx
================
import React from 'react';
import ReviewTable from './ReviewTable'; // Importing the ReviewTable component

// Interface defining the structure of ReviewData
export interface ReviewData {
  questionNumber: string;
  questionText: string;
  reviews: { score: number; comment?: string }[]; // Array of objects with score and optional comment
  RowAvg: number; // Average score for the row
  maxScore: number; // Maximum possible score
}

// Functional component App, which renders the ReviewTable
const App: React.FC = () => {
  return (
    <div>
      <ReviewTable /> {/* Rendering the ReviewTable component */}
    </div>
  );
};

export default App; // Exporting the App component as default

================
File: src/pages/ViewTeamGrades/BarGraph.tsx
================
import React, { useRef, useEffect } from 'react';
import Chart from 'chart.js/auto';

interface BarGraphProps {
    sortedData: number[];
}

const BarGraph: React.FC<BarGraphProps> = ({ sortedData }) => {
    const chartRef = useRef<HTMLCanvasElement>(null);
    const chartInstanceRef = useRef<Chart | null>(null);

    useEffect(() => {
        if (chartRef.current) {
            const ctx = chartRef.current.getContext('2d');
            if (ctx) {
                if (chartInstanceRef.current) {
                    chartInstanceRef.current.destroy(); // Destroy the previous chart instance
                }
                chartInstanceRef.current = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: sortedData.map((_, index) => `Review ${index + 1}`),
                        datasets: [{
                            label: 'Average Review Score',
                            data: sortedData,
                            backgroundColor: 'rgba(255, 193, 7)',
                            borderColor:'rgba(255, 193, 7)',
                            borderWidth: 1,
                        }],
                    },
                    options: {
                        scales: {
                            x: {
                                display: false, // Hide the x-axis
                            },
                            y: {
                                display: false,
                                beginAtZero: true,
                            },
                        },
                    },
                });
            }
        }

        return () => {
            if (chartInstanceRef.current) {
                chartInstanceRef.current.destroy(); // Clean up the chart instance on component unmount
            }
        };
    }, [sortedData]);

    return (
        <div  style={{ width: '200px', height:'100px'}}>
            <canvas ref={chartRef } />
        </div>
    
    );
};

export default BarGraph;

================
File: src/pages/ViewTeamGrades/CircularProgress.tsx
================
// CircularProgress.tsx
import React from 'react';

interface CircularProgressProps {
  size: number; // Diameter of the progress bar
  progress: number; // Progress in percentage (0 to 100)
  strokeWidth: number; // Width of the stroke
}


const CircularProgress: React.FC<CircularProgressProps> = ({ size, progress, strokeWidth }) => {
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const offset = circumference - (progress / 100) * circumference;

  const circleStyle: React.CSSProperties = {
    fill: 'none',
    stroke: 'rgba(255, 193, 7)',
    strokeLinecap: 'round',
    strokeDasharray: `${circumference} ${circumference}`,
    strokeDashoffset: offset,
    strokeWidth,
  };

  return (
    <div style={{ position: 'relative', width: size, height: size }}>
      <svg width={size} height={size}>
        {/* Background circle */}
        <circle
          cx={size / 2}
          cy={size / 2}
          r={radius}
          strokeWidth={strokeWidth}
          stroke="lightgrey"
          fill="transparent"
        />
        {/* Foreground circle */}
        <circle
          style={circleStyle}
          cx={size / 2}
          cy={size / 2}
          r={radius}
          transform={`rotate(-90 ${size / 2} ${size / 2})`} // Rotate circle to start from the top
        />
      </svg>
      <div
        style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          fontSize: '1.5rem',
          color: 'black',
        }}
      >
        {progress}
      </div>
    </div>
  );
};

export default CircularProgress;

================
File: src/pages/ViewTeamGrades/grades.scss
================
/* Set the maximum width of the table container */
.table-container {
  max-width: 90%;
}

/* Circle around max score number */
.circle-container {
  display: flex;
  align-items: center;
}

.circle {
  width: 15px;
  height: 15px;
  border-radius: 50%;
  border: 1px solid orangered;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  color: orangered;
  margin-left: -20px; /* Add margin to separate the circle from the text */
}

.tick{
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  color: orangered;
  margin-left: -15px; /* Add margin to separate the circle from the text */
}

/* Colors used for coloring score cells within the heatgrid for the grades view */

/* Null space in the table */
.c0 {
  background-color: #d3d3d3;
}

/* Red, indicative of a poor score */
.c1 {
  background-color: #ff8080;
}

/* Orange */
.c2 {
  background-color: #FD992D;
}

/* Yellow, indicative of a median score */
.c3 {
  background-color: #FFEC8B;
}

/* Light green */
.c4 {
  background-color: #BCED91;
}

/* Green, indicative of a good score */
.c5 {
  background-color: #2DE636;
}

/* Default background color */
.cf {
  background-color: #FFFFFF;
}

/* Style for the grades in the summary report */
.grade-circle {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  font-size: 15px;
  color: black;
  line-height: 30px;
  text-align: center;
}

/* Underline scores which have a comment */
.underlined {
  text-decoration: underline;
  font-weight: bold;
}

/* Styling for the heatgrid table */
.tbl_heat {
  border: 1px solid black;
  width: 100%;
  font-size: 10px;
  text-align: center;
  table-layout: fixed;
  min-width: 600px; // Minimum width before scrolling kicks in
}

.tbl_heat td {
  cursor: pointer;
  padding: 8px;
  border: 1px black solid;
  width: auto;
  font-size: 11px;
  table-layout: fixed;
  position: relative;
}

/* Tooltip display for question text on hover */
.tbl_heat td[data-question]:hover::after {
  content: attr(data-question);
  position: absolute;
  background-color: rgba($color: #000000, $alpha: 1);
  color: #ffffff;
  padding: 4px;
  border-radius: 4px;
  bottom: 130%;
  left: 0%;
  white-space: nowrap;
}

/* Styling for table headers */
.tbl_heat th {
  border: 1px black solid;
  padding: 10px;
  font-size: 11px;
  background-color: #f2f2f2;
  width: auto;
  table-layout: fixed;
}

/* Hides padding for specific rows */
.hiddenRow {
  padding: 0 !important;
}

/* Tooltip span styling */
.spn_tooltip {
  padding-left: 30px;
  color: grey;
  font-size: small;
}

/* Styling for question toggle span */
.spn_qsttog {
  padding-left: 30px;
  cursor: pointer;
  text-decoration: underline;
  color: blue;
  font-size: small;
}

/* Classes for E2100 Tag Reports for Students to style the new HeatGrid of review tags */

/* Styling for action row */
.action_row {
  border: 1px black solid;
  padding: 1px 2px 2px 1px;
  font-size: 11px;
  text-align: center;
}

/* Styling for tag heat grid */
.tag_heat_grid {
  padding: 0;
  spacing: 0;
  border: 1px solid black;
  position: relative;
  float: right;
  top: 0px;
  right: 0px;
  z-index: 2;
}

/* Styling for tag heat grid headers */
.tag_heat_grid th {
  border: 1px solid black;
  font-size: 12px;
  cursor: pointer;
}

/* Styling for tag heat grid cells */
.tag_heat_grid td {
  border: 0.5px solid black;
  font-size: 8px;
}

/* Styling for tag heat grid criterion */
.tag_heat_grid_criterion {
  font-size: 11px !important;
  font-weight: bold !important;
}

/* Styles for the round selector */
.round-selector {
  display: flex;
}

.round-button {
  padding: 7px 7px;
  margin: 5px;
  border: 2px solid #4a90e2;
  border-radius: 10px;
  background-color: #4a90e2;
  color: white;
  font-size: 10px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background-color: #357bd8;
    border-color: #357bd8;
  }

  &.current {
    background-color: #2ecc71;
    border-color: #2ecc71;
  }

  .round-selector > div {
    display: flex;
    align-items: center;
    margin: auto;
  }
}

.container {
  display: flex;
  justify-content: space-between; /* Adjust as needed */
  width: 80%; /* Ensure the container takes up the full width */
}


.round-heading {
  font-weight: bold;
  margin-top: 20px;
  font-size: 30px;
}

.review-heading {
  font-weight: bold;
  margin-top: 10px;
}

.review-block {
  border: 1px solid #ccc;
  padding: 10px;
  margin-bottom: 0;
}

.question {
  font-weight: bold;
}

.score {
  border-radius: 50%;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: black;
  margin-right: 10px;
  font-weight: bold;
}

.comment {
  flex-grow: 1; /* Ensures comment fills the rest of the container */
  padding-top: 3px; 
}

/* Style for even-numbered review blocks */
.review-block:nth-child(even) {
  background-color: #d9edf7; 
  
}

/* Style for odd-numbered review blocks */
.review-block:nth-child(odd) {
  background-color: #fcf8e3; 

}

.score-container {
  display: flex;
  align-items: center; 
  margin-top: 5px;
  padding-top: 10px; 

}


.review-container {
  margin-bottom: 200px; 
}

================
File: src/pages/ViewTeamGrades/ReviewTable.tsx
================
import React, { useState } from 'react';
import ReviewTableRow from './ReviewTableRow'; // Importing the ReviewTableRow component
import RoundSelector from './RoundSelector'; // Importing the RoundSelector component
import dummyDataRounds from './Data/heatMapData.json'; // Importing dummy data for rounds
import dummyData from './Data/dummyData.json'; // Importing dummy data
import { calculateAverages, getColorClass } from './utils'; // Importing utility functions
import './grades.scss'; // Importing styles
import { Link } from 'react-router-dom'; // Importing Link from react-router-dom
import Statistics from './Statistics'; //import statistics component
import { Button, Collapse } from 'react-bootstrap'; //imporitng collaspe button


// Functional component ReviewTable
const ReviewTable: React.FC = () => {
  const [currentRound, setCurrentRound] = useState<number>(0); // State for current round
  const [sortOrderRow, setSortOrderRow] = useState<'asc' | 'desc' | 'none'>('none'); // State for row sort order
  const [showToggleQuestion, setShowToggleQuestion] = useState(false); // State for showing question column
  const [open, setOpen] = useState(false); 

  // Function to toggle the sort order for rows
  const toggleSortOrderRow = () => {
    setSortOrderRow((prevSortOrder) => {
      if (prevSortOrder === 'asc') return 'desc';
      if (prevSortOrder === 'desc') return 'none';
      return 'asc';
    });
  };

  // Calculating averages and sorting data based on the current round and sort order
  const currentRoundData = dummyDataRounds[currentRound];
  const { averagePeerReviewScore, columnAverages, sortedData } = calculateAverages(
    currentRoundData,
    sortOrderRow
  );

  // Function to handle round change
  const handleRoundChange = (roundIndex: number) => {
    setCurrentRound(roundIndex);
  };
  //Function to handle Show Question
  const toggleShowQuestion = () => {
    setShowToggleQuestion(!showToggleQuestion);
  };

  // JSX rendering of the ReviewTable component
  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-2">Summary Report: Program 2</h2>
      <h5 className="text-xl font-semibold mb-1">Team: {dummyData.team}</h5>
      <h5 className="mb-4">
        Average peer review score:{" "}
        <span>{averagePeerReviewScore}</span>
      </h5>
      <div>Tagging: 97/97</div>
      <div>
      <a href="#" onClick={(e) => { e.preventDefault(); setOpen(!open); }}>
          {open ? 'Hide Submission' : 'Show Submission'}
      </a>
      {/* Collapsible content */}
      <Collapse in={open}>
        <div id="example-collapse-text">
          <br></br>
          {/* Render links only when open is true */}
          {open && (
            <>
            <a
              href="https://github.ncsu.edu/Program-2-Ruby-on-Rails/WolfEvents"
              target="_blank"
              rel="noopener noreferrer"
            >
              https://github.ncsu.edu/Program-2-Ruby-on-Rails/WolfEvents
            </a>
            <br />
            <a
              href="http://152.7.177.44:8080/"
              target="_blank"
              rel="noopener noreferrer"
            >
              http://152.7.177.44:8080/
            </a>
            <br />
            {/* Add a downloadable link to your dummy file */}
            <a
              href="https://github.ncsu.edu/Program-2-Ruby-on-Rails/WolfEvents/raw/main/README.md"
              download="README.md"
              target="_blank"
              rel="noopener noreferrer"
            >
              README.md
            </a>
          </>
          )}
        </div>
      </Collapse>
      </div>

      <h4 className="text-xl font-semibold mb-1">Review (Round: {currentRound + 1} of {dummyDataRounds.length}) </h4>
      <br></br>
      {/* toggle Question Functionality */}
      <form>
        <input
          type="checkbox"
          id="toggleQuestion"
          name="toggleQuestion"
          checked={showToggleQuestion}
          onChange={toggleShowQuestion}
        />
        <label htmlFor="toggleQuestion"> &nbsp;Toggle Question List</label>
      </form>
      <div className="table-container">
        <table className="tbl_heat">
          <thead>
          <tr className="bg-gray-200">
            <th className="py-2 px-4 text-center" style={{ width: '70px' }}>Question No.</th>
            {showToggleQuestion && (
                <th className="py-2 px-4 text-center" style={{ width: '150px' }}>Question</th>
              )}
            {Array.from({ length: currentRoundData[0].reviews.length }, (_, i) => (
              <th key={i} className="py-2 px-4 text-center" style={{ width: '70px' }}>{`Review ${i + 1}`}</th>
            ))}
            <th className="py-2 px-4" style={{ width: '70px' }} onClick={toggleSortOrderRow}>
              Avg
              {sortOrderRow === "none" && <span>▲▼</span>}
              {sortOrderRow === "asc" && <span> ▲</span>}
              {sortOrderRow === "desc" && <span> ▼</span>}
            </th>
          </tr>
          </thead>
          <tbody>
          {sortedData.map((row, index) => (
            <ReviewTableRow
              key={index}
              row={row}
              showToggleQuestion={showToggleQuestion}
            />
          ))}
          <tr className="no-bg">
            <td className="py-2 px-4" style={{ width: '70px' }}>Avg</td> {/* "Avg" header always in the first column */}
            {showToggleQuestion && <td></td>} {/* Add an empty cell if toggle question is shown */}
            {columnAverages.map((avg, index) => (
              <td key={index} className="py-2 px-4 text-center">
                {avg.toFixed(2)}
              </td>
            ))}
          </tr>
          </tbody>
        </table>
        <br></br>
        <RoundSelector currentRound={currentRound} handleRoundChange={handleRoundChange} />
      </div>
      {/* view stats functionality */}
      <Statistics average={averagePeerReviewScore}/>

      <p className="mt-4">
        <h3>Grade and comment for submission</h3>
        Grade: {dummyData.grade}<br></br>
        Comment: {dummyData.comment}<br></br>
        Late Penalty: {dummyData.late_penalty}<br></br>
      </p>

      <Link to="/">Back</Link>
    </div>
  );
};

export default ReviewTable; // Exporting the ReviewTable component as default

================
File: src/pages/ViewTeamGrades/ReviewTableRow.tsx
================
import React, { useState, useEffect } from 'react';
import { getColorClass } from './utils'; // Importing utility functions
import { ReviewData } from './App'; // Importing the ReviewData interface from App

// Props interface for ReviewTableRow component
interface ReviewTableRowProps {
  row: ReviewData; // Data for the row
  showToggleQuestion: boolean; // Flag to toggle the question column
}

// Functional component ReviewTableRow
const ReviewTableRow: React.FC<ReviewTableRowProps> = ({ row, showToggleQuestion }) => {

  return (
    <tr className={row.maxScore === 1 ? "no-bg" : ""}>
      {/* Question Number */}
      <td className="py-2 px-4 text-center" data-question={row.questionText}>
        <div className="circle-container">
          {row.maxScore !== 1 ? (
            <span className="circle">{row.maxScore}</span>
          ) : (
            <span className="tick">✓</span>
          )}
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{row.questionNumber}
        </div>
      </td>
          {/* Toggle Question */}
      {showToggleQuestion && (
        <td className="text-center" >{row.questionText}</td>
      )}

      {/* Review Cells */}
      {row.reviews.map((review, idx) => (
        <td
          key={idx}
          className={`py-2 px-4 text-center ${getColorClass(review.score, row.maxScore)}`}
          data-question={review.comment}
        >
          <span style={{ textDecoration: review.comment ? "underline" : "none" }}>{review.score}</span>
        </td>
      ))}

      {/* Row Average */}
      <td className="py-2 px-4 text-center">{row.RowAvg.toFixed(2)}</td>
    </tr>
  );
};

export default ReviewTableRow; // Exporting the ReviewTableRow component as default

================
File: src/pages/ViewTeamGrades/RoundSelector.tsx
================
import React, { useState, useEffect } from 'react';
import dummyDataRounds from './Data/heatMapData.json';
import teamData from './Data/dummyData.json';

interface RoundSelectorProps {
  currentRound: number;
  handleRoundChange: (roundIndex: number) => void;
}

// RoundSelector component to display buttons for selecting rounds
const RoundSelector: React.FC<RoundSelectorProps> = ({ currentRound, handleRoundChange }) => {
  const [teamMembers, setTeamMembers] = useState<string[]>([]);

  // Fetch team members from the teamData.json file on component mount
  useEffect(() => {
    setTeamMembers(teamData.members);
  }, []); // Empty dependency array means it runs only once on component mount

  return (
    <div className="round-selector">
      <div className="flex items-center">
        {/* Mapping over dummyDataRounds to render round buttons */}
        {dummyDataRounds.map((round, index) => (
          <button
            key={index}
            className={`round-button mr-4 ${currentRound === index ? "current" : ""}`}
            onClick={() => handleRoundChange(index)}
          >
            Round {index + 1}
          </button>
        ))}
        {/* Displaying team members */}
        <span className="ml-4">
          Team members: {teamMembers.map((member, index) => (
          <span key={index}>
              ({member})
            {index !== teamMembers.length - 1 && ' '}
            </span>
        ))}
        </span>
      </div>
    </div>
  );
};

export default RoundSelector;

================
File: src/pages/ViewTeamGrades/ShowReviews.tsx
================
import React from 'react';
import { getColorClass } from './utils';
import { RootState } from "../../store/store";
import { useDispatch, useSelector } from "react-redux";

//props for the ShowReviews
interface ReviewComment {
  score: number;
  comment?: string;
  name: string;
}

interface Review {
  questionNumber: string;
  questionText: string;
  reviews: ReviewComment[];
  RowAvg: number;
  maxScore: number;
}

interface ShowReviewsProps {
  data: Review[][];
}

//function for ShowReviews
const ShowReviews: React.FC<ShowReviewsProps> = ({ data }) => {
  const rounds = data.length;

  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );


  // Render each review for every question in each round
  const renderReviews = () => {
    const reviewElements: JSX.Element[] = [];
    for(let r = 0; r < rounds; r++){
      const num_of_questions = data[r].length;
      
      // Assuming 'reviews' array exists inside the first 'question' of the first 'round'.
      const num_of_reviews = data[r][0].reviews.length;
      reviewElements.push(<div className="round-heading">Round {r+1}</div>)
      for (let i = 0; i < num_of_reviews; i++) {
        if (auth.user.role !== "Student") {
          reviewElements.push(
              <div className="review-heading">Review {i+1}: {data[r][0].reviews[i].name}</div>
          );
        } else {
            reviewElements.push(
                <div className="review-heading">Review {i+1}</div>
            );
        }
        for (let j = 0; j < num_of_questions; j++) {
          reviewElements.push(
            <div key={`round-${r}-question-${j}-review-${i}`} className="review-block">
              <div className="question">{j+1}. {data[r][j].questionText}</div>
              <div className="score-container">
                <span className={`score ${getColorClass(data[r][j].reviews[i].score,data[r][j].maxScore)}`}>{data[r][j].reviews[i].score}</span>
                {data[r][j].reviews[i].comment && (
                  <div className="comment">{data[r][j].reviews[i].comment}</div>
                )}
              </div>
            </div>
          );
        }
      }
    }
    
    return reviewElements;
  };

  return <div>{rounds > 0 ? renderReviews() : <div>No reviews available</div>}</div>;
};

export default ShowReviews;

================
File: src/pages/ViewTeamGrades/Statistics.tsx
================
// Statistics.tsx
import React,{useState, useEffect} from 'react';
import { calculateAverages } from './utils';
import './grades.scss';
import CircularProgress  from './CircularProgress';
import ShowReviews from './ShowReviews'; //importing show reviews component
import dummyDataRounds from './Data/heatMapData.json'; // Importing dummy data for rounds
import dummyauthorfeedback from './Data/authorFeedback.json'; // Importing dummy data for author feedback
import BarGraph from './BarGraph';
import teammateData from './Data/teammateData.json'; 
import AverageMarks from './teamMarks'; 

//props for statistics component
interface StatisticsProps {
  average:string;
}

//statistics component
const Statistics: React.FC<StatisticsProps> = ({average}) => {
  const [sortedData, setSortedData] = useState<any[]>([]);
  useEffect(() => {
    const { averagePeerReviewScore, columnAverages, sortedData } = calculateAverages(dummyDataRounds[0], "asc");
    const rowAvgArray = sortedData.map(item => item.RowAvg);
    console.log(rowAvgArray);
    setSortedData(sortedData.map(item => item.RowAvg));
  }, []); 

  const [statisticsVisible, setstatisticsVisible] = useState<boolean>(false);
  const toggleStatisticsVisibility = () => {
      setstatisticsVisible(!statisticsVisible);
  };
  const [showReviews, setShowReviews] = useState(false);
  const [ShowAuthorFeedback, setShowAuthorFeedback] = useState(false);

  // Function to toggle the visibility of ShowReviews component
  const toggleShowReviews = () => {
    setShowReviews(!showReviews);
  };

    // Function to toggle the visibility of ShowAuthorFeedback component
    const toggleAuthorFeedback = () => {
      setShowAuthorFeedback(!ShowAuthorFeedback);
    };

  const headerCellStyle: React.CSSProperties = {
    padding: '10px',
    textAlign: 'center',
    
  };

  //calculation for total reviews recieved
  let totalReviewsForQuestion1: number = 0;
  dummyDataRounds.forEach(round => {
    round.forEach(question => {
      if (question.questionNumber === "1") {
        totalReviewsForQuestion1 += question.reviews.length;
      }
    });
  });
  //calculation for total feedback recieved
  let totalfeedbackForQuestion1: number = 0;
  dummyauthorfeedback.forEach(round => {
    round.forEach(question => {
      if (question.questionNumber === "1") {
        totalfeedbackForQuestion1 += question.reviews.length;
      }
    });
  });


  const subHeaderCellStyle: React.CSSProperties = {
    padding: '10px',
    textAlign: 'center',
  };

  return (
    
    <div>
      
    <table style={{ width: '90%', borderCollapse: 'collapse' }}>
      <thead>
      <a href="#" onClick={(e) => { e.preventDefault(); toggleStatisticsVisibility();}}>
        {statisticsVisible ? 'hide stats' : 'show stats'}
      </a>
      {statisticsVisible && (
     <tr>
     <th style={headerCellStyle}>Stats</th>
     <th style={headerCellStyle} colSpan={2}><BarGraph sortedData={sortedData} /></th>
     <th style={headerCellStyle} colSpan={2}></th>
     {teammateData.length !== 0 && (
           <th style={headerCellStyle} colSpan={2}></th>
          )}
     
     <th style={headerCellStyle}><CircularProgress size={70} progress={75} strokeWidth={10} /></th>
   </tr>
      )}
        <tr>
          <th style={headerCellStyle}></th>
          <th style={headerCellStyle} colSpan={2}>Submitted Work</th>
          {dummyauthorfeedback[0].length !== 0 && (
            <th style={headerCellStyle} colSpan={2}>Author Feedback</th>
          )}
          {teammateData.length !== 0 && (
            <th style={headerCellStyle} colSpan={2}>Teammate Review</th>
          )}
          
        </tr>
        <tr>
          <th style={subHeaderCellStyle}>Contributor</th>
          <th style={subHeaderCellStyle}>Average</th>
          <th style={subHeaderCellStyle}>Range</th>
          {dummyauthorfeedback[0].length !== 0 && (
            <th style={subHeaderCellStyle}>Average</th>
          )}
          {dummyauthorfeedback[0].length !== 0 && (
            <th style={subHeaderCellStyle}>Range</th>
          )}
          {teammateData.length !== 0 && (
            <th style={subHeaderCellStyle}>Average</th>
          )}
          {teammateData.length !== 0 && (
            <th style={subHeaderCellStyle}>Range</th>
          )}
          <th style={subHeaderCellStyle}>Final Score</th>
        </tr>
        <tr>
            <td style={subHeaderCellStyle}>
              <div style={{textAlign: 'center' }}>
                <a href="#">ssshah26 </a><span>(Siddharth Shah)</span>
                <br />
              </div>
            </td>
            <td style={subHeaderCellStyle}>
              <div style={{textAlign: 'center' }}>
                <div>{average}</div>
                <a href="#" onClick={(e) => { e.preventDefault(); toggleShowReviews(); }}>
                    {showReviews ? 'Hide Reviews' : 'Show Reviews'}
                </a><span>({totalReviewsForQuestion1})</span>
              </div>
            </td>
            <td style={subHeaderCellStyle}>
              <div style={{textAlign: 'center' }}>
                <div>99.99% - 100%</div>
              </div>
            </td>
            <td style={subHeaderCellStyle}>
              
              {dummyauthorfeedback[0].length !== 0 && (
                <div style={{textAlign: 'center' }}>
                <div>96.67</div>
                <a href="#" onClick={(e) => { e.preventDefault(); toggleAuthorFeedback(); }}>
                    {ShowAuthorFeedback ? 'Hide Author Feedback' : 'Show Author Feedback'}
                </a><span>({totalfeedbackForQuestion1})</span>
              </div>
              )}
              <div>
      </div>
            </td>
            <td style={subHeaderCellStyle}>
              <div style={{textAlign: 'center' }}>
              {dummyauthorfeedback[0].length !== 0 && (
                <div>87% - 100%</div>
              )}   
              </div>
            </td>
            <td style={subHeaderCellStyle}>
              <div style={{textAlign: 'center' }}>
                    {teammateData.length !== 0 && (
                      <div><AverageMarks data={teammateData} /></div>
                    )}
              </div>
            </td>
            <td style={subHeaderCellStyle}>
              <div style={{textAlign: 'center' }}>
              {teammateData.length !== 0 && (
                      <div>90% - 100%</div>
                    )}
              </div>
            </td>
            <td style={subHeaderCellStyle}>
            {teammateData.length !== 0 && (
                      <div style={{textAlign: 'center' }}>
                      <div>75%</div>
                      <div>(in Finished)</div>
                </div>
                    )}
            
            </td>
          </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
    <div>
        {showReviews && (
          <div>
            <h2>Reviews</h2>
            <ShowReviews data={dummyDataRounds} />
          </div>
        )}
        {ShowAuthorFeedback && (
          <div>
            <h2>Author Feedback</h2>
            <ShowReviews data={dummyauthorfeedback} />
          </div>
        )}
      </div>
   </div> 
  );
  
};

export default Statistics;

================
File: src/pages/ViewTeamGrades/teamMarks.tsx
================
import React from 'react';
//props for averagemarks component
interface Review {
    name: string;
    score: number;
    comment: string;
}

interface Question {
    questionNumber: string;
    questionText: string;
    reviews: Review[];
}

interface Props {
    data: Question[];
}
//calculation for average marks for teammate review
const AverageMarks: React.FC<Props> = ({ data }) => {
    const calculateTotalAverageMarks = (): string => {
        let totalScore = 0;
        let totalReviews = 0;

        data.forEach((question: Question) => {
            question.reviews.forEach((review: Review) => {
                totalScore += review.score;
                totalReviews++;
            });
        });

        const totalAverage = totalScore / totalReviews;
        // Rounding the average to two decimal places and converting it to a string
        return totalAverage.toFixed(2);
    };

    return (
        <div>
            <p>{calculateTotalAverageMarks()}</p>
        </div>
    );
};

export default AverageMarks; //returns the average teammate marks recieved

================
File: src/pages/ViewTeamGrades/utils.ts
================
import { ReviewData } from './App';

// Function to get color class based on score and maxScore
export const getColorClass = (score: number, maxScore: number) => {
  let scoreColor = score;
 
  scoreColor = ((maxScore - scoreColor) / maxScore) * 100;
  if (scoreColor >= 80) return 'c1';
  else if (scoreColor >= 60 && scoreColor < 80) return 'c2';
  else if (scoreColor >= 40 && scoreColor < 60) return 'c3';
  else if (scoreColor >= 20 && scoreColor < 40) return 'c4';
  else if (scoreColor >= 0 && scoreColor < 20) return 'c5';
  else return 'cf';
};

// Function to calculate averages for rows and columns
export const calculateAverages = (
  currentRoundData: ReviewData[],
  sortOrderRow: 'asc' | 'desc' | 'none'
) => {
  let totalAvg = 0;
  let questionCount = 0;
  let totalMaxScore = 0;
  currentRoundData.forEach((row) => {
    const sum = row.reviews.reduce((acc, val) => acc + val.score, 0);
    row.RowAvg = sum / row.reviews.length;
    totalAvg = row.RowAvg + totalAvg;
    totalMaxScore = totalMaxScore + row.maxScore;
    questionCount++;
  });

  const averagePeerReviewScore =
    questionCount > 0
      ? (((totalAvg / totalMaxScore) * 100) > 0 ? ((totalAvg / totalMaxScore) * 100).toFixed(2) : '0.00')
      : '0.00';

  const columnAverages: number[] = Array.from({ length: currentRoundData[0].reviews.length }, () => 0);

  currentRoundData.forEach((row) => {
    row.reviews.forEach((val, index) => {
      columnAverages[index] += val.score;
    });
  });

  columnAverages.forEach((sum, index) => {
    columnAverages[index] = (sum / totalMaxScore) * 5;
  });

  let sortedData = [...currentRoundData];

  if (sortOrderRow === 'asc') {
    sortedData = currentRoundData.slice().sort((a, b) => a.RowAvg - b.RowAvg);
  } else if (sortOrderRow === 'desc') {
    sortedData = currentRoundData.slice().sort((a, b) => b.RowAvg - a.RowAvg);
  }

  return { averagePeerReviewScore, columnAverages, sortedData };
};

================
File: src/pages/Home.tsx
================
/**
 * @author Ankur Mundra on May, 2023
 */
const Home = () => {
  return (
    <div>
      <h1>Welcome Home!</h1>
    </div>
  );
};

export default Home;

================
File: src/router/AccessDenied.tsx
================
import React from "react";
import { Alert, Button, Container } from "react-bootstrap";
import { useNavigate } from "react-router-dom";

/**
 * @author Ankur Mundra on June, 2023
 */

interface AccessDeniedProps {
  message: string;
}

const AccessDenied = ({ message }: AccessDeniedProps) => {
  const navigate = useNavigate();

  return (
    <Container className="d-flex justify-content-center align-items-center vh-100">
      <div>
        <Alert variant="danger">
          <Alert.Heading>Access Denied!</Alert.Heading>
          <p>{message}</p>
          <hr />
          <div className="d-flex justify-content-end">
            <Button variant="outline-danger" onClick={() => navigate("..")}>
              Go Back
            </Button>
          </div>
        </Alert>
      </div>
    </Container>
  );
};

export default AccessDenied;

================
File: src/router/ErrorPage.tsx
================
import React from "react";
import { Alert, Button, Container } from "react-bootstrap";
import { useNavigate, useRouteError } from "react-router-dom";
import Header from "../layout/Header";

/**
 * @author Ankur Mundra on June, 2023
 */
const ErrorPage: React.FC = () => {
  const error: any = useRouteError();
  const navigate = useNavigate();
  console.log("ErrorPage: ", error);

  return (
    <>
      <Header />
      <Container className="d-flex justify-content-center align-items-center vh-100">
        <div>
          <Alert variant="danger">
            <Alert.Heading>Oops! Something went wrong.</Alert.Heading>
            <p>{error.message || error}</p>
            <p>{error.data}</p>
            <p>{error.response && error.response.data.error}</p>
            <hr />
            <div className="d-flex justify-content-end">
              <Button variant="secondary" onClick={() => navigate("/")}>
                Go Home
              </Button>
            </div>
          </Alert>
        </div>
      </Container>
    </>
  );
};

export default ErrorPage;

================
File: src/router/NotFound.tsx
================
import React from "react";
import { Alert, Button, Container } from "react-bootstrap";
import { useNavigate } from "react-router-dom";

/**
 * @author Ankur Mundra on June, 2023
 */

function NotFound() {
  const navigate = useNavigate();
  return (
    <Container className="d-flex justify-content-center align-items-center vh-100">
      <div>
        <Alert variant="danger">
          <Alert.Heading>Oops! Something went wrong.</Alert.Heading>
          <hr />
          <h1>404 Not Found!</h1>
          <p>The page you are looking for does not exist.</p>

          <div className="d-flex justify-content-end">
            <Button variant="secondary" onClick={() => navigate("/")}>
              {" "}
              Go Home{" "}
            </Button>
          </div>
        </Alert>
      </div>
    </Container>
  );
}

export default NotFound;

================
File: src/router/ProtectedRoute.tsx
================
import React from "react";
import { Navigate, useLocation } from "react-router-dom";
import { ROLE } from "../utils/interfaces";
import { useSelector } from "react-redux";
import { RootState } from "../store/store";
import AccessDenied from "./AccessDenied";
import { hasAllPrivilegesOf } from "../utils/util";

/**
 * @author Ankur Mundra on June, 2023
 */

interface IProtectedRouteProps {
  element: React.ReactElement;
  leastPrivilegeRole?: ROLE;
}

const ProtectedRoute: React.FC<IProtectedRouteProps> = ({
  element,
  leastPrivilegeRole = ROLE.STUDENT,
}) => {
  const auth = useSelector(
    (state: RootState) => state.authentication,
    (prev, next) => prev.isAuthenticated === next.isAuthenticated
  );
  const { isAuthenticated, user } = auth;
  const location = useLocation();

  if (!isAuthenticated) {
    const from = location.pathname === "/logout" ? "/" : location.pathname;
    return <Navigate to="/login" state={{ from: from }} />;
  }

  if (!hasAllPrivilegesOf(user.role, leastPrivilegeRole)) {
    return (
      <AccessDenied
        message={`You are not authorized for this action! Requires at least ${leastPrivilegeRole.valueOf()} role`}
      />
    );
  }
  return element;
};

export default ProtectedRoute;

================
File: src/store/slices/alertSlice.ts
================
import { createSlice } from "@reduxjs/toolkit";

/**
 * @author Ankur Mundra on May, 2023
 */

const defaultVariant = "info";
const initialAlertState = {
  show: false,
  title: "Info",
  message: "This is Alert!",
  variant: defaultVariant,
};

const alertSlice = createSlice({
  name: "alert",
  initialState: initialAlertState,
  reducers: {
    showAlert(state, action) {
      state.title = action.payload.title || "";
      state.message = action.payload.message;
      state.show = true;
      state.variant = action.payload.variant || defaultVariant;
    },
    hideAlert(state) {
      state.show = false;
    },
  },
});

export const alertActions = alertSlice.actions;
export default alertSlice.reducer;

================
File: src/store/slices/authenticationSlice.ts
================
import { createSlice } from "@reduxjs/toolkit";
import { ILoggedInUser } from "../../utils/interfaces";
import { persistReducer } from "redux-persist";
import storage from "redux-persist/lib/storage";

/**
 * @author Ankur Mundra on June, 2023
 */

const initialAuthenticationState: {
  isAuthenticated: boolean;
  authToken: string;
  user: ILoggedInUser;
} = {
  isAuthenticated: false,
  authToken: "",
  user: { id: 0, name: "", full_name: "", role: "", institution_id: 0 },
};

const authenticationSlice = createSlice({
  name: "authentication",
  initialState: initialAuthenticationState,
  reducers: {
    setAuthentication(state, action) {
      state.isAuthenticated = true;
      state.authToken = action.payload.authToken;
      state.user = action.payload.user;
    },
    removeAuthentication(state) {
      state.isAuthenticated = false;
      state.authToken = "";
      state.user = initialAuthenticationState.user;
    },
  },
});

const persistConfig = {
  key: "authentication",
  storage,
};

const persistedAuthenticationSlice = persistReducer(persistConfig, authenticationSlice.reducer);

export const authenticationActions = authenticationSlice.actions;
export default persistedAuthenticationSlice;

================
File: src/store/rootReducer.ts
================
import { combineReducers } from "@reduxjs/toolkit";
import alertReducer from "./slices/alertSlice";
import authReducer from "./slices/authenticationSlice";

/**
 * @author Ankur Mundra on May, 2023
 */

const rootReducer = combineReducers({
  alert: alertReducer,
  authentication: authReducer,
});
export default rootReducer;

================
File: src/store/store.ts
================
import { configureStore } from "@reduxjs/toolkit";
import rootReducer from "./rootReducer";
import { FLUSH, PAUSE, PERSIST, persistStore, PURGE, REGISTER, REHYDRATE } from "redux-persist";

/**
 * @author Ankur Mundra on May, 2023
 */

export const store = configureStore({
  reducer: rootReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],
      },
    }),
});
export const persistor = persistStore(store);

export type RootState = ReturnType<typeof store.getState>;

================
File: src/utils/auth.ts
================
import jwtDecode, { JwtPayload } from "jwt-decode";
import { ILoggedInUser } from "./interfaces";

/**
 * @author Ankur Mundra on June, 2023
 */

export function setAuthToken(token: string): ILoggedInUser {
  const decodedToken = jwtDecode<JwtPayload>(token);

  if (!decodedToken) {
    throw new Error("Invalid token");
  }

  if (!decodedToken.exp) {
    throw new Error("Expiration time not found in token");
  }
  const expirationDate = new Date(decodedToken.exp * 1000);
  localStorage.setItem("token", token);
  localStorage.setItem("expiration", expirationDate.toISOString());

  return decodedToken as ILoggedInUser;
}

export function getTokenDuration(): number {
  const storedExpirationDate = localStorage.getItem("expiration");

  if (!storedExpirationDate) {
    throw new Error("Expiration date not found in local storage");
  }

  const expirationDate = new Date(storedExpirationDate);
  const now = new Date();
  return expirationDate.getTime() - now.getTime();
}

function isTokenExpired(): boolean {
  const tokenDuration = getTokenDuration();
  return tokenDuration < 0;
}

export function getAuthToken(): string | null {
  const token = localStorage.getItem("token");
  if (!token) return null;
  return isTokenExpired() ? "EXPIRED" : token;
}

================
File: src/utils/axios_client.ts
================
import axios from "axios";
import { getAuthToken } from "./auth";

/**
 * @author Ankur Mundra on June, 2023
 */

const axiosClient = axios.create({
  baseURL: "http://localhost:3002/api/v1",
  timeout: 1000,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

axiosClient.interceptors.request.use((config) => {
  const token = getAuthToken();
  if (token && token !== "EXPIRED") {
    config.headers["Authorization"] = `Bearer ${token}`;
    return config;
  }
  return Promise.reject("Authentication token not found! Please login again.");
});
export default axiosClient;

================
File: src/utils/httpMethods.ts
================
/**
 * @author Ankur Mundra on April, 2023
 */

export enum HttpMethod {
  GET = "GET",
  POST = "POST",
  PUT = "PUT",
  PATCH = "PATCH",
  DELETE = "DELETE",
}

================
File: src/utils/interfaces.ts
================
/**
 * @author Ankur Mundra on June, 2023
 */

export interface IEditor {
  mode: "create" | "update";
}

export interface IRole {
  id?: number;
  name: string;
  parent_id: number;
}

export interface IInstitution {
  id?: number;
  name: string;
}

export interface IInstructor {
  id?: number;
  name: string;
}

export interface ITA {
  id?: number;
  name: string;
}

export interface IUserResponse {
  id: number;
  name: string;
  email: string;
  full_name: string;
  email_on_review: boolean;
  email_on_submission: boolean;
  email_on_review_of_review: boolean;
  role: { id: number; name: string };
  parent: { id: number | null; name: string | null };
  institution: { id: number | null; name: string | null };
}


export interface IParticipantResponse {
  id: number;
  name: string;
  email: string;
  full_name: string;
  email_on_review: boolean;
  email_on_submission: boolean;
  email_on_review_of_review: boolean;
  role: { id: number; name: string };
  parent: { id: number | null; name: string | null };
  institution: { id: number | null; name: string | null };
}

export interface IUserRequest {
  name: string;
  email: string;
  full_name: string;
  role_id: number;
  parent_id?: number | null;
  institution_id: number;
  email_on_review?: boolean;
  email_on_submission?: boolean;
  email_on_review_of_review?: boolean;
}

export interface IParticipantRequest {
  name: string;
  email: string;
  full_name: string;
  role_id: number;
  parent_id?: number | null;
  institution_id: number;
  email_on_review?: boolean;
  email_on_submission?: boolean;
  email_on_review_of_review?: boolean;
}
export interface IAssignmentRequest {
  name: string,
  directory_path: string,
  spec_location:string,
  private:boolean,
  show_template_review: boolean,
  require_quiz:boolean,
  has_badge:boolean,
  staggered_deadline:boolean,
  is_calibrated:boolean,
}

export interface ITAResponse {
  id: number;
  name: string;
  email: string;
  full_name: string;
  email_on_review: boolean;
  email_on_submission: boolean;
  email_on_review_of_review: boolean;
  role: { id: number; name: string };
  parent: { id: number | null; name: string | null };
  institution: { id: number | null; name: string | null };
}

export interface ITARequest {
  name: string;
}

export interface ILoggedInUser {
  id: number;
  name: string;
  full_name: string;
  role: string;
  institution_id: number;
}

export interface ICourseResponse{
  id: number;
  name: string;
  directory_path: string;
  info: string;
  private: boolean;
  created_at: Date;
  updated_at: Date;
  institution_id: number;
  instructor_id: number;
  institution: { id: number | null; name: string | null };
  instructor: { id: number | null; name: string | null };
}

export interface ICourseRequest{
  name: string;
  directory_path: string;
  info: string;
  private: boolean;
  institution_id: number;
  instructor_id: number;
}

export interface IInstitutionResponse {
  id: number;
  name: string;
}

export enum ROLE {
  SUPER_ADMIN = "Super Administrator",
  ADMIN = "Administrator",
  INSTRUCTOR = "Instructor",
  TA = "Teaching Assistant",
  STUDENT = "Student",
}

export interface IAssignmentResponse {
  id: number;
  name: string;
  course_id: number;
  courseName: string;
  created_at: Date; 
  updated_at: Date; 
  directory_path: string;
  spec_location:string;
  private:boolean;
  show_template_review: boolean;
  require_quiz:boolean;
  has_badge:boolean;
  staggered_deadline:boolean;
  is_calibrated:boolean;
  
}


// Assuming that your transformation function for assignment responses might look like this
export const transformAssignmentResponse = (assignmentResponse: string): IAssignmentResponse => {
  const assignment: IAssignmentResponse = JSON.parse(assignmentResponse);
  // Transform response as needed
  return assignment;
};

================
File: src/utils/util.ts
================
/**
 * @author Ankur Mundra on June, 2023
 */
import { ROLE } from "./interfaces";

interface Privileges {
  [key: string]: number;
}

interface PrivilegeID {
  [key: number]: string;
}

const privilegeID: PrivilegeID = {
  1: "Student",
  2: "Teaching Assistant",
  3: "Instructor",
  4: "Administrator",
  5: "Super Administrator",
}

export function getPrivilegeFromID(roleId: number): string {
  return privilegeID[roleId];
}

const privileges: Privileges = {
  Student: 1,
  "Teaching Assistant": 2,
  Instructor: 3,
  Administrator: 4,
  "Super Administrator": 5,
};

export function hasAllPrivilegesOf(role: string, targetRole: ROLE): boolean {
  return privileges[role] >= privileges[targetRole];
}

================
File: src/App.test.tsx
================
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/App.tsx
================
import React from "react";
import { createBrowserRouter, Navigate, RouterProvider } from "react-router-dom";
import AdministratorLayout from "./layout/Administrator";
import ManageUserTypes, { loader as loadUsers } from "./pages/Administrator/ManageUserTypes";
import Login from "./pages/Authentication/Login";
import Logout from "./pages/Authentication/Logout";
import InstitutionEditor, { loadInstitution } from "./pages/Institutions/InstitutionEditor";
import Institutions, { loadInstitutions } from "./pages/Institutions/Institutions";
import RoleEditor, { loadAvailableRole } from "./pages/Roles/RoleEditor";
import Roles, { loadRoles } from "./pages/Roles/Roles";
import Assignment from "./pages/Assignments/Assignment";
import AssignmentEditor from "./pages/Assignments/AssignmentEditor";
import { loadAssignment } from "pages/Assignments/AssignmentUtil";
import ErrorPage from "./router/ErrorPage";
import ProtectedRoute from "./router/ProtectedRoute";
import { ROLE } from "./utils/interfaces";
import NotFound from "./router/NotFound";
import Participants from "pages/Participants/Participant";
import ParticipantEditor from "pages/Participants/ParticipantEditor";
import { loadParticipantDataRolesAndInstitutions } from "pages/Participants/participantUtil";
import RootLayout from "layout/Root";
import UserEditor from "./pages/Users/UserEditor";
import Users from "./pages/Users/User";
import { loadUserDataRolesAndInstitutions } from "./pages/Users/userUtil";
import Home from "pages/Home";
import Questionnaire from "pages/EditQuestionnaire/Questionnaire";
import Courses from "pages/Courses/Course";
import CourseEditor from "pages/Courses/CourseEditor";
import { loadCourseInstructorDataAndInstitutions } from "pages/Courses/CourseUtil";
import TA from "pages/TA/TA";
import TAEditor from "pages/TA/TAEditor";
import { loadTAs } from "pages/TA/TAUtil";
import ReviewTable from "./pages/ViewTeamGrades/ReviewTable";
import EditProfile from "pages/Profile/Edit";
import Reviews from "pages/Reviews/reviews";
import Email_the_author from "./pages/Email_the_author/email_the_author";
import CreateTeams from "pages/Assignments/CreateTeams";
import AssignReviewer from "pages/Assignments/AssignReviewer";
import ViewSubmissions from "pages/Assignments/ViewSubmissions";
import ViewScores from "pages/Assignments/ViewScores";
import ViewReports from "pages/Assignments/ViewReports";
import ViewDelayedJobs from "pages/Assignments/ViewDelayedJobs";
import ProjectTopics from "pages/ProjectTopics/ProjectTopics";
function App() {
  const router = createBrowserRouter([
    {
      path: "/",
      element: <RootLayout />,
      errorElement: <ErrorPage />,
      children: [
        { index: true, element: <ProtectedRoute element={<Home />} /> },
        { path: "login", element: <Login /> },
        { path: "logout", element: <ProtectedRoute element={<Logout />} /> },
        // Add the ViewTeamGrades route
        {
          path: "project-topics",
          element: <ProtectedRoute element={<ProjectTopics />}  />,
        },
        {
          path: "view-team-grades",
          element: <ProtectedRoute element={<ReviewTable />} />,
        },
        {
          path: "edit-questionnaire",
          element: <ProtectedRoute element={<Questionnaire />} />,
        },
        {
          path: "assignments/edit/:id/createteams",
          element: <CreateTeams />,
          loader: loadAssignment,
        },

        {
          path: "assignments/edit/:id/assignreviewer",
          element: <AssignReviewer />,
          loader: loadAssignment,
        },
        {
          path: "assignments/edit/:id/viewsubmissions",
          element: <ViewSubmissions />,
          loader: loadAssignment,
        },
        {
          path: "assignments/edit/:id/viewscores",
          element: <ViewScores />,
          loader: loadAssignment,
        },
        {
          path: "assignments/edit/:id/viewreports",
          element: <ViewReports />,
          loader: loadAssignment,
        },
        {
          path: "assignments/edit/:id/viewdelayedjobs",
          element: <ViewDelayedJobs />,
          loader: loadAssignment,
        },
        {
          path: "assignments",
          element: <ProtectedRoute element={<Assignment />} leastPrivilegeRole={ROLE.TA} />,
          children: [
            {
              path: "new",
              element: <AssignmentEditor mode="create" />,
              loader: loadAssignment,
            },
            {
              path: "edit/:id",
              element: <AssignmentEditor mode="update" />,
              loader: loadAssignment,
            },
          ],
        },
        {
          path: "users",
          element: <ProtectedRoute element={<Users />} leastPrivilegeRole={ROLE.TA} />,
          children: [
            {
              path: "new",
              element: <UserEditor mode="create" />,
              loader: loadUserDataRolesAndInstitutions,
            },
            {
              path: "edit/:id",
              element: <UserEditor mode="update" />,
              loader: loadUserDataRolesAndInstitutions,
            },
          ],
        },
        {
          path: "student_tasks/participants",
          element: <Participants type="student_tasks" id={1} />,
          children: [
            {
              path: "new",
              element: <ParticipantEditor mode="create" type="student_tasks" />,
              loader: loadParticipantDataRolesAndInstitutions,
            },
            {
              path: "edit/:id",
              element: <ParticipantEditor mode="update" type="student_tasks" />,
              loader: loadParticipantDataRolesAndInstitutions,
            },
          ],
        },
        {
          path: "profile",
          element: <ProtectedRoute element={<EditProfile />} />,
        },
        {
          path: "assignments/edit/:assignmentId/participants",
          element: <Participants type="student_tasks" id={1} />,
          children: [
            {
              path: "new",
              element: <ParticipantEditor mode="create" type="assignments" />,
              loader: loadParticipantDataRolesAndInstitutions,
            },
            {
              path: "edit/:id",
              element: <ParticipantEditor mode="update" type="assignments" />,
              loader: loadParticipantDataRolesAndInstitutions,
            },
          ],
        },
        {
          path: "student_tasks/edit/:assignmentId/participants",
          element: <Participants type="student_tasks" id={1} />,
          children: [
            {
              path: "new",
              element: <ParticipantEditor mode="create" type="student_tasks" />,
              loader: loadParticipantDataRolesAndInstitutions,
            },
            {
              path: "edit/:id",
              element: <ParticipantEditor mode="update" type="student_tasks" />,
              loader: loadParticipantDataRolesAndInstitutions,
            },
          ],
        },
        {
          path: "courses/participants",
          element: <Participants type="courses" id={1} />,
          children: [
            {
              path: "new",
              element: <ParticipantEditor mode="create" type="courses" />,
              loader: loadParticipantDataRolesAndInstitutions,
            },
            {
              path: "edit/:id",
              element: <ParticipantEditor mode="update" type="courses" />,
              loader: loadParticipantDataRolesAndInstitutions,
            },
          ],
        },
        {
          path: "reviews",
          element: <Reviews/>,
        },
        {
          path: "email_the_author",
          element: <Email_the_author/>,
        },
        // Fixed the missing comma and added an opening curly brace
        {
          path: "courses",
          element: <ProtectedRoute element={<Courses />} leastPrivilegeRole={ROLE.TA} />,
          children: [
            {
              path: "new",
              element: <CourseEditor mode="create" />,
              loader: loadCourseInstructorDataAndInstitutions,
            },
            {
              path: "edit/:id",
              element: <CourseEditor mode="update" />,
              loader: loadCourseInstructorDataAndInstitutions,
            },
            {
              path: ":courseId/tas",
              element: <ProtectedRoute element={<TA />} leastPrivilegeRole={ROLE.TA} />,
              children: [
                {
                  path: "new",
                  element: <TAEditor mode="create" />,
                  loader: loadTAs,
                },
              ],
            },
          ],
        },
        {
          path: "administrator",
          element: (
            <ProtectedRoute element={<AdministratorLayout />} leastPrivilegeRole={ROLE.ADMIN} />
          ),
          children: [
            {
              id: "roles",
              path: "roles",
              element: <Roles />,
              loader: loadRoles,
              children: [
                {
                  path: "new",
                  element: <RoleEditor mode="create" />,
                },
                {
                  id: "edit-role",
                  path: "edit/:id",
                  element: <RoleEditor mode="update" />,
                  loader: loadAvailableRole,
                },
              ],
            },
            {
              path: "institutions",
              element: <Institutions />,
              loader: loadInstitutions,
              children: [
                {
                  path: "new",
                  element: <InstitutionEditor mode="create" />,
                },
                {
                  path: "edit/:id",
                  element: <InstitutionEditor mode="update" />,
                  loader: loadInstitution,
                },
              ],
            },
            {
              path: ":user_type",
              element: <ManageUserTypes />,
              loader: loadUsers,
              children: [
                {
                  path: "new",
                  element: <Navigate to="/users/new" />,
                },

                {
                  path: "edit/:id",
                  element: <Navigate to="/users/edit/:id" />,
                },
              ],
            },
            {
              path: "questionnaire",
              element: <Questionnaire />,
            },
          ],
        },
        { path: "*", element: <NotFound /> },
        { path: "questionnaire", element: <Questionnaire /> }, // Added the Questionnaire route
      ],
    },
  ]);

  return <RouterProvider router={router} />;
}

export default App;

================
File: src/custom.scss
================
// overwrite theme variables

// good-looking theme
$primary: #a4a366;
$secondary: #9ab6da;
$dark: #386086;
$light: #f2efee;
$success: #66ab57;
$info: #9ab6da;
$warning: #e49b1f;
$danger: #f00678;


// test theme
// scss-docs-start theme-color-variables
$primary: #0d6efd;
//$secondary: #6C757DFF;
$secondary: #000000;
$success: #66ab57;
$info: #0dcaf0;
$warning: #ffc107;
$danger: #dc3545;
$light: #f8f9fa;
$dark: #212529;
$wolf-red: #a90201;
$smoke: #f5f5f5;
$grey: #212529;
$darkgrey: #2b2c2d;

$theme-colors: (
        "primary": $primary,
        "secondary": $secondary,
        "success": $success,
        "info": $info,
        "warning": $warning,
        "danger": $danger,
        "light": $light,
        "dark": $dark,
        "wolf-red": $wolf-red,
        "smoke": $smoke,
        "grey": $grey,
        "darkgrey": $darkgrey
);
// Custom styles for the action buttons in the Etc tab
.assignment-actions {
        display: flex;
        flex-wrap: wrap;
        gap: 10px; // This will create space between the buttons and the ETC tab line
        justify-content: flex-start;
        padding-top: 10px; // Add more space above the buttons if needed
      }
      
      .custom-tab-button {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        background-color: white;
        text-decoration: none;
        color: inherit;
        font-size: 1rem;
        cursor: pointer;
        width: calc(100% / 3 - 10px); // Adjust the width depending on the number of buttons per row
        height: 100px ;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      
        .icon {
          margin-bottom: 5px;
          font-size: 1.5em;
        }
      
        &:hover {
          background-color: #f8f9fa;
          border-color: #adb5bd;
        }
      }
      
      // Responsive adjustments
      @media (max-width: 768px) {
        .custom-tab-button {
          width: calc(100% - 10px); // Full width on small screens
          margin-bottom: 10px; // Space between stacked buttons
        }
      }
// import bootstrap styles at the bottom!
@import 'bootstrap/scss/bootstrap.scss';

================
File: src/index.css
================
* {
  box-sizing: border-box;
}

html {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 14px;
}

================
File: src/index.tsx
================
import React from "react";
import ReactDOM from "react-dom/client";
import { Provider } from "react-redux";
import App from "./App";
import "./custom.scss";
import "./index.css";
import reportWebVitals from "./reportWebVitals";
import { persistor, store } from "./store/store";
import { PersistGate } from "redux-persist/integration/react";

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
  <Provider store={store}>
    <PersistGate loading={null} persistor={persistor}>
      <App />
    </PersistGate>
  </Provider>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/react-app-env.d.ts
================
/// <reference types="react-scripts" />

================
File: src/reportWebVitals.ts
================
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.idea/

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: .prettierrc.yml
================
printWidth: 100
tabWidth: 2

================
File: package.json
================
{
  "name": "expertiza_frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.5.1",
    "@fortawesome/free-solid-svg-icons": "^6.5.1",
    "@fortawesome/react-fontawesome": "^0.2.0",
    "@reduxjs/toolkit": "^1.9.5",
    "@tanstack/react-table": "^8.9.1",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.29",
    "@types/react": "^18.2.6",
    "@types/react-dom": "^18.2.4",
    "@types/react-redux": "^7.1.25",
    "@types/react-router-dom": "^5.3.3",
    "axios": "^1.4.0",
    "bootstrap": "^5.3.3",
    "chart.js": "^4.1.1",
    "formik": "^2.2.9",
    "jquery": "^3.7.1",
    "jwt-decode": "^3.1.2",
    "react": "^18.2.0",
    "react-bootstrap": "^2.7.4",
    "react-chartjs-2": "^5.2.0",
    "react-datepicker": "^4.11.0",
    "react-dom": "^18.2.0",
    "react-i18next": "^14.1.0",
    "react-icons": "^4.9.0",
    "react-redux": "^8.0.5",
    "react-router-dom": "^6.11.1",
    "react-scripts": "^5.0.1",
    "recharts": "^2.0.0",
    "redux-persist": "^6.0.0",
    "sass": "^1.62.1",
    "save": "^2.9.0",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4",
    "yup": "^1.4.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/chart.js": "^2.9.41",
    "@types/jquery": "^3.5.29",
    "@types/jqueryui": "^1.12.21",
    "@types/react-bootstrap": "^0.32.32",
    "@types/react-datepicker": "^4.10.0",
    "prettier": "^2.8.7"
  }
}

================
File: PR.md
================
PR

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es6",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext",
    ],
    "baseUrl": "src",
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
